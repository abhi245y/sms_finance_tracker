Project Path: sms_finance_tracker

Source Tree:

```txt
sms_finance_tracker
├── alembic
│   ├── README
│   ├── env.py
│   ├── script.py.mako
│   └── versions
│       ├── 029d3ed76890_add_new_transaction_fields_for_date_and_.py
│       ├── 0712959a81c5_create_initial_tables.py
│       ├── 075b0ea2a3e8_create_categories_table_and_add_fk_to_.py
│       ├── 10b595ed3fb6_add_new_transaction_fields_for_parser.py
│       ├── 145aec49a5e5_add_unique_hash_to_transactions_table.py
│       ├── 336f32678810_restructure_categories_add_.py
│       ├── 38e48b38d4dd_add_budgeting_data_models_and_fields.py
│       ├── 50622b6b5874_add_override_reimbursable_to_.py
│       ├── ccb1a5dfa2ae_create_accounts_table_and_restructure_.py
│       └── e71bd987c3bf_add_telegram_message_id_to_transactions.py
├── alembic.ini
├── app
│   ├── __init__.py
│   ├── api
│   │   ├── __init__.py
│   │   ├── deps.py
│   │   └── v1
│   │       ├── __init__.py
│   │       └── endpoints
│   │           ├── __init__.py
│   │           ├── accounts.py
│   │           ├── budget.py
│   │           ├── categories.py
│   │           ├── telegram_webhook.py
│   │           └── transactions.py
│   ├── core
│   │   ├── __init__.py
│   │   ├── config.py
│   │   ├── hashing.py
│   │   └── security.py
│   ├── crud
│   │   ├── __init__.py
│   │   ├── crud_account.py
│   │   ├── crud_budget.py
│   │   ├── crud_category.py
│   │   ├── crud_subcategory.py
│   │   └── crud_transaction.py
│   ├── db
│   │   ├── __init__.py
│   │   ├── base_class.py
│   │   └── session.py
│   ├── main.py
│   ├── models
│   │   ├── __init__.py
│   │   ├── account.py
│   │   ├── category.py
│   │   ├── monthly_budget.py
│   │   ├── subcategory.py
│   │   └── transaction.py
│   ├── schemas
│   │   ├── __init__.py
│   │   ├── account.py
│   │   ├── budget.py
│   │   ├── category.py
│   │   ├── telegram.py
│   │   └── transaction.py
│   └── services
│       ├── __init__.py
│       ├── budget_service.py
│       ├── parser_engine.py
│       ├── parsers
│       │   ├── __init__.py
│       │   ├── amex_parser.py
│       │   ├── base_parser.py
│       │   ├── federal_parser.py
│       │   ├── hdfc_parser.py
│       │   ├── icici_parser.py
│       │   ├── idfc_parser.py
│       │   └── sbi_parser.py
│       ├── rule_engine.py
│       ├── telegram_notifier.py
│       └── transaction_status_manager.py
├── screenshots
│   ├── accounts.jpeg
│   ├── categories.jpeg
│   ├── details.jpeg
│   ├── main.jpeg
│   ├── settings-1.jpeg
│   └── settings-2.jpeg
├── static
│   ├── css
│   │   └── mini-app.css
│   ├── images
│   │   └── icons
│   │       └── brand
│   └── js
│       ├── edit-transaction.js
│       └── settings.js
├── templates
│   └── mini-app
│       ├── edit-transaction-stable.html
│       ├── edit-transaction.html
│       └── settings.html
└── tests
    ├── __init__.py
    ├── conftest.py
    ├── fixtures
    │   └── test_data_factory.py
    ├── integration
    │   ├── __init__.py
    │   └── test_api
    │       ├── test_accounts_api.py
    │       ├── test_categories_api.py
    │       ├── test_telegram_webhook.py
    │       └── test_transactions_api.py
    ├── sample_data
    │   ├── __init__.py
    │   ├── praser_result_model.py
    │   └── sms_samples.py
    ├── test_config.py
    └── unit
        ├── test_crud
        │   ├── test_crud_account.py
        │   ├── test_crud_category.py
        │   ├── test_crud_subcategory.py
        │   └── test_crud_transaction.py
        ├── test_parsers
        │   ├── test_amex_paraser.py
        │   ├── test_federal_paraser.py
        │   ├── test_hdfc_parser.py
        │   ├── test_icici_paraser.py
        │   ├── test_idfc_paraser.py
        │   └── test_sbi_paraser.py
        └── test_services
            ├── test_budget_service.py
            └── test_transaction_status_manager.py

```

`sms_finance_tracker/alembic.ini`:

```ini
# A generic, single database configuration.

[alembic]
# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = %(here)s/alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.  for multiple paths, the path separator
# is defined by "path_separator" below.
prepend_sys_path = .


# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# The path separator used here should be the separator specified by "path_separator"
# below.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; This indicates what character is used to split lists of file
# paths, including version_locations and prepend_sys_path within configparser
# files such as alembic.ini.
# The default rendered in new alembic.ini files is "os", which uses os.pathsep
# to provide os-dependent path splitting.
#
# Note that in order to support legacy alembic.ini files, this default does NOT
# take place if path_separator is not present in alembic.ini.  If this
# option is omitted entirely, fallback logic is as follows:
#
# 1. Parsing of the version_locations option falls back to using the legacy
#    "version_path_separator" key, which if absent then falls back to the legacy
#    behavior of splitting on spaces and/or commas.
# 2. Parsing of the prepend_sys_path option falls back to the legacy
#    behavior of splitting on spaces, commas, or colons.
#
# Valid values for path_separator are:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Use os.pathsep. Default configuration used for new projects.
path_separator = os

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# other means of configuring database URLs may be customized within the env.py
# file.
sqlalchemy.url = %(SQLALCHEMY_DATABASE_URL)s


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

```

`sms_finance_tracker/alembic/README`:

```
Generic single-database configuration.
```

`sms_finance_tracker/alembic/env.py`:

```py
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

from app.db.base_class import Base 
from app.models import Transaction  # noqa: F401
from app.models import Category  # noqa: F401
from app.models import SubCategory  # noqa: F401
from app.models import Account  # noqa: F401
from app.models import MonthlyBudget  # noqa: F401
from app.core.config import settings


# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
config.set_main_option("sqlalchemy.url", settings.SQLALCHEMY_DATABASE_URL) 
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

```

`sms_finance_tracker/alembic/script.py.mako`:

```mako
"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    """Upgrade schema."""
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    """Downgrade schema."""
    ${downgrades if downgrades else "pass"}

```

`sms_finance_tracker/alembic/versions/029d3ed76890_add_new_transaction_fields_for_date_and_.py`:

```py
"""add_new_transaction_fields_for_date_and_time

Revision ID: 029d3ed76890
Revises: 10b595ed3fb6
Create Date: 2025-06-05 13:15:11.860567

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '029d3ed76890'
down_revision: Union[str, None] = '10b595ed3fb6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.add_column('transactions', sa.Column('transaction_datetime_from_sms', sa.DateTime(timezone=True), nullable=True))



def downgrade() -> None:
    """Downgrade schema."""
    op.drop_column('transactions', 'transaction_datetime_from_sms')


```

`sms_finance_tracker/alembic/versions/0712959a81c5_create_initial_tables.py`:

```py
"""create_initial_tables

Revision ID: 0712959a81c5
Revises: 
Create Date: 2025-06-04 16:22:07.844222

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0712959a81c5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.create_table('transactions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('raw_sms_content', sa.Text(), nullable=False),
        sa.Column('received_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('amount', sa.Float(), nullable=True),
        sa.Column('currency', sa.String(length=10), nullable=True),
        sa.Column('transaction_type', sa.String(length=50), nullable=True),
        sa.Column('account_identifier', sa.String(length=100), nullable=True),
        sa.Column('category', sa.String(length=100), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('status', sa.Enum('PENDING_CATEGORIZATION', 'PROCESSED', 'ERROR', name='transactionstatus'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transactions_id'), 'transactions', ['id'], unique=False)


def downgrade() -> None:
    """Downgrade schema."""
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_table('transactions')

```

`sms_finance_tracker/alembic/versions/075b0ea2a3e8_create_categories_table_and_add_fk_to_.py`:

```py
"""create_categories_table_and_add_fk_to_transactions

Revision ID: 075b0ea2a3e8
Revises: 029d3ed76890
Create Date: 2025-06-05 15:55:59.905897

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

revision: str = '075b0ea2a3e8'
down_revision: Union[str, None] = '029d3ed76890'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create the 'categories' table - this is fine as it's a new table
    op.create_table('categories',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True)

    # Use batch mode for operations on the existing 'transactions' table
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('category_id', sa.Integer(), nullable=True))
        batch_op.create_index(op.f('ix_transactions_category_id'), ['category_id'], unique=False)
        batch_op.create_foreign_key(
            "fk_transactions_category_id_categories", # Constraint name
            'categories', # Target table for the FK
            ['category_id'], # Local column(s) in 'transactions' table
            ['id'] # Remote column(s) in 'categories' table
        )
        batch_op.drop_column('category')


def downgrade() -> None:
    # Use batch mode for operations on the 'transactions' table in downgrade
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        # Add back the 'category' column
        batch_op.add_column(sa.Column('category', sa.VARCHAR(length=100), nullable=True))
        # Drop the foreign key constraint
        batch_op.drop_constraint("fk_transactions_category_id_categories", type_='foreignkey')
        # Drop the index
        batch_op.drop_index(op.f('ix_transactions_category_id'))
        # Drop the column
        batch_op.drop_column('category_id')

    # Drop the 'categories' table
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
```

`sms_finance_tracker/alembic/versions/10b595ed3fb6_add_new_transaction_fields_for_parser.py`:

```py
"""add_new_transaction_fields_for_parser

Revision ID: 10b595ed3fb6
Revises: 0712959a81c5
Create Date: 2025-06-05 12:50:06.018933

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '10b595ed3fb6'
down_revision: Union[str, None] = '0712959a81c5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.add_column('transactions', sa.Column('merchant_vpa', sa.Text(), nullable=True))
    op.add_column('transactions', sa.Column('bank_name', sa.Text(), nullable=True))


def downgrade() -> None:
    """Downgrade schema."""
    op.drop_column('transactions', 'merchant_vpa')
    op.drop_column('transactions', 'bank_name')

```

`sms_finance_tracker/alembic/versions/145aec49a5e5_add_unique_hash_to_transactions_table.py`:

```py
"""Add unique_hash to transactions table

Revision ID: 145aec49a5e5
Revises: ccb1a5dfa2ae
Create Date: 2025-06-10 14:49:11.935163

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '145aec49a5e5'
down_revision: Union[str, None] = 'ccb1a5dfa2ae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('unique_hash', sa.String(length=64), nullable=False, server_default='temporary_default'))
        batch_op.alter_column('merchant_vpa',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('status',
               existing_type=sa.VARCHAR(length=22),
               type_=sa.Enum('PENDING_ACCOUNT_SELECTION', 'PENDING_CATEGORIZATION', 'PROCESSED', 'ERROR', name='transactionstatus'),
               existing_nullable=False)

        batch_op.create_index(batch_op.f('ix_transactions_unique_hash'), ['unique_hash'], unique=True)

    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.alter_column('unique_hash', server_default=None)


def downgrade() -> None:
    """Downgrade schema."""
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_transactions_unique_hash'))
        
        batch_op.alter_column('status',
               existing_type=sa.Enum('PENDING_ACCOUNT_SELECTION', 'PENDING_CATEGORIZATION', 'PROCESSED', 'ERROR', name='transactionstatus'),
               type_=sa.VARCHAR(length=22),
               existing_nullable=False)
               
        batch_op.alter_column('merchant_vpa',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
               
        batch_op.drop_column('unique_hash')
```

`sms_finance_tracker/alembic/versions/336f32678810_restructure_categories_add_.py`:

```py
"""restructure_categories_add_subcategories_and_seed_data

Revision ID: 336f32678810
Revises: e71bd987c3bf
Create Date: 2025-06-13 17:18:13.537791

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, Text


# revision identifiers, used by Alembic.
revision: str = '336f32678810'
down_revision: Union[str, None] = 'e71bd987c3bf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

# Define table schemas for bulk insert (helps with type safety and less verbose)
categories_table = table('categories',
    column('id', Integer),
    column('name', String),
    column('description', Text),
    column('display_order', Integer)
)

subcategories_table = table('subcategories',
    column('id', Integer),
    column('name', String),
    column('icon_name', String),
    column('display_order', Integer),
    column('parent_category_id', Integer)
)

# --- Seed Data ---
# IDs are manually assigned for predictable FK relationships during seeding.


CATEGORY_ID_OFFSET = 100 
SUBCATEGORY_ID_OFFSET = 1000

# Helper to generate IDs
def cat_id(offset): return CATEGORY_ID_OFFSET + offset
def subcat_id(offset): return SUBCATEGORY_ID_OFFSET + offset

# GENERAL Category (MUST be first for default subcategory)
GENERAL_CAT_ID = cat_id(0)
UNCATEGORIZED_SUBCAT_ID = subcat_id(0)

seed_categories_data = [
    {'id': GENERAL_CAT_ID, 'name': 'General', 'description': 'Default and miscellaneous items', 'display_order': 999},
    {'id': cat_id(1), 'name': 'Food & Drinks', 'description': 'Eating out, Swiggy, Zomato etc.', 'display_order': 0},
    {'id': cat_id(2), 'name': 'Groceries', 'description': 'Kitchen and other household supplies', 'display_order': 1},
    {'id': cat_id(3), 'name': 'Transport', 'description': 'Uber, Ola and other modes of transport', 'display_order': 2},
    {'id': cat_id(4), 'name': 'Shopping', 'description': 'Clothes, shoes, furniture etc.', 'display_order': 3},
    {'id': cat_id(5), 'name': 'Bill', 'description': 'Rent, Wi-fi, electricity and other bills', 'display_order': 4},
    {'id': cat_id(6), 'name': 'Subscription', 'description': 'Recurring payment to online services', 'display_order': 5},
    {'id': cat_id(7), 'name': 'EMI', 'description': 'Repayment of Loan', 'display_order': 6},
    {'id': cat_id(8), 'name': 'Credit Bill', 'description': 'Credit Card & BNPL services settlement', 'display_order': 7},
    {'id': cat_id(9), 'name': 'Investment', 'description': 'Money put towards investment', 'display_order': 8},
    {'id': cat_id(10), 'name': 'Support', 'description': 'Financial support for loved ones', 'display_order': 9},
    {'id': cat_id(11), 'name': 'Insurance', 'description': 'Payment towards insurance premiums', 'display_order': 10},
    {'id': cat_id(12), 'name': 'Tax', 'description': 'Income tax, property tax, e.t.c', 'display_order': 11},
    {'id': cat_id(13), 'name': 'Medical', 'description': 'Medicines, Doctor consulation etc.', 'display_order': 12},
    {'id': cat_id(14), 'name': 'Personal', 'description': 'Money spent on & for yourself', 'display_order': 13},
    {'id': cat_id(15), 'name': 'Fitness', 'description': 'Things to keep your biological machinery in tune', 'display_order': 14},
    {'id': cat_id(16), 'name': 'Services', 'description': 'Professional services provided for a fee', 'display_order': 15},
    {'id': cat_id(17), 'name': 'Entertainment', 'description': 'Movies, Concerts and other recreations', 'display_order': 16},
    {'id': cat_id(18), 'name': 'Events', 'description': 'Being social while putting a dent in your bank account', 'display_order': 17},
    {'id': cat_id(19), 'name': 'Travel', 'description': 'Exploration, fun and vacations!', 'display_order': 18},
    {'id': cat_id(20), 'name': 'Savings', 'description': 'For goals and dreams', 'display_order': 19},
    {'id': cat_id(21), 'name': 'Gift', 'description': 'Money gifted or spent buying gifts :)', 'display_order': 20},
    {'id': cat_id(22), 'name': 'Lent', 'description': 'Money lent with expectation of return', 'display_order': 21},
    {'id': cat_id(23), 'name': 'Donation', 'description': 'Contributions to charities and NGOs', 'display_order': 22},
    {'id': cat_id(24), 'name': 'Hidden Charges', 'description': "Banks's hidden subscription charges", 'display_order': 23},
    {'id': cat_id(25), 'name': 'Cash Withdrawal', 'description': 'Cash taken out from ATM or Bank', 'display_order': 24},
    {'id': cat_id(26), 'name': 'Return', 'description': 'Borrowed money is returned', 'display_order': 25},
    {'id': cat_id(27), 'name': 'Top-up', 'description': 'Money added to online wallets', 'display_order': 26},
    {'id': cat_id(28), 'name': 'Misc.', 'description': 'Everything else', 'display_order': 27},
]

seed_subcategories_data = [
    {'id': UNCATEGORIZED_SUBCAT_ID, 'name': 'Uncategorized', 'icon_name': 'fthr:tag', 'display_order': 0, 'parent_category_id': GENERAL_CAT_ID},

    # Food & Drinks (parent_id: cat_id(1))
    {'id': subcat_id(1), 'name': 'Eating out', 'icon_name': 'emoji:🍽️', 'display_order': 0, 'parent_category_id': cat_id(1)},
    {'id': subcat_id(2), 'name': 'Take Away', 'icon_name': 'emoji:🥡', 'display_order': 1, 'parent_category_id': cat_id(1)},
    {'id': subcat_id(3), 'name': 'Tea & Coffee', 'icon_name': 'emoji:☕', 'display_order': 2, 'parent_category_id': cat_id(1)},
    {'id': subcat_id(4), 'name': 'Fast Food', 'icon_name': 'emoji:🍔', 'display_order': 3, 'parent_category_id': cat_id(1)},
    {'id': subcat_id(5), 'name': 'Snacks', 'icon_name': 'emoji:🍿', 'display_order': 4, 'parent_category_id': cat_id(1)},

    # Groceries (parent_id: cat_id(2))
    {'id': subcat_id(6), 'name': 'Staples', 'icon_name': 'fthr:archive', 'display_order': 0, 'parent_category_id': cat_id(2)}, # Placeholder icon
    {'id': subcat_id(7), 'name': 'Vegetables', 'icon_name': 'emoji:🥦', 'display_order': 1, 'parent_category_id': cat_id(2)},
    {'id': subcat_id(8), 'name': 'Fruits', 'icon_name': 'emoji:🍌', 'display_order': 2, 'parent_category_id': cat_id(2)},
    {'id': subcat_id(9), 'name': 'Meat', 'icon_name': 'emoji:🥩', 'display_order': 3, 'parent_category_id': cat_id(2)},
    {'id': subcat_id(10), 'name': 'Eggs', 'icon_name': 'emoji:🥚', 'display_order': 4, 'parent_category_id': cat_id(2)},

    # Transport (parent_id: cat_id(3))
    {'id': subcat_id(11), 'name': 'Uber', 'icon_name': 'img:brand/uber.svg', 'display_order': 0, 'parent_category_id': cat_id(3)},
    {'id': subcat_id(12), 'name': 'Rapido', 'icon_name': 'emoji:🛵', 'display_order': 1, 'parent_category_id': cat_id(3)},
    {'id': subcat_id(13), 'name': 'Auto', 'icon_name': 'emoji:🛺', 'display_order': 2, 'parent_category_id': cat_id(3)},
    {'id': subcat_id(14), 'name': 'Cab', 'icon_name': 'emoji:🚕', 'display_order': 3, 'parent_category_id': cat_id(3)},
    {'id': subcat_id(15), 'name': 'Train', 'icon_name': 'emoji:🚆', 'display_order': 4, 'parent_category_id': cat_id(3)},
    
    # Shopping (parent_id: cat_id(4))
    {'id': subcat_id(16), 'name': 'Clothes', 'icon_name': 'fthr:shopping-bag', 'display_order': 0, 'parent_category_id': cat_id(4)}, # Placeholder, consider more specific
    {'id': subcat_id(17), 'name': 'Footwear', 'icon_name': 'fthr:award', 'display_order': 1, 'parent_category_id': cat_id(4)}, # Placeholder
    {'id': subcat_id(18), 'name': 'Electronics', 'icon_name': 'fthr:smartphone', 'display_order': 2, 'parent_category_id': cat_id(4)},
    {'id': subcat_id(19), 'name': 'Festival', 'icon_name': 'fthr:gift', 'display_order': 3, 'parent_category_id': cat_id(4)},
    {'id': subcat_id(20), 'name': 'Video games', 'icon_name': 'fthr:play-circle', 'display_order': 4, 'parent_category_id': cat_id(4)},


    # Bill (parent_id: cat_id(5))
    {'id': subcat_id(21), 'name': 'Phone', 'icon_name': 'fthr:phone', 'display_order': 0, 'parent_category_id': cat_id(5)},
    {'id': subcat_id(22), 'name': 'Rent', 'icon_name': 'fthr:home', 'display_order': 1, 'parent_category_id': cat_id(5)},
    {'id': subcat_id(23), 'name': 'Water', 'icon_name': 'fthr:droplet', 'display_order': 2, 'parent_category_id': cat_id(5)},
    {'id': subcat_id(24), 'name': 'Electricity', 'icon_name': 'fthr:zap', 'display_order': 3, 'parent_category_id': cat_id(5)},
    {'id': subcat_id(25), 'name': 'Gas', 'icon_name': 'fthr:thermometer', 'display_order': 4, 'parent_category_id': cat_id(5)}, # Placeholder

    # Subscription (parent_id: cat_id(6))
    {'id': subcat_id(26), 'name': 'Software', 'icon_name': 'fthr:disc', 'display_order': 0, 'parent_category_id': cat_id(6)},
    {'id': subcat_id(27), 'name': 'News', 'icon_name': 'fthr:file-text', 'display_order': 1, 'parent_category_id': cat_id(6)},
    {'id': subcat_id(28), 'name': 'Netflix', 'icon_name': 'img:brand/netflix.svg', 'display_order': 2, 'parent_category_id': cat_id(6)},
    {'id': subcat_id(29), 'name': 'Prime', 'icon_name': 'img:brand/amazonprime.svg', 'display_order': 3, 'parent_category_id': cat_id(6)},
    {'id': subcat_id(30), 'name': 'YouTube', 'icon_name': 'img:brand/youtube.svg', 'display_order': 4, 'parent_category_id': cat_id(6)},

    # EMI (parent_id: cat_id(7))
    {'id': subcat_id(31), 'name': 'Electronics', 'icon_name': 'fthr:smartphone', 'display_order': 0, 'parent_category_id': cat_id(7)},
    {'id': subcat_id(32), 'name': 'House', 'icon_name': 'fthr:home', 'display_order': 1, 'parent_category_id': cat_id(7)},
    {'id': subcat_id(33), 'name': 'Vehicle', 'icon_name': 'fthr:truck', 'display_order': 2, 'parent_category_id': cat_id(7)},
    {'id': subcat_id(34), 'name': 'Education', 'icon_name': 'fthr:book-open', 'display_order': 3, 'parent_category_id': cat_id(7)},
    {'id': subcat_id(35), 'name': 'Others', 'icon_name': 'fthr:tag', 'display_order': 4, 'parent_category_id': cat_id(7)},

    # Credit Bill (parent_id: cat_id(8))
    {'id': subcat_id(36), 'name': 'Credit card', 'icon_name': 'fthr:credit-card', 'display_order': 0, 'parent_category_id': cat_id(8)},
    {'id': subcat_id(37), 'name': 'Simpl', 'icon_name': 'img:brand/simpl.svg', 'display_order': 1, 'parent_category_id': cat_id(8)},
    {'id': subcat_id(38), 'name': 'Slice', 'icon_name': 'img:brand/slice.svg', 'display_order': 2, 'parent_category_id': cat_id(8)},
    {'id': subcat_id(39), 'name': 'Lazypay', 'icon_name': 'img:brand/lazypay.svg', 'display_order': 3, 'parent_category_id': cat_id(8)},
    {'id': subcat_id(40), 'name': 'Amazon Pay', 'icon_name': 'img:brand/amazonpay.svg', 'display_order': 4, 'parent_category_id': cat_id(8)},

    # Investment (parent_id: cat_id(9))
    {'id': subcat_id(41), 'name': 'Mutual Funds', 'icon_name': 'fthr:bar-chart-2', 'display_order': 0, 'parent_category_id': cat_id(9)},
    {'id': subcat_id(42), 'name': 'Stocks', 'icon_name': 'fthr:trending-up', 'display_order': 1, 'parent_category_id': cat_id(9)},
    {'id': subcat_id(43), 'name': 'IPO', 'icon_name': 'fthr:briefcase', 'display_order': 2, 'parent_category_id': cat_id(9)},
    {'id': subcat_id(44), 'name': 'PPF', 'icon_name': 'fthr:shield', 'display_order': 3, 'parent_category_id': cat_id(9)},
    {'id': subcat_id(45), 'name': 'NPS', 'icon_name': 'fthr:shield', 'display_order': 4, 'parent_category_id': cat_id(9)},
    
    # Support (parent_id: cat_id(10))
    {'id': subcat_id(46), 'name': 'Parents', 'icon_name': 'fthr:users', 'display_order': 0, 'parent_category_id': cat_id(10)},
    {'id': subcat_id(47), 'name': 'Spouse', 'icon_name': 'fthr:heart', 'display_order': 1, 'parent_category_id': cat_id(10)},
    {'id': subcat_id(48), 'name': 'Mom', 'icon_name': 'emoji:👩', 'display_order': 2, 'parent_category_id': cat_id(10)},
    {'id': subcat_id(49), 'name': 'Dad', 'icon_name': 'emoji:👨', 'display_order': 3, 'parent_category_id': cat_id(10)},
    {'id': subcat_id(50), 'name': 'Pocket Money', 'icon_name': 'fthr:dollar-sign', 'display_order': 4, 'parent_category_id': cat_id(10)},

    # Insurance (parent_id: cat_id(11))
    {'id': subcat_id(51), 'name': 'Health', 'icon_name': 'fthr:plus-circle', 'display_order': 0, 'parent_category_id': cat_id(11)},
    {'id': subcat_id(52), 'name': 'Vehicle', 'icon_name': 'fthr:truck', 'display_order': 1, 'parent_category_id': cat_id(11)},
    {'id': subcat_id(53), 'name': 'Life', 'icon_name': 'fthr:activity', 'display_order': 2, 'parent_category_id': cat_id(11)},
    {'id': subcat_id(54), 'name': 'Electronics', 'icon_name': 'fthr:smartphone', 'display_order': 3, 'parent_category_id': cat_id(11)}, # Assuming insurance for electronics
    {'id': subcat_id(55), 'name': 'Others', 'icon_name': 'fthr:tag', 'display_order': 4, 'parent_category_id': cat_id(11)},

    # Tax (parent_id: cat_id(12))
    {'id': subcat_id(56), 'name': 'Income Tax', 'icon_name': 'fthr:file-text', 'display_order': 0, 'parent_category_id': cat_id(12)},
    {'id': subcat_id(57), 'name': 'GST', 'icon_name': 'fthr:file-text', 'display_order': 1, 'parent_category_id': cat_id(12)},
    {'id': subcat_id(58), 'name': 'Property Tax', 'icon_name': 'fthr:home', 'display_order': 2, 'parent_category_id': cat_id(12)},
    {'id': subcat_id(59), 'name': 'Others', 'icon_name': 'fthr:tag', 'display_order': 3, 'parent_category_id': cat_id(12)},

    # Medical (parent_id: cat_id(13))
    {'id': subcat_id(60), 'name': 'Medicines', 'icon_name': 'fthr:thermometer', 'display_order': 0, 'parent_category_id': cat_id(13)}, # Placeholder
    {'id': subcat_id(61), 'name': 'Hospital', 'icon_name': 'fthr:plus-square', 'display_order': 1, 'parent_category_id': cat_id(13)},
    {'id': subcat_id(62), 'name': 'Clinic', 'icon_name': 'fthr:activity', 'display_order': 2, 'parent_category_id': cat_id(13)},
    {'id': subcat_id(63), 'name': 'Dentist', 'icon_name': 'emoji:🦷', 'display_order': 3, 'parent_category_id': cat_id(13)},
    {'id': subcat_id(64), 'name': 'Lab test', 'icon_name': 'fthr:thermometer', 'display_order': 4, 'parent_category_id': cat_id(13)}, # Placeholder

    # Personal (parent_id: cat_id(14))
    {'id': subcat_id(65), 'name': 'Self-care', 'icon_name': 'fthr:smile', 'display_order': 0, 'parent_category_id': cat_id(14)},
    {'id': subcat_id(66), 'name': 'Grooming', 'icon_name': 'emoji:✂️', 'display_order': 1, 'parent_category_id': cat_id(14)},
    {'id': subcat_id(67), 'name': 'Hobbies', 'icon_name': 'fthr:feather', 'display_order': 2, 'parent_category_id': cat_id(14)},
    {'id': subcat_id(68), 'name': 'Vices', 'icon_name': 'emoji:🚬', 'display_order': 3, 'parent_category_id': cat_id(14)}, # Example, use generic if preferred
    {'id': subcat_id(69), 'name': 'Therapy', 'icon_name': 'fthr:message-circle', 'display_order': 4, 'parent_category_id': cat_id(14)},

    # Fitness (parent_id: cat_id(15))
    {'id': subcat_id(70), 'name': 'Gym', 'icon_name': 'fthr:activity', 'display_order': 0, 'parent_category_id': cat_id(15)},
    {'id': subcat_id(71), 'name': 'Badminton', 'icon_name': 'emoji:🏸', 'display_order': 1, 'parent_category_id': cat_id(15)},
    {'id': subcat_id(72), 'name': 'Football', 'icon_name': 'emoji:⚽', 'display_order': 2, 'parent_category_id': cat_id(15)},
    {'id': subcat_id(73), 'name': 'Cricket', 'icon_name': 'emoji:🏏', 'display_order': 3, 'parent_category_id': cat_id(15)},
    {'id': subcat_id(74), 'name': 'Classes', 'icon_name': 'fthr:calendar', 'display_order': 4, 'parent_category_id': cat_id(15)},

    # Services (parent_id: cat_id(16))
    {'id': subcat_id(75), 'name': 'Laundry', 'icon_name': 'fthr:refresh-cw', 'display_order': 0, 'parent_category_id': cat_id(16)}, # Placeholder
    {'id': subcat_id(76), 'name': 'Tailor', 'icon_name': 'emoji:🧵', 'display_order': 1, 'parent_category_id': cat_id(16)},
    {'id': subcat_id(77), 'name': 'Courier', 'icon_name': 'fthr:send', 'display_order': 2, 'parent_category_id': cat_id(16)},
    {'id': subcat_id(78), 'name': 'Carpenter', 'icon_name': 'fthr:tool', 'display_order': 3, 'parent_category_id': cat_id(16)},
    {'id': subcat_id(79), 'name': 'Plumber', 'icon_name': 'fthr:tool', 'display_order': 4, 'parent_category_id': cat_id(16)},

    # Entertainment (parent_id: cat_id(17))
    {'id': subcat_id(80), 'name': 'Movies', 'icon_name': 'fthr:film', 'display_order': 0, 'parent_category_id': cat_id(17)},
    {'id': subcat_id(81), 'name': 'Shows', 'icon_name': 'fthr:tv', 'display_order': 1, 'parent_category_id': cat_id(17)},
    {'id': subcat_id(82), 'name': 'Bowling', 'icon_name': 'emoji:🎳', 'display_order': 2, 'parent_category_id': cat_id(17)},
    {'id': subcat_id(83), 'name': 'Others', 'icon_name': 'fthr:tag', 'display_order': 3, 'parent_category_id': cat_id(17)},
    # Duplicate 'Others' in screenshot, ensure unique names or handle appropriately. Assuming one 'Others' per group.
    
    # Events (parent_id: cat_id(18))
    {'id': subcat_id(84), 'name': 'Party', 'icon_name': 'emoji:🎉', 'display_order': 0, 'parent_category_id': cat_id(18)},
    {'id': subcat_id(85), 'name': 'Spiritual', 'icon_name': 'emoji:🕉️', 'display_order': 1, 'parent_category_id': cat_id(18)}, # Or fthr:moon
    {'id': subcat_id(86), 'name': 'Wedding', 'icon_name': 'fthr:heart', 'display_order': 2, 'parent_category_id': cat_id(18)},
    {'id': subcat_id(87), 'name': 'Others', 'icon_name': 'fthr:tag', 'display_order': 3, 'parent_category_id': cat_id(18)},
    
    # Travel (parent_id: cat_id(19))
    {'id': subcat_id(88), 'name': 'Activities', 'icon_name': 'fthr:compass', 'display_order': 0, 'parent_category_id': cat_id(19)},
    {'id': subcat_id(89), 'name': 'Camping', 'icon_name': 'emoji:🏕️', 'display_order': 1, 'parent_category_id': cat_id(19)},
    {'id': subcat_id(90), 'name': 'Hotel', 'icon_name': 'fthr:briefcase', 'display_order': 2, 'parent_category_id': cat_id(19)}, # Placeholder
    {'id': subcat_id(91), 'name': 'Hostel', 'icon_name': 'fthr:home', 'display_order': 3, 'parent_category_id': cat_id(19)},
    {'id': subcat_id(92), 'name': 'Airbnb', 'icon_name': 'img:brand/airbnb.svg', 'display_order': 4, 'parent_category_id': cat_id(19)},

    # Savings (parent_id: cat_id(20))
    {'id': subcat_id(93), 'name': 'Savings', 'icon_name': 'fthr:database', 'display_order': 0, 'parent_category_id': cat_id(20)}, # Placeholder

    # Gift (parent_id: cat_id(21))
    {'id': subcat_id(94), 'name': 'Gift', 'icon_name': 'fthr:gift', 'display_order': 0, 'parent_category_id': cat_id(21)},

    # Lent (parent_id: cat_id(22))
    {'id': subcat_id(95), 'name': 'Lent', 'icon_name': 'fthr:arrow-up-right', 'display_order': 0, 'parent_category_id': cat_id(22)},

    # Donation (parent_id: cat_id(23))
    {'id': subcat_id(96), 'name': 'Donation', 'icon_name': 'fthr:heart', 'display_order': 0, 'parent_category_id': cat_id(23)},

    # Hidden Charges (parent_id: cat_id(24))
    {'id': subcat_id(97), 'name': 'Hidden Charges', 'icon_name': 'fthr:eye-off', 'display_order': 0, 'parent_category_id': cat_id(24)},

    # Cash Withdrawal (parent_id: cat_id(25))
    {'id': subcat_id(98), 'name': 'Cash Withdrawal', 'icon_name': 'fthr:dollar-sign', 'display_order': 0, 'parent_category_id': cat_id(25)},

    # Return (parent_id: cat_id(26))
    {'id': subcat_id(99), 'name': 'Return', 'icon_name': 'fthr:arrow-left', 'display_order': 0, 'parent_category_id': cat_id(26)},

    # Top-up (parent_id: cat_id(27))
    {'id': subcat_id(100), 'name': 'UPI Lite', 'icon_name': 'img:brand/upilite.svg', 'display_order': 0, 'parent_category_id': cat_id(27)},
    {'id': subcat_id(101), 'name': 'Paytm', 'icon_name': 'img:brand/paytm.svg', 'display_order': 1, 'parent_category_id': cat_id(27)},
    {'id': subcat_id(102), 'name': 'Amazon', 'icon_name': 'img:brand/amazon.svg', 'display_order': 2, 'parent_category_id': cat_id(27)},
    {'id': subcat_id(103), 'name': 'PhonePe', 'icon_name': 'img:brand/phonepe.svg', 'display_order': 3, 'parent_category_id': cat_id(27)},
    {'id': subcat_id(104), 'name': 'Others', 'icon_name': 'fthr:tag', 'display_order': 4, 'parent_category_id': cat_id(27)},
    
    # Misc. (parent_id: cat_id(28))
    {'id': subcat_id(105), 'name': 'Tip', 'icon_name': 'fthr:thumbs-up', 'display_order': 0, 'parent_category_id': cat_id(28)},
    {'id': subcat_id(106), 'name': 'Verification', 'icon_name': 'fthr:check-circle', 'display_order': 1, 'parent_category_id': cat_id(28)},
    {'id': subcat_id(107), 'name': 'Forex', 'icon_name': 'fthr:globe', 'display_order': 2, 'parent_category_id': cat_id(28)},
    {'id': subcat_id(108), 'name': 'Deposit', 'icon_name': 'fthr:download', 'display_order': 3, 'parent_category_id': cat_id(28)},
    {'id': subcat_id(109), 'name': 'Gift Card', 'icon_name': 'fthr:gift', 'display_order': 4, 'parent_category_id': cat_id(28)},
]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Create 'subcategories' table
    op.create_table('subcategories',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('icon_name', sa.String(length=100), nullable=True),
        sa.Column('display_order', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('parent_category_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['parent_category_id'], ['categories.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name', 'parent_category_id', name='uq_subcategory_name_parent')
    )
    op.create_index(op.f('ix_subcategories_id'), 'subcategories', ['id'], unique=False)
    op.create_index(op.f('ix_subcategories_parent_category_id'), 'subcategories', ['parent_category_id'], unique=False)

    # Step 2: Modify 'categories' table
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('display_order', sa.Integer(), nullable=False, server_default='0'))
  

    # Step 3 & 4: Seed categories and subcategories
    # Ensure GENERAL_CAT_ID and UNCATEGORIZED_SUBCAT_ID are correctly defined from the seed data
    op.bulk_insert(categories_table, seed_categories_data)
    op.bulk_insert(subcategories_table, seed_subcategories_data)


    # Step 5: Modify 'transactions' table - Part 1: Add subcategory_id as nullable
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('subcategory_id', sa.Integer(), nullable=True))
        batch_op.create_index(batch_op.f('ix_transactions_subcategory_id'), ['subcategory_id'], unique=False)


    # Step 5.1: Populate new subcategory_id using a direct SQL execution
    # This runs OUTSIDE the batch_alter_table context for the UPDATE to see the newly added column.
    # UNCATEGORIZED_SUBCAT_ID must be defined from your seed data constants.
    op.execute(f"UPDATE transactions SET subcategory_id = {UNCATEGORIZED_SUBCAT_ID}")


    # Step 5.2: Modify 'transactions' table - Part 2: Make subcategory_id non-nullable and add FK
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.alter_column('subcategory_id',
                              existing_type=sa.INTEGER(),
                              nullable=False)
        
        batch_op.create_foreign_key(
            "fk_transactions_subcategory_id_subcategories", 
            'subcategories',                                
            ['subcategory_id'],                             
            ['id']                                         
        )

        try:
             batch_op.drop_constraint('fk_transactions_category_id_categories', type_='foreignkey')
        except Exception as e:
            print(f"INFO: Skipping drop of old category FK constraint 'fk_transactions_category_id_categories', might not exist or name differs: {e}")

        try:
            batch_op.drop_index('ix_transactions_category_id') 
        except Exception as e:
             print(f"INFO: Skipping drop of old category_id index 'ix_transactions_category_id', might not exist: {e}")
        try:
            batch_op.drop_column('category_id')
        except Exception as e:
            print(f"INFO: Skipping drop of old category_id column, might not exist: {e}")
    # ### end Alembic commands ###
    
def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.drop_constraint("fk_transactions_subcategory_id_subcategories", type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_transactions_subcategory_id'))
        batch_op.drop_column('subcategory_id')

        batch_op.add_column(sa.Column('category_id', sa.INTEGER(), nullable=True))
        batch_op.create_index('ix_transactions_category_id', ['category_id'], unique=False)


    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.drop_column('display_order')
        batch_op.drop_column('description')

    op.drop_index(op.f('ix_subcategories_parent_category_id'), table_name='subcategories')
    op.drop_index(op.f('ix_subcategories_id'), table_name='subcategories')
    op.drop_table('subcategories')
    
    # ### end Alembic commands ###
```

`sms_finance_tracker/alembic/versions/38e48b38d4dd_add_budgeting_data_models_and_fields.py`:

```py
"""Add budgeting data models and fields

Revision ID: 38e48b38d4dd
Revises: 336f32678810
Create Date: 2025-06-18 16:48:11.730331

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '38e48b38d4dd'
down_revision: Union[str, None] = '336f32678810'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('monthly_budgets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('budget_amount', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('year', 'month', name='uq_year_month_budget')
    )
    op.create_index(op.f('ix_monthly_budgets_id'), 'monthly_budgets', ['id'], unique=False)
    op.add_column('accounts', sa.Column('purpose', sa.Enum('PERSONAL', 'BUSINESS', name='accountpurpose'), server_default='PERSONAL', nullable=False))
    op.add_column('subcategories', sa.Column('is_reimbursable', sa.Boolean(), server_default='0', nullable=False))
    op.add_column('subcategories', sa.Column('exclude_from_budget', sa.Boolean(), server_default='0', nullable=False))

    
    op.add_column('transactions', sa.Column('linked_transaction_hash', sa.String(length=64), nullable=True))
    op.create_index(op.f('ix_transactions_linked_transaction_hash'), 'transactions', ['linked_transaction_hash'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_transactions_linked_transaction_hash'), table_name='transactions')
    op.drop_column('transactions', 'linked_transaction_hash')
    op.drop_column('subcategories', 'exclude_from_budget')
    op.drop_column('subcategories', 'is_reimbursable')
    op.drop_column('accounts', 'purpose')
    op.drop_index(op.f('ix_monthly_budgets_id'), table_name='monthly_budgets')
    op.drop_table('monthly_budgets')
    # ### end Alembic commands ###
```

`sms_finance_tracker/alembic/versions/50622b6b5874_add_override_reimbursable_to_.py`:

```py
"""Add override_reimbursable to transactions

Revision ID: 50622b6b5874
Revises: 38e48b38d4dd
Create Date: 2025-06-19 15:29:17.798836

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '50622b6b5874'
down_revision: Union[str, None] = '38e48b38d4dd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transactions', sa.Column('override_reimbursable', sa.Boolean(), nullable=True))
    op.drop_index(op.f('ix_transactions_subcategory_id'), table_name='transactions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_transactions_subcategory_id'), 'transactions', ['subcategory_id'], unique=False)
    op.drop_column('transactions', 'override_reimbursable')
    # ### end Alembic commands ###

```

`sms_finance_tracker/alembic/versions/ccb1a5dfa2ae_create_accounts_table_and_restructure_.py`:

```py
"""create_accounts_table_and_restructure_transactions_fk

Revision ID: ccb1a5dfa2ae
Revises: 075b0ea2a3e8
Create Date: 2025-06-10 11:17:43.981908

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ccb1a5dfa2ae'
down_revision: Union[str, None] = '075b0ea2a3e8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('account_type', sa.Enum('SAVINGS_ACCOUNT', 'CREDIT_CARD', 'WALLET', 'UNKNOWN', name='accounttype'), nullable=False),
        sa.Column('bank_name', sa.String(length=100), nullable=False),
        sa.Column('account_last4', sa.String(length=4), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('bank_name', 'account_last4', name='uq_bank_account_last4')
    )
    op.create_index(op.f('ix_accounts_bank_name'), 'accounts', ['bank_name'], unique=False)
    op.create_index(op.f('ix_accounts_account_last4'), 'accounts', ['account_last4'], unique=False)
    op.create_index(op.f('ix_accounts_id'), 'accounts', ['id'], unique=False)
    op.create_index('ix_bank_account_last4_composite', 'accounts', ['bank_name', 'account_last4'], unique=False)
    
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('account_id', sa.Integer(), nullable=False))
        batch_op.create_index(batch_op.f('ix_transactions_account_id'), ['account_id'], unique=False)
        batch_op.create_foreign_key(
            "fk_transactions_account_id_accounts",
            'accounts', 
            ['account_id'],
            ['id']
        )
        # Drop the old columns
        batch_op.drop_column('transaction_type')
        batch_op.drop_column('bank_name')
        batch_op.drop_column('account_identifier')
    
    # ### end Alembic commands ###
    
    


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transactions', sa.Column('transaction_type', sa.VARCHAR(length=50), nullable=True))
    op.add_column('transactions', sa.Column('account_identifier', sa.VARCHAR(length=100), nullable=True))
    op.add_column('transactions', sa.Column('bank_name', sa.TEXT(), nullable=True))
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_index(op.f('ix_transactions_id'), table_name='transactions')
    op.drop_index(op.f('ix_transactions_account_id'), table_name='transactions')
    op.alter_column('transactions', 'merchant_vpa',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('transactions', 'account_id')
    # ### end Alembic commands ###

```

`sms_finance_tracker/alembic/versions/e71bd987c3bf_add_telegram_message_id_to_transactions.py`:

```py
"""add_telegram_message_id_to_transactions

Revision ID: e71bd987c3bf
Revises: 145aec49a5e5
Create Date: 2025-06-12 10:57:24.466288

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e71bd987c3bf'
down_revision: Union[str, None] = '145aec49a5e5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transactions', sa.Column('telegram_message_id', sa.Integer(), nullable=True))
    op.create_index(op.f('ix_transactions_telegram_message_id'), 'transactions', ['telegram_message_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_transactions_telegram_message_id'), table_name='transactions')
    op.drop_column('transactions', 'telegram_message_id')
    # ### end Alembic commands ###

```

`sms_finance_tracker/app/api/deps.py`:

```py
from app.db.session import get_db  # noqa: F401

from fastapi import Depends, HTTPException, status
from fastapi.security import APIKeyHeader
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from pydantic import BaseModel

from app.core.config import settings

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
api_key_header_scheme = APIKeyHeader(name="X-API-KEY", auto_error=False) 

async def get_api_key(api_key: str = Depends(api_key_header_scheme)):
    if not api_key:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="X-API-KEY header missing")
    if api_key != settings.IPHONE_SHORTCUT_API_KEY:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid API Key")
    return api_key

mini_app_auth_scheme = APIKeyHeader(name="Authorization", auto_error=False)


class TokenData(BaseModel):
    txn_hash: str

async def get_current_transaction_from_token(
    authorization: str = Depends(mini_app_auth_scheme) # Use the new scheme
) -> TokenData:
    """
    Dependency that decodes and validates a Mini App JWT from the Authorization header.
    Returns the payload containing the transaction hash.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    if not authorization or not authorization.startswith("Bearer"):
        raise credentials_exception
        
    token = authorization.split(" ")[1]
    try:
        payload = jwt.decode(token, key=settings.APP_SECRET_KEY, algorithms=settings.TOKEN_ALGORITHM)
        txn_hash: str = payload.get("txn_hash")
        if txn_hash is None:
            raise credentials_exception
        token_data = TokenData(txn_hash=txn_hash)
    except JWTError:
        raise credentials_exception
    
    return token_data

async def get_transaction_hash_from_token(
    token_data: TokenData = Depends(get_current_transaction_from_token)
) -> str:
    return token_data.txn_hash
```

`sms_finance_tracker/app/api/v1/endpoints/accounts.py`:

```py
from fastapi import APIRouter, Depends, HTTPException, status, Header
from sqlalchemy.orm import Session
from typing import List, Any

from app.crud import crud_account
from app.core.config import settings
from app.schemas import account as account_schema
from app.api import deps

router = APIRouter()

async def verify_api_key(x_api_key: str = Header(...)):
    if x_api_key != settings.IPHONE_SHORTCUT_API_KEY:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API Key",
        )

@router.post(
    "/",
    response_model=account_schema.Account,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new account",
    dependencies=[Depends(verify_api_key)]
)
def create_new_account(
    *,
    db: Session = Depends(deps.get_db),
    account_in: account_schema.AccountCreate,
) -> Any:
    """
    Create a new account (e.g., a credit card, savings account).
    This is used to manually register your payment methods with the system.
    """

    existing_account = crud_account.get_account_by_identifier(
        db,
        bank_name=account_in.bank_name,
        account_last4=account_in.account_last4
    )
    if existing_account:
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail=f"An account with bank '{account_in.bank_name}' and last 4 digits '{account_in.account_last4}' already exists.",
        )
    
    account = crud_account.create_account(db=db, obj_in=account_in)
    return account

@router.get(
    "/",
    response_model=List[account_schema.Account],
    summary="Get a list of all registered accounts",
    dependencies=[Depends(verify_api_key)]
)
def read_all_accounts(
    db: Session = Depends(deps.get_db),
    skip: int = 0,
    limit: int = 100,
) -> Any:
    """
    Retrieve all registered accounts.
    """
    accounts = crud_account.get_accounts(db, skip=skip, limit=limit)
    return accounts

@router.get(
    "/for-mini-app",
    response_model=List[account_schema.Account],
    summary="Get a list of all registered accounts (For Mini App)",
    # dependencies=[Depends(deps.get_transaction_hash_from_token)]
)
def read_all_accounts_mini_app(
    db: Session = Depends(deps.get_db),
    skip: int = 0,
    limit: int = 100,
) -> Any:
    """
    Retrieve all registered accounts.
    """
    accounts = crud_account.get_accounts(db, skip=skip, limit=limit)
    return accounts


@router.get(
    "/{account_id}",
    response_model=account_schema.Account,
    summary="Get a specific account by its ID",
    dependencies=[Depends(verify_api_key)]
)
def read_account_by_id(
    account_id: int,    
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    Get a specific account by its ID.
    """
    account = crud_account.get_account(db=db, account_id=account_id)
    if not account:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Account with ID {account_id} not found.",
        )
    return account

@router.patch(
    "/{account_id}",
    response_model=account_schema.Account,
    summary="Update an account",
    dependencies=[Depends(verify_api_key)]
)
def update_existing_account(
    *,
    db: Session = Depends(deps.get_db),
    account_id: int,
    account_in: account_schema.AccountUpdate,
) -> Any:
    """
    Update an account's details, such as its user-friendly name or type.
    """
    db_account = crud_account.get_account(db=db, account_id=account_id)
    if not db_account:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Account with ID {account_id} not found.",
        )
    
    update_data = account_in.model_dump(exclude_unset=True)
    if "bank_name" in update_data or "account_last4" in update_data:
        # This is a design choice. Forcing users to delete and recreate an account if the
        # core identifiers are wrong can be safer than allowing direct updates.
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"message": "Updating 'bank_name' or 'account_last4' is not permitted. Please create a new account."},
        )

    updated_account = crud_account.update_account(db=db, db_obj=db_account, obj_in=account_in)
    return updated_account

```

`sms_finance_tracker/app/api/v1/endpoints/budget.py`:

```py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Any 
from datetime import datetime

from app.api import deps
from app.schemas import budget as budget_schema
from app.crud import crud_budget 
from app.services.budget_service import get_remaining_spend_power

router = APIRouter()

@router.post(
    "/",
    response_model=budget_schema.BudgetInDB,
    status_code=status.HTTP_201_CREATED, 
    summary="Set or Update a Monthly Budget",
    dependencies=[Depends(deps.get_api_key)]
)
def set_or_update_monthly_budget(
    *,
    db: Session = Depends(deps.get_db),
    budget_in: budget_schema.BudgetCreate,
) -> Any:
    """
    Sets the budget amount for a given year and month.
    If a budget for that period already exists, its amount will be updated.
    Otherwise, a new budget entry will be created.
    """
    budget = crud_budget.create_or_update_budget(db, budget_in=budget_in)
    return budget

@router.get(
    "/{year}/{month}",
    response_model=budget_schema.BudgetInDB,
    summary="Get Budget for a Specific Month",
    dependencies=[Depends(deps.get_api_key)]
)
def get_specific_monthly_budget(
    year: int,
    month: int,
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    Retrieves the budget record for the specified year and month.
    """
    if not (2020 <= year <= datetime.now().year + 5):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid year provided.")
    if not (1 <= month <= 12):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid month provided.")
        
    budget = crud_budget.get_budget(db, year=year, month=month)
    if not budget:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"No budget found for {month:02d}/{year}."
        )
    return budget

@router.get(
    "/summary", 
    response_model=dict,
    summary="Get Current Budget Summary",
    dependencies=[Depends(deps.get_api_key)]
)
def get_budget_summary(db: Session = Depends(deps.get_db)) -> Any:
    """
    Returns the current month's budget, amount spent, and remaining spend power.
    """
    summary = get_remaining_spend_power(db)
    if summary is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="No budget has been set for the current month, or spend power could not be calculated."
        )
    return summary
```

`sms_finance_tracker/app/api/v1/endpoints/categories.py`:

```py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Any, Optional, List

from app.crud import crud_category, crud_subcategory 
from app.schemas import category as category_schema
from app.api import deps

router = APIRouter()

@router.get(
    "/all_details",
    response_model=List[category_schema.CategoryInDB],
    summary="Get all categories with their subcategories",
    description="Returns a list of all categories, each containing its subcategories, ordered by display_order."
)
def read_all_categories_with_details(
    db: Session = Depends(deps.get_db),
    skip: int = 0, 
    limit: int = 100 
) -> Any:
    """
    Retrieve all categories, with their subcategories populated and ordered.
    """
   
    categories = crud_category.get_categories(db=db, skip=skip, limit=limit)
    if not categories:
        return []
    return categories



@router.post(
    "/",
    response_model=category_schema.CategoryCreate, 
    status_code=status.HTTP_201_CREATED,
    summary="Create a new category",
)
def create_new_category(
    *,
    db: Session = Depends(deps.get_db),
    category_in: category_schema.CategoryCreate,
) -> Any:
    """
    Create a new category.
    """
    existing_category = crud_category.get_category_by_name(db, name=category_in.name)
    if existing_category:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Category with name '{category_in.name}' already exists.",
        )
    category = crud_category.create_category(db=db, obj_in=category_in)
    return category


@router.post(
    "/bulk/",
    response_model=List[category_schema.CategoryInDB],
    status_code=status.HTTP_201_CREATED,
    summary="Create multiple categories in bulk",
    description="Accepts a list of category names to create. Skips duplicates if they already exist."
)
def create_new_categories_bulk(
    *,
    db: Session = Depends(deps.get_db),
    categories_in: List[category_schema.CategoryInDB],
) -> Any:
    """
    Create multiple new categories in a single request.
    """
    if not categories_in.categories:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="The list of categories cannot be empty.",
        )
    created_db_categories, errors = crud_category.create_multiple_categories(db=db, categories_in=categories_in.categories)
    
    return {"created_categories": created_db_categories, "errors": errors}


@router.get(
    "/",
    response_model=category_schema.CategoryBase,
    summary="Get a specific category by ID or Name"
)
def get_category(
    category_name: Optional[str] = None, 
    category_id: Optional[int] = None,
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    Get a specific category by its ID or Name.
    """
    category = None
    if category_name:
        category = crud_category.get_category_by_name(db=db, name=category_name)
    elif category_id:
         category = crud_category.get_category(db=db, category_id=category_id)
    else:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Please specify either Category ID or Name",
        )
    
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Category with ID: {category_id} or Name: {category_name} not found.",
        )
    return category
        
        
@router.get(
    "/{category_id_or_name}", 
    response_model=category_schema.CategoryInDB, 
    summary="Get a specific category by ID or Name with its subcategories"
)
def get_single_category_details(
    category_id_or_name: str,
    db: Session = Depends(deps.get_db),
) -> Any:
    category = None
    try:
        category_id = int(category_id_or_name)
        category = crud_category.get_category(db=db, category_id=category_id)
    except ValueError:
        category = crud_category.get_category_by_name(db=db, name=category_id_or_name) 
    
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Category '{category_id_or_name}' not found.",
        )
    return category



@router.get(
    "/subcategories/{subcategory_id}",
    response_model=category_schema.SubCategoryInDB,
    summary="Get a single subcategory by ID"
)
def get_subcategory_by_id(
    subcategory_id: int,
    db: Session = Depends(deps.get_db),
    # Add security if needed, e.g., dependencies=[Depends(deps.get_api_key)]
) -> Any:
    """Retrieve details for a specific subcategory."""
    subcategory = crud_subcategory.get_subcategory(db=db, subcategory_id=subcategory_id)
    if not subcategory:
        raise HTTPException(status_code=404, detail="Subcategory not found")
    return subcategory

@router.patch(
    "/subcategories/{subcategory_id}",
    response_model=category_schema.SubCategoryInDB,
    summary="Update a subcategory",
)
def update_single_subcategory(
    subcategory_id: int,
    *,
    db: Session = Depends(deps.get_db),
    subcategory_in: category_schema.SubCategoryUpdate,
    dependencies=[Depends(deps.get_api_key)]
) -> Any:
    """Update a subcategory's flags (e.g., is_reimbursable)."""
    db_subcategory = crud_subcategory.get_subcategory(db=db, subcategory_id=subcategory_id)
    if not db_subcategory:
        raise HTTPException(status_code=404, detail="Subcategory not found")
    
    updated_subcategory = crud_subcategory.update_subcategory(
        db=db, db_obj=db_subcategory, obj_in=subcategory_in
    )
    return updated_subcategory
```

`sms_finance_tracker/app/api/v1/endpoints/telegram_webhook.py`:

```py
from fastapi import APIRouter, Depends, Request, HTTPException, BackgroundTasks, status
from sqlalchemy.orm import Session
from typing import Any

from app.api import deps
from app.core.config import settings
from app.schemas.telegram import TelegramUpdate
from app.schemas.transaction import TransactionUpdate, TransactionStatus
from app.crud import crud_transaction 
from app.services import telegram_notifier
from app.services.transaction_status_manager import TransactionStatusManager

router = APIRouter()

@router.post("/webhook")
async def telegram_webhook(
    request: Request,
    background_tasks: BackgroundTasks,
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    This endpoint is set as the webhook for the Telegram bot.
    It receives all updates from Telegram, but we only care about callback_queries.
    """
    data = await request.json()
    update = TelegramUpdate.parse_obj(data)

    if not update.callback_query or not update.callback_query.data:
        return {"ok": True}

    if update.callback_query.message.chat.id != int(settings.TELEGRAM_CHAT_ID):
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Unauthorized chat")

    callback_data = update.callback_query.data
    # callback_data is formatted as "action:hash:value"
    # e.g., "set_cat:some_hash_string:5"
    try:
        action, unique_hash, value_str = callback_data.split(":")
    except (ValueError, IndexError):
        print(f"ERROR: Could not parse callback_data: {callback_data}")
        return {"ok": False, "error": "Invalid callback_data format"}

    db_transaction = crud_transaction.get_transaction_by_hash(db, hash_str=unique_hash, include_relations=False)
    if not db_transaction or not db_transaction.telegram_message_id:
        return {"ok": True}
    
    
    update_data = {}
    if action == "set_acc":
        update_data["account_id"] = int(value_str)
        current_status = TransactionStatusManager.determine_status_for_update(
            transaction=db_transaction, db=db, update_data=update_data
        )
        update_data["status"] = current_status.value
    elif action == "set_subcat": 
        update_data["subcategory_id"] = int(value_str)
        current_status = TransactionStatusManager.determine_status_for_update(
            transaction=db_transaction, db=db, update_data=update_data
        )
        update_data["status"] = current_status.value
    elif action == "sel_mod":
        try:
            new_status_enum = TransactionStatus[value_str.upper()]
            update_data["status"] = new_status_enum
        except KeyError:
            print(f"ERROR: Invalid status value for sel_mod: {value_str}")
            return {"ok": False, "error": "Invalid status value"}
    else:
        return {"ok": False, "error": "Unknown action"}
    
    update_schema = TransactionUpdate(**update_data)
    
    updated_transaction_orm = crud_transaction.update_transaction(
        db=db, db_obj=db_transaction, obj_in=update_schema
    )

    background_tasks.add_task(
        telegram_notifier.edit_message_after_update,
        transaction=updated_transaction_orm,
        chat_id=update.callback_query.message.chat.id,
        message_id=update.callback_query.message.message_id,
        db=db
    )
    
    return {"ok": True}
```

`sms_finance_tracker/app/api/v1/endpoints/transactions.py`:

```py
from fastapi import APIRouter, Depends, HTTPException, Header, status, BackgroundTasks
from app.services import telegram_notifier
from sqlalchemy.orm import Session
from typing import Any, List 

from app.api import deps
from app.core.config import settings
from app.services.parser_engine import ParserEngine
from app.services.transaction_status_manager import TransactionStatusManager

from app.services.rule_engine import RuleEngine
# from app.services.budget_service import get_remaining_spend_power


from app.schemas.transaction import (
    TransactionInDB, SMSRecieved, TransactionCreate, TransactionUpdate,
    SubCategoryForTransaction ,
    AccountForTransaction  
)
from app.crud import crud_transaction, crud_account, crud_subcategory

router = APIRouter()

async def verify_api_key(x_api_key: str = Header(...)):
    if x_api_key != settings.IPHONE_SHORTCUT_API_KEY:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API Key",
        )
        
def _map_transaction_to_response_schema(transaction: Any) -> TransactionInDB:
    """Helper to map ORM object to Pydantic schema, populating SubCategoryForTransaction."""
    if not transaction:
        return None
    
    subcategory_for_response = None
    if transaction.subcategory:
        parent_name = "N/A"
        if transaction.subcategory.parent_category: 
            parent_name = transaction.subcategory.parent_category.name
        
        subcategory_for_response = SubCategoryForTransaction(
            id=transaction.subcategory.id,
            name=transaction.subcategory.name,
            icon_name=transaction.subcategory.icon_name,
            parent_category_id=transaction.subcategory.parent_category_id,
            parent_category_name=parent_name
        )

    account_for_response = None
    if transaction.account:
        account_for_response = AccountForTransaction(
            id=transaction.account.id,
            name=transaction.account.name,
            account_type=transaction.account.account_type,
            account_last4=transaction.account.account_last4
        )

    return TransactionInDB(
        id=transaction.id,
        unique_hash=transaction.unique_hash,
        telegram_message_id=transaction.telegram_message_id,
        raw_sms_content=transaction.raw_sms_content,
        received_at=transaction.received_at,
        amount=transaction.amount,
        currency=transaction.currency,
        merchant_vpa=transaction.merchant_vpa,
        transaction_datetime_from_sms=transaction.transaction_datetime_from_sms,
        description=transaction.description,
        status=transaction.status.value if transaction.status else None, 
        account_id=transaction.account_id,
        subcategory_id=transaction.subcategory_id,
        account=account_for_response,
        linked_transaction_hash=transaction.linked_transaction_hash,
        override_reimbursable=transaction.override_reimbursable,
        subcategory=subcategory_for_response,
    )
    

@router.post("/", response_model=TransactionInDB, dependencies=[Depends(verify_api_key)])
async def receive_sms(
    *,
    db: Session = Depends(deps.get_db),
    sms_in: SMSRecieved,
    background_tasks: BackgroundTasks,
) -> Any:
    """
    Receive SMS content from iPhone Shortcut.
    """
    parser = ParserEngine(db_session=db)
    parsed_data = parser.run(sms_text=sms_in.sms_content)
    
    if not parsed_data:
        raise HTTPException(status_code=422, detail={"status":"SMS is not a processable debit transaction or has an unparseable format."})
    
    existing_transaction = crud_transaction.get_transaction_by_hash(db, hash_str=parsed_data["unique_hash"])
    if existing_transaction:
        print(f"DEBUG: Duplicate transaction detected. Returning existing ID {existing_transaction.id}.")
        return _map_transaction_to_response_schema(existing_transaction)
    
    rule_engine = RuleEngine(db_session=db)
    auto_subcategory_id = rule_engine.run(parsed_data)
    if auto_subcategory_id:
        parsed_data["subcategory_id"] = auto_subcategory_id
        
    current_status = TransactionStatusManager.determine_initial_status(
        creation_data=parsed_data,
        db=db
    )

    parsed_data["status"] = current_status.value
    parsed_data["raw_sms_content"] = sms_in.sms_content
    
    parsed_data.pop("flow_type", None) 
    
    transaction_to_create = TransactionCreate(**parsed_data)
  
    try:
        db_transaction = crud_transaction.create_transaction(db=db, obj_in=transaction_to_create)
    except Exception as e:
        print(f"Error creating transaction: {e}")
        raise HTTPException(status_code=400, detail=f"Invalid transaction data: {str(e)}")
    
    transaction_with_relations = crud_transaction.get_transaction_by_hash(db, hash_str=db_transaction.unique_hash, include_relations=True)

    message_id = await telegram_notifier.send_new_transaction_notification(
        transaction=transaction_with_relations, 
        db=db
    )
    if message_id:
        crud_transaction.update_transaction_message_id(db, transaction_obj=transaction_with_relations, message_id=message_id)

    return _map_transaction_to_response_schema(transaction_with_relations)
@router.get(
    "/get/by-token",
    response_model=TransactionInDB,
    summary="Retrieve single transaction via token.",
)
def get_transaction_by_token(
    db: Session = Depends(deps.get_db),
    transaction_hash: str = Depends(deps.get_transaction_hash_from_token),
) -> Any:
    transaction = crud_transaction.get_transaction_by_hash(db=db, hash_str=transaction_hash, include_relations=True)
    if not transaction:
        raise HTTPException(status_code=404, detail="Transaction not found")
    return _map_transaction_to_response_schema(transaction)



@router.get("/list", response_model=List[TransactionInDB])
def read_transactions(
    db: Session = Depends(deps.get_db),
    skip: int = 0,
    limit: int = 100,
) -> Any:
    transactions_orm = crud_transaction.get_transactions(db, skip=skip, limit=limit, include_relations=True)
    return [_map_transaction_to_response_schema(tx) for tx in transactions_orm]

@router.get(
    "/get/{transaction_hash}", 
    response_model=TransactionInDB,
    summary="Retrieve single transaction.",
    dependencies=[Depends(verify_api_key)]
    )
def get_transaction_by_hash_api(
    transaction_hash: str,
    db: Session = Depends(deps.get_db),
) -> Any:
    transaction = crud_transaction.get_transaction_by_hash(db=db, hash_str=transaction_hash, include_relations=True)
    if not transaction:
        raise HTTPException(status_code=404, detail="Transaction not found")
    return _map_transaction_to_response_schema(transaction)
    
def _update_transaction_logic(
    db: Session,
    transaction_hash: str,
    transaction_in: TransactionUpdate, 
    background_tasks: BackgroundTasks
) -> Any:
    
    db_transaction = crud_transaction.get_transaction_by_hash(db=db, hash_str=transaction_hash, include_relations=False)
    if not db_transaction:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Transaction not found")

    if not transaction_in.model_dump(exclude_unset=True):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Request body is empty")

    update_data = transaction_in.model_dump(exclude_unset=True)
    
    print(update_data)
    
    # category_name logic is removed. Update is via subcategory_id.
    # Ensure subcategory_id, if provided, is valid (optional check here, or rely on FK constraint)
    if "subcategory_id" in update_data and update_data["subcategory_id"] is not None:
        if not crud_subcategory.get_subcategory(db=db, subcategory_id=update_data["subcategory_id"]):
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"SubCategory with ID {update_data['subcategory_id']} not found.")
            
    if "account_id" in update_data and update_data["account_id"] is not None:
        if not crud_account.get_account(db=db, account_id=update_data["account_id"]):
             raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Account with ID {update_data['account_id']} not found.")
    

    current_status = TransactionStatusManager.determine_status_for_update(
        transaction=db_transaction, 
        db=db,
        update_data=update_data
    )
    update_data["status"] = current_status.value 
        
    update_schema = TransactionUpdate(**update_data) 

    updated_transaction_orm = crud_transaction.update_transaction(
        db=db, db_obj=db_transaction, obj_in=update_schema
    )
    
    if updated_transaction_orm.telegram_message_id:
        background_tasks.add_task(
            telegram_notifier.edit_message_after_update,
            transaction=updated_transaction_orm,
            chat_id=int(settings.TELEGRAM_CHAT_ID),
            message_id=updated_transaction_orm.telegram_message_id,
            db=db
        )

    return _map_transaction_to_response_schema(updated_transaction_orm)

@router.patch(
    "/by-token",
    response_model=TransactionInDB,
    summary="Update a Transaction (Mini App)",
)
def update_transaction_by_token(
    *,
    db: Session = Depends(deps.get_db),
    background_tasks: BackgroundTasks,
    transaction_in: TransactionUpdate,
    transaction_hash: str = Depends(deps.get_transaction_hash_from_token)
) -> Any:
    """
    Update a transaction's description or other details via a secure token.
    This endpoint is intended for use by the Telegram Mini App.
    """
    return _update_transaction_logic(
        db=db, transaction_hash=transaction_hash, transaction_in=transaction_in, background_tasks=background_tasks
    )

@router.patch("/{transaction_hash}", response_model=TransactionInDB, dependencies=[Depends(verify_api_key)])
def update_transaction_details_api(
    *,
    db: Session = Depends(deps.get_db),
    transaction_hash: str,
    transaction_in: TransactionUpdate,
    background_tasks: BackgroundTasks,
) -> Any:
    """
    Update a transaction with enrichment data like an account or category.
    This endpoint is secured with an API key, intended for use by Shortcuts or trusted clients.
    """
    return _update_transaction_logic(
        db=db, transaction_hash=transaction_hash, transaction_in=transaction_in, background_tasks=background_tasks
    )

@router.get(
    "/linkable",
    response_model=List[TransactionInDB],
    summary="Get recent transactions available for linking",
    dependencies=[Depends(deps.get_transaction_hash_from_token)]
)
def get_linkable_transactions(
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    Returns a list of recent transactions that are not yet linked,
    which can be presented as options for linking.
    """
    transactions_orm = crud_transaction.get_transactions_for_linking(db=db, days=30, limit=50)
    
    return [_map_transaction_to_response_schema(tx) for tx in transactions_orm]


@router.get(
    "/by-hash/{unique_hash}",
    response_model=TransactionInDB, 
    summary="Get a single transaction by its unique hash",
    dependencies=[Depends(deps.get_transaction_hash_from_token)]
)
def get_transaction_details_by_hash(
    unique_hash: str,
    db: Session = Depends(deps.get_db),
) -> Any:
    """
    Retrieve full details for a specific transaction given its unique_hash.
    Useful for fetching details of a linked transaction.
    """
    transaction_orm = crud_transaction.get_transaction_by_hash(db, hash_str=unique_hash, include_relations=True)
    if not transaction_orm:
        raise HTTPException(status_code=404, detail="Transaction with this hash not found")
    
    return _map_transaction_to_response_schema(transaction_orm)
```

`sms_finance_tracker/app/core/config.py`:

```py
from pydantic_settings import BaseSettings
from typing import Optional, List

class Settings(BaseSettings):
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "SMS Finance Tracker"
    SQLALCHEMY_DATABASE_URL: str = "sqlite:///./finance_tracker.db"
    APP_SECRET_KEY: Optional[str] = None
    IPHONE_SHORTCUT_API_KEY: Optional[str] = None
    VERSION: str = "0.3.0"
    BACKEND_CORS_ORIGINS: List[str] = None
    
    TELEGRAM_BOT_TOKEN: Optional[str] = None
    TELEGRAM_CHAT_ID: Optional[str] = None
    MINI_APP_BASE_URL: Optional[str] = None
    TOKEN_ALGORITHM: str = "HS256"

    class Config:
        env_file = ".env"
        env_file_encoding = 'utf-8'

settings = Settings()

```

`sms_finance_tracker/app/core/hashing.py`:

```py
import hashlib
import xxhash
import base64
from typing import Dict, Any, Optional
from datetime import datetime

def generate_transaction_hash(parsed_data: Dict[str, Any], hash_type: str = 'xxhash') -> Optional[str]:
    """
    Generates a unique, recreatable SHA256 hash or xxhash  for a transaction.
    
    The hash is based on the most stable components of a transaction:
    - Transaction Datetime (normalized to ISO 8601 format)
    - Amount (formatted to 2 decimal places)
    - Account ID
    - Merchant/VPA (normalized to lowercase)
    """
    try:
        tx_datetime: Optional[datetime] = parsed_data.get("transaction_datetime_from_sms")
        amount: Optional[float] = parsed_data.get("amount")
        account_id: Optional[int] = parsed_data.get("account_id")
        merchant: Optional[str] = parsed_data.get("merchant_vpa")

        if not tx_datetime or amount is None:
            return None
        
        datetime_str = tx_datetime.strftime('%Y-%m-%dT%H:%M:%S')

        amount_str = f"{amount:.2f}"

        merchant_str = str(merchant).lower().strip() if merchant else "none"

        # Use account_id if available, otherwise fall back to bank_name for ambiguous transactions
        # This requires the ParserEngine to pass bank_name through.
        identifier_str = str(account_id) if account_id is not None else str(parsed_data.get("bank_name", "unknown_bank")).lower()

        stable_string = f"{datetime_str}|{amount_str}|{identifier_str}|{merchant_str}"
        
        print(f"DEBUG: Generating hash from stable string: \"{stable_string}\"")

        
        if hash_type == 'xxhash':
            hash_bytes = xxhash.xxh128(stable_string, seed=2024).digest()
            encoded_hash = base64.urlsafe_b64encode(hash_bytes).decode('ascii').rstrip('=')
            return encoded_hash
        
        if hash_type == 'SHA256':
            hasher = hashlib.sha256()
            hasher.update(stable_string.encode('utf-8'))
            return hasher.hexdigest()

    except Exception as e:
        print(f"ERROR: Could not generate transaction hash. Error: {e}")
        return None
```

`sms_finance_tracker/app/core/security.py`:

```py
from datetime import datetime, timedelta
from jose import jwt

from app.core.config import settings

def create_mini_app_access_token(transaction_hash: str) -> str:
    """
    Creates a short-lived JWT for the Mini App to use.
    The token is specific to one transaction hash.
    """
    expire = datetime.utcnow() + timedelta(hours=9000)
    to_encode = {
        "exp": expire,
        "sub": "mini_app_user",
        "txn_hash": transaction_hash 
    }
    encoded_jwt = jwt.encode(to_encode, key=settings.APP_SECRET_KEY, algorithm=settings.TOKEN_ALGORITHM)
    
    
    return encoded_jwt
```

`sms_finance_tracker/app/crud/__init__.py`:

```py
from .crud_account import create_account, get_account, get_accounts, get_account_by_identifier, update_account
from .crud_category import (
    create_category, get_category, get_categories, get_category_by_name, 
    get_all_category_names, create_multiple_categories, update_category
)
from .crud_subcategory import get_subcategory, get_subcategories_for_parent 
from .crud_transaction import (
    create_transaction, get_transaction, get_transactions, 
    update_transaction, get_transaction_by_hash, update_transaction_message_id,
    get_default_uncategorized_subcategory_id 
)
from .crud_budget import get_budget, create_or_update_budget

from .crud_transaction import (
    create_transaction, get_transaction, get_transactions, 
    update_transaction, get_transaction_by_hash, update_transaction_message_id,
    get_default_uncategorized_subcategory_id,
    get_transactions_for_linking # New export
)
from .crud_budget import get_budget, create_or_update_budget
```

`sms_finance_tracker/app/crud/crud_account.py`:

```py
from sqlalchemy.orm import Session
from typing import List, Optional

from app.models.account import Account as AccountModel, AccountType
from app.schemas.account import AccountCreate, AccountUpdate

# --- READ Operations ---

def get_account(db: Session, account_id: int) -> Optional[AccountModel]:
    """Get a single account by its ID."""
    return db.query(AccountModel).filter(AccountModel.id == account_id).first()

def get_account_by_identifier(db: Session, *, bank_name: str, account_last4: str) -> Optional[AccountModel]:
    """Get a single account by its unique composite key (bank_name + last4)."""
    return db.query(AccountModel).filter(
        AccountModel.bank_name == bank_name,
        AccountModel.account_last4 == account_last4
    ).first()

def get_account_by_type(db: Session, account_type: AccountType, skip: int = 0, limit: int = 100) -> Optional[AccountModel]:
    """Get a list of all accounts  of given type."""
    return db.query(AccountModel).filter(
        AccountModel.account_type == account_type
    ).offset(skip).limit(limit).all()

def get_accounts(db: Session, skip: int = 0, limit: int = 100) -> List[AccountModel]:
    """Get a list of all accounts."""
    return db.query(AccountModel).order_by(AccountModel.name).offset(skip).limit(limit).all()

# --- CREATE Operation ---

def create_account(db: Session, *, obj_in: AccountCreate) -> AccountModel:
    """Create a new account."""
    db_obj = AccountModel(
        name=obj_in.name,
        account_type=obj_in.account_type,
        bank_name=obj_in.bank_name,
        account_last4=obj_in.account_last4
    )
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

# --- UPDATE Operation ---

def update_account(
    db: Session,
    *,
    db_obj: AccountModel,
    obj_in: AccountUpdate
) -> AccountModel:
    """Update an existing account."""
    update_data = obj_in.model_dump(exclude_unset=True)
    for field, value in update_data.items():
        setattr(db_obj, field, value)
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

# --- DELETE Operation ---
# Note: Need a strategy for what happens to transactions linked to a deleted account.
# For now, we'll just provide the function.
def delete_account(db: Session, *, account_id: int) -> Optional[AccountModel]:
    """Delete an account by ID."""
    db_obj = db.query(AccountModel).filter(AccountModel.id == account_id).first()
    if db_obj:
        db.delete(db_obj)
        db.commit()
    return db_obj
```

`sms_finance_tracker/app/crud/crud_budget.py`:

```py
from sqlalchemy.orm import Session
from app.models.monthly_budget import MonthlyBudget
from app.schemas.budget import BudgetCreate, BudgetUpdate

def get_budget(db: Session, *, year: int, month: int) -> MonthlyBudget | None:
    """
    Retrieves the budget for a specific year and month.
    """
    return db.query(MonthlyBudget).filter(MonthlyBudget.year == year, MonthlyBudget.month == month).first()

def create_budget(db: Session, *, obj_in: BudgetCreate) -> MonthlyBudget:
    """
    Creates a new budget entry.
    """
    db_obj = MonthlyBudget(**obj_in.model_dump())
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def update_budget(db: Session, *, db_obj: MonthlyBudget, obj_in: BudgetUpdate) -> MonthlyBudget:
    """
    Updates an existing budget's amount.
    """
    db_obj.budget_amount = obj_in.budget_amount
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def create_or_update_budget(db: Session, *, budget_in: BudgetCreate) -> MonthlyBudget:
    """
    A convenient function that checks if a budget for the given month/year exists.
    If it does, it updates it. If not, it creates a new one.
    """
    db_budget = get_budget(db, year=budget_in.year, month=budget_in.month)
    if db_budget:
        update_schema = BudgetUpdate(budget_amount=budget_in.budget_amount)
        return update_budget(db=db, db_obj=db_budget, obj_in=update_schema)
    else:
        return create_budget(db=db, obj_in=budget_in)
```

`sms_finance_tracker/app/crud/crud_category.py`:

```py
from sqlalchemy.orm import Session, selectinload
from typing import List, Optional, Dict, Any, Tuple
from sqlalchemy.exc import IntegrityError

from app.models.category import Category as CategoryModel
from app.models.subcategory import SubCategory as SubCategoryModel 
from app.schemas.category import CategoryCreate, CategoryUpdate 

# --- READ Operations ---

def get_category(db: Session, category_id: int) -> Optional[CategoryModel]:
    return db.query(CategoryModel).filter(CategoryModel.id == category_id).first()

def get_category_by_name(db: Session, name: str) -> Optional[CategoryModel]:
    return db.query(CategoryModel).filter(CategoryModel.name == name).first()

def get_categories(db: Session, skip: int = 0, limit: int = 100) -> List[CategoryModel]:
    """
    Get a list of all categories, with pagination, and eagerly load their subcategories.
    Subcategories are ordered by their display_order.
    Categories are ordered by their display_order.
    """
    return db.query(CategoryModel)\
        .options(selectinload(CategoryModel.subcategories))\
        .order_by(CategoryModel.display_order, CategoryModel.name)\
        .offset(skip)\
        .limit(limit)\
        .all()

def get_all_category_names(db: Session) -> List[str]:
    results = db.query(CategoryModel.name).order_by(CategoryModel.name).all()
    return [result[0] for result in results]

# --- SubCategory CRUD (Minimal as discussed, primarily for get_subcategory for now) ---
# You would place these in a new app/crud/crud_subcategory.py file and import from there.
# For brevity here, I'm including a minimal get_subcategory.

def get_subcategory(db: Session, subcategory_id: int) -> Optional[SubCategoryModel]:
    """Get a single subcategory by its ID, optionally loading its parent."""
    return db.query(SubCategoryModel)\
        .options(selectinload(SubCategoryModel.parent_category))\
        .filter(SubCategoryModel.id == subcategory_id)\
        .first()
# --- CREATE Operation ---
# (create_category, create_multiple_categories remain largely the same,
#  but ensure they handle new fields like description, display_order if CategoryCreate schema is updated)

def create_category(db: Session, *, obj_in: CategoryCreate) -> CategoryModel:
    """
    Create a new category.
    'obj_in' is a Pydantic schema (CategoryCreate).
    """
    db_obj = CategoryModel(**obj_in.model_dump())
    # If your CategoryCreate schema had more fields, you'd map them here:
    # db_obj = CategoryModel(**obj_in.model_dump()) # If CategoryModel fields match CategoryCreate fields
    
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def create_multiple_categories(db: Session, *, categories_in: List[CategoryCreate]) -> Tuple[List[CategoryModel], List[Dict[str, Any]]]:
    """
    Create multiple new categories.
    Skips categories that already exist by name.
    Returns a tuple: (list_of_successfully_created_categories, list_of_errors)
    """
    created_categories_db: List[CategoryModel] = []
    errors: List[Dict[str, Any]] = []

    for cat_in in categories_in:
        existing_category = get_category_by_name(db, name=cat_in.name)
        if existing_category:
            errors.append({"name": cat_in.name, "detail": "Category with this name already exists."})
            continue

        try:
            created_db_obj = CategoryModel(name=cat_in.name)
            db.add(created_db_obj)
            db.flush()
            db.refresh(created_db_obj)
            created_categories_db.append(created_db_obj)

        except IntegrityError as e:
            db.rollback()
            errors.append({"name": cat_in.name, "detail": f"Database integrity error: {e.orig}"})
        except Exception as e:
            db.rollback()
            errors.append({"name": cat_in.name, "detail": f"An unexpected error occurred: {str(e)}"})
    
    db.commit()
    for cat in created_categories_db:
        db.refresh(cat)

    return created_categories_db, errors

# --- UPDATE Operation ---
# Not strictly needed for the Shortcut's GET request, but good for completeness.

def update_category(
    db: Session,
    *,
    db_obj: CategoryModel, # The existing category ORM object to update
    obj_in: CategoryUpdate # Pydantic schema with fields to update
) -> CategoryModel:
    """
    Update an existing category.
    'db_obj' is the SQLAlchemy model instance.
    'obj_in' is a Pydantic schema (CategoryUpdate) or a dict.
    """
    update_data = obj_in.model_dump(exclude_unset=True) # Get only fields that were actually provided
    
    for field, value in update_data.items():
        setattr(db_obj, field, value)
        
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

# --- DELETE Operation ---
# Not strictly needed for current plan, but good for completeness.

def delete_category(db: Session, *, category_id: int) -> Optional[CategoryModel]:
    """
    Delete a category by ID.
    Returns the deleted category object or None if not found.
    """
    db_obj = db.query(CategoryModel).filter(CategoryModel.id == category_id).first()
    if db_obj:
        db.delete(db_obj)
        db.commit()
    return db_obj

```

`sms_finance_tracker/app/crud/crud_subcategory.py`:

```py
# app/crud/crud_subcategory.py
from sqlalchemy.orm import Session, selectinload
from typing import Optional, List
from app.models.subcategory import SubCategory as SubCategoryModel
from app.schemas.category import SubCategoryCreate, SubCategoryUpdate

def get_subcategory(db: Session, subcategory_id: int) -> Optional[SubCategoryModel]:
    """Get a single subcategory by its ID, optionally loading its parent."""
    return db.query(SubCategoryModel)\
        .options(selectinload(SubCategoryModel.parent_category))\
        .filter(SubCategoryModel.id == subcategory_id)\
        .first()

def get_subcategories_for_parent(db: Session, parent_category_id: int) -> List[SubCategoryModel]:
    """Get all subcategories for a given parent category, ordered."""
    return db.query(SubCategoryModel)\
        .filter(SubCategoryModel.parent_category_id == parent_category_id)\
        .order_by(SubCategoryModel.display_order, SubCategoryModel.name)\
        .all()

def update_subcategory(
    db: Session, *, db_obj: SubCategoryModel, obj_in: SubCategoryUpdate
) -> SubCategoryModel:
    """Update an existing subcategory."""
    update_data = obj_in.model_dump(exclude_unset=True)
    for field, value in update_data.items():
        setattr(db_obj, field, value)
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def create_subcategory(db: Session, obj_in: SubCategoryCreate) -> SubCategoryModel:
    db_obj = SubCategoryModel(**obj_in.model_dump())
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj
```

`sms_finance_tracker/app/crud/crud_transaction.py`:

```py
from sqlalchemy.orm import Session, selectinload
from app.models import Transaction, SubCategory, Category
from sqlalchemy import and_ 
from datetime import datetime, timedelta

from app.schemas.transaction import TransactionCreate, TransactionUpdate 


DEFAULT_UNCATEGORIZED_SUBCATEGORY_ID = 1000


def get_transactions_for_linking(db: Session, *, days: int = 30, limit: int = 50) -> list[Transaction]:
    """
    Retrieves recent transactions that have not yet been linked.
    """
    time_filter = datetime.now() - timedelta(days=days)
    
    query = _get_transaction_query(db, include_relations=True).filter(
        and_(
            Transaction.linked_transaction_hash.is_(None),
            Transaction.transaction_datetime_from_sms >= time_filter
        )
    ).order_by(
        Transaction.transaction_datetime_from_sms.desc()
    ).limit(limit)
    
    return query.all()


def get_default_uncategorized_subcategory_id(db: Session) -> int:
    """
    Retrieves the ID of the 'Uncategorized' subcategory under the 'General' category.
    This is a simplified example. You might want to make this more robust,
    e.g., by having fixed IDs in your seed or querying by name.
    """

    general_category = db.query(SubCategory.parent_category_id).join(SubCategory.parent_category).filter(Category.name == "General").first()
    if not general_category:
        raise Exception("Default 'General' category not found. Please seed the database.")
    
    uncategorized_subcat = db.query(SubCategory).filter(
        SubCategory.name == "Uncategorized",
        SubCategory.parent_category_id == general_category.parent_category_id
    ).first()

    if not uncategorized_subcat:
        print(f"WARNING: 'Uncategorized' subcategory under 'General' not found dynamically. Falling back to ID: {DEFAULT_UNCATEGORIZED_SUBCATEGORY_ID}")
        print("Please ensure your database is seeded correctly with a 'General' category and an 'Uncategorized' subcategory under it.")
        return DEFAULT_UNCATEGORIZED_SUBCATEGORY_ID 
    return uncategorized_subcat.id



def create_transaction(db: Session, *, obj_in: TransactionCreate) -> Transaction:
    """
    Create a new transaction record in the database.

    Args:
        db: The database session.
        obj_in: A Pydantic model containing all necessary data for a new transaction.
    
    Returns:
        The newly created SQLAlchemy Transaction object.
    """
    db_obj = Transaction(
        unique_hash=obj_in.unique_hash,
        raw_sms_content=obj_in.raw_sms_content,
        amount=obj_in.amount,
        currency=obj_in.currency,
        merchant_vpa=obj_in.merchant_vpa,
        transaction_datetime_from_sms=obj_in.transaction_datetime_from_sms,
        description=obj_in.description,
        status=obj_in.status, 
        account_id=obj_in.account_id,
        # exclude_from_cashflow=obj_in.exclude_from_cashflow       
    )
    
    if obj_in.subcategory_id is None:
        db_obj.subcategory_id = get_default_uncategorized_subcategory_id(db)
    else:
        if not db.query(SubCategory).filter(SubCategory.id == obj_in.subcategory_id).first():
            print(f"WARNING: Provided subcategory_id {obj_in.subcategory_id} not found. Defaulting to Uncategorized.")
            db_obj.subcategory_id = get_default_uncategorized_subcategory_id(db)
        else:
            db_obj.subcategory_id = obj_in.subcategory_id
    
    
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def update_transaction(
    db: Session,
    *,
    db_obj: Transaction,  
    obj_in: TransactionUpdate
) -> Transaction:
    """
    Update an existing transaction.

    Args:
        db: The database session.
        db_obj: The current transaction object to be updated.
        obj_in: A Pydantic model containing the fields to update.

    Returns:
        The updated transaction object.
    """

    update_data = obj_in.model_dump(exclude_unset=True)

    for field, value in update_data.items():
        setattr(db_obj, field, value)

    db.add(db_obj) 
    db.commit() 
    db.refresh(db_obj)
    
    return get_transaction_by_hash(db, hash_str=db_obj.unique_hash, include_relations=True)

def update_transaction_message_id(db: Session, *, transaction_obj: Transaction, message_id: int) -> Transaction:
    """Updates only the telegram_message_id of a transaction."""
    transaction_obj.telegram_message_id = message_id
    db.add(transaction_obj)
    db.commit()
    db.refresh(transaction_obj)
    return transaction_obj

def _get_transaction_query(db: Session, include_relations: bool = True):
    query = db.query(Transaction)
    if include_relations:
        query = query.options(
            selectinload(Transaction.account), 
            selectinload(Transaction.subcategory).selectinload(SubCategory.parent_category)
        )
    return query

 
def get_transaction(db: Session, id: int, include_relations: bool = True) -> Transaction | None:
    return _get_transaction_query(db, include_relations).filter(Transaction.id == id).first()

def get_transactions(db: Session, skip: int = 0, limit: int = 100, include_relations: bool = True) -> list[Transaction]:
    return _get_transaction_query(db, include_relations)\
        .order_by(Transaction.received_at.desc())\
        .offset(skip)\
        .limit(limit)\
        .all()

def get_transaction_by_hash(db: Session, *, hash_str: str, include_relations: bool = True) -> Transaction | None:
    return _get_transaction_query(db, include_relations).filter(Transaction.unique_hash == hash_str).first()



```

`sms_finance_tracker/app/db/base_class.py`:

```py
from sqlalchemy.orm import as_declarative, declared_attr

@as_declarative()
class Base:
    id: any
    __name__: str
    @declared_attr
    def __tablename__(cls) -> str:
        return cls.__name__.lower() + "s"
```

`sms_finance_tracker/app/db/session.py`:

```py
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

engine = create_engine(
    settings.SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

`sms_finance_tracker/app/main.py`:

```py
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from app.core.config import settings

# from app.db.session import engine
# from app.db.base_class import Base

from app.api.v1.endpoints import (
    transactions as transactions_v1,
    categories as categories_v1,
    accounts as accounts_v1,
    telegram_webhook as telegram_webhook_v1,
    budget as budget_v1_router
)

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION
)

app.include_router(
    transactions_v1.router, 
    prefix=f"{settings.API_V1_STR}/transactions", 
    tags=["transactions"]
)

app.include_router(
    categories_v1.router,
    prefix=f"{settings.API_V1_STR}/categories",
    tags=["Categories"]
)

app.include_router(
    accounts_v1.router,
    prefix=f"{settings.API_V1_STR}/accounts",
    tags=["Accounts"]
)

app.include_router(
    budget_v1_router.router,
    prefix=f"{settings.API_V1_STR}/budget",
    tags=["Budget Management"]
)


app.include_router(
    telegram_webhook_v1.router,
    prefix=f"{settings.API_V1_STR}/telegram",
    tags=["Telegram"],
)


if settings.BACKEND_CORS_ORIGINS:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

@app.get("/mini-app/{page_name}", response_class=HTMLResponse)
async def read_mini_app(request: Request, page_name: str):
    """
    Serves the HTML file for the Telegram Mini App.
    e.g., /mini-app/edit-transaction will serve templates/mini-app/edit-transaction.html
    """
    return templates.TemplateResponse(
        f"mini-app/{page_name}.html", {"request": request}
    )

@app.get("/")
async def root():
    return {"message": f"Welcome to {settings.PROJECT_NAME}!"}

# Optional: Add startup event to ensure DB tables are created if not using Alembic for local dev
# @app.on_event("startup")
# async def startup_event():
#      Base.metadata.create_all(bind=engine)
```

`sms_finance_tracker/app/models/__init__.py`:

```py
from .transaction import Transaction, TransactionStatus
from .category import Category
from .subcategory import SubCategory
from .account import Account, AccountType, AccountPurpose 
from .monthly_budget import MonthlyBudget

__all__ = [
    "Transaction",
    "TransactionStatus",
    "Category",
    "SubCategory",
    "Account",
    "AccountType",
    "AccountPurpose", 
    "MonthlyBudget", 
]
```

`sms_finance_tracker/app/models/account.py`:

```py
import enum
from sqlalchemy import Column, Integer, String, Enum as SQLAlchemyEnum, UniqueConstraint, Index
from sqlalchemy.orm import relationship

from app.db.base_class import Base

class AccountType(str, enum.Enum):
    SAVINGS_ACCOUNT = "savings_account"
    CREDIT_CARD = "credit_card"
    WALLET = "wallet"
    UNKNOWN = "unknown"
    
class AccountPurpose(str, enum.Enum):
    PERSONAL = "personal"
    BUSINESS = "business"

class Account(Base):
    __tablename__ = "accounts"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)

    account_type = Column(SQLAlchemyEnum(AccountType), nullable=False, default=AccountType.UNKNOWN)
    
    purpose = Column(SQLAlchemyEnum(AccountPurpose), nullable=False, default=AccountPurpose.PERSONAL, server_default=AccountPurpose.PERSONAL.value)    
    bank_name = Column(String(100), nullable=False, index=True)
    account_last4 = Column(String(4), nullable=False, index=True)


    transactions = relationship("Transaction", back_populates="account")


    __table_args__ = (
        UniqueConstraint('bank_name', 'account_last4', name='uq_bank_account_last4'),
        Index('ix_bank_account_last4_composite', 'bank_name', 'account_last4'),
    )

    def __repr__(self):
        return f"<Account(id={self.id}, name='{self.name}', purpose='{self.purpose}')>"
```

`sms_finance_tracker/app/models/category.py`:

```py
from sqlalchemy import Column, Integer, String, Text
from sqlalchemy.orm import relationship

from app.db.base_class import Base

class Category(Base):
    __tablename__ = "categories"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), unique=True, index=True, nullable=False)
    description = Column(Text, nullable=True)
    display_order = Column(Integer, nullable=False, default=0, server_default='0')
    subcategories = relationship("SubCategory", back_populates="parent_category", order_by="SubCategory.display_order")


    def __repr__(self):
        return f"<Category(id={self.id}, name={self.name}, description={self.description}, display_order={self.display_order})>"
```

`sms_finance_tracker/app/models/monthly_budget.py`:

```py
from sqlalchemy import Column, Integer, Float, UniqueConstraint
from app.db.base_class import Base

class MonthlyBudget(Base):
    __tablename__ = "monthly_budgets"

    id = Column(Integer, primary_key=True, index=True)
    year = Column(Integer, nullable=False)
    month = Column(Integer, nullable=False)
    budget_amount = Column(Float, nullable=False)

    __table_args__ = (UniqueConstraint('year', 'month', name='uq_year_month_budget'),)

    def __repr__(self):
        return f"<MonthlyBudget(id={self.id}, year={self.year}, month={self.month}, budget={self.budget_amount})>"
```

`sms_finance_tracker/app/models/subcategory.py`:

```py
from sqlalchemy import Column, Integer, String, ForeignKey, UniqueConstraint, Boolean
from sqlalchemy.orm import relationship

from app.db.base_class import Base

class SubCategory(Base):
    __tablename__ = "subcategories"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    
    icon_name = Column(String(100), nullable=True)
    display_order = Column(Integer, nullable=False, default=0, server_default='0')
    
    is_reimbursable = Column(Boolean, nullable=False, default=False, server_default='0')
    exclude_from_budget = Column(Boolean, nullable=False, default=False, server_default='0')
    
    parent_category_id = Column(Integer, ForeignKey("categories.id"), nullable=False, index=True)
    parent_category = relationship("Category", back_populates="subcategories") 
    transactions = relationship("Transaction", back_populates="subcategory")
    
    
    __table_args__ = (
        UniqueConstraint('name', 'parent_category_id', name='uq_subcategory_name_parent'),
    )

    def __repr__(self):
        return f"<SubCategory(id={self.id}, name='{self.name}', parent_id={self.parent_category_id})>"

```

`sms_finance_tracker/app/models/transaction.py`:

```py
from sqlalchemy import Column, Integer, String, Boolean, Float, DateTime, Text, Enum as SQLAlchemyEnum, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from enum import Enum

from app.db.base_class import Base


class TransactionStatus(str, Enum):
    PENDING_ACCOUNT_SELECTION = "pending_account_selection"
    PENDING_CATEGORIZATION = "pending_categorization" 
    PENDING_PROCESSING = "pending_processing" 
    
    PROCESSED = "processed"
    FAILED = "failed"
    CANCELLED = "cancelled"
    ERROR = "error"


class Transaction(Base):
    __tablename__ = "transactions"

    id = Column(Integer, primary_key=True, index=True)
    unique_hash = Column(String(64), unique=True, index=True, nullable=False)
    telegram_message_id = Column(Integer, nullable=True, index=True)
    
    linked_transaction_hash = Column(String(64), nullable=True, index=True)
    override_reimbursable = Column(Boolean, nullable=True, default=None)
    
    raw_sms_content = Column(Text, nullable=False)
    received_at = Column(DateTime(timezone=True), server_default=func.now())
    amount = Column(Float, nullable=True)
    currency = Column(String(10), nullable=True, default="INR")
    merchant_vpa = Column(String(255), nullable=True)
    transaction_datetime_from_sms = Column(DateTime(timezone=True), nullable=True)
    
    description = Column(Text, nullable=True)
    status = Column(SQLAlchemyEnum(TransactionStatus), nullable=False, default=TransactionStatus.PENDING_PROCESSING)

    subcategory_id = Column(Integer, ForeignKey("subcategories.id"), nullable=False)
    subcategory = relationship("SubCategory", back_populates="transactions")

    account_id = Column(Integer, ForeignKey("accounts.id"), nullable=False, index=True)
    account = relationship("Account", back_populates="transactions")
    
    def __repr__(self):
        return f"<Transaction(id={self.id}, amount={self.amount}, subcategory_id={self.subcategory_id}, account_id={self.account_id})>"
```

`sms_finance_tracker/app/schemas/account.py`:

```py
from pydantic import BaseModel, Field, constr, ConfigDict
from typing import List, Optional

from app.models import AccountType, AccountPurpose

# --- Base Schema ---
# Contains fields common to creating and reading an account.
class AccountBase(BaseModel):
    name: str = Field(..., min_length=2, max_length=100, json_schema_extra={"example": "HDFC Salary Account"})
    account_type: AccountType = Field(..., json_schema_extra={"example": AccountType.SAVINGS_ACCOUNT})
    bank_name: str = Field(..., max_length=100, json_schema_extra={"example": "HDFC Bank"})
    account_last4: constr(pattern=r'^\d{4}$') = Field(..., json_schema_extra={"example": "1234"})
    purpose: AccountPurpose = Field(default=AccountPurpose.PERSONAL, json_schema_extra={"example": AccountPurpose.PERSONAL})


# --- Schema for Creating an Account ---
# This is what the API will expect in the POST request body.
class AccountCreate(AccountBase):
    pass # No new fields for creation, it's the same as the base

# --- Schema for Updating an Account ---
# All fields are optional for partial updates (PATCH).
class AccountUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=2, max_length=100)
    account_type: Optional[AccountType] = None
    purpose: Optional[AccountPurpose] = None

# --- Schema for Reading/Returning an Account from DB ---
# This represents an account as it is stored in the database, including its ID.
class AccountInDBBase(AccountBase):
    id: int

    model_config = ConfigDict(from_attributes=True)

class Account(AccountInDBBase):
    pass # For now, same as AccountInDBBase

# --- Schema for a list of accounts ---
class AccountList(BaseModel):
    accounts: List[Account]
```

`sms_finance_tracker/app/schemas/budget.py`:

```py
from pydantic import BaseModel, Field, ConfigDict

class BudgetBase(BaseModel):
    year: int = Field(..., ge=2020, json_schema_extra={"example": 2024})
    month: int = Field(..., ge=1, le=12, json_schema_extra={"example": 6})
    budget_amount: float = Field(..., gt=0, json_schema_extra={"example": 15000.0})

class BudgetCreate(BudgetBase):
    pass

class BudgetUpdate(BaseModel):
    budget_amount: float = Field(..., gt=0, json_schema_extra={"example": 16000.0})

class BudgetInDB(BudgetBase):
    id: int
      
    model_config = ConfigDict(from_attributes=True)
    
```

`sms_finance_tracker/app/schemas/category.py`:

```py
from pydantic import BaseModel, Field, ConfigDict
from typing import List, Optional

# --- SubCategory Schemas ---
class SubCategoryBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=100)
    icon_name: Optional[str] = Field(None, max_length=100, json_schema_extra={"example": "fthr:coffee"})
    display_order: int = Field(0, json_schema_extra={"example": 0})
    is_reimbursable: bool = Field(default=False)
    exclude_from_budget: bool = Field(default=False)
    parent_category_id: int 
    
class SubCategoryCreate(SubCategoryBase):
    pass

class SubCategoryUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=100)
    icon_name: Optional[str] = Field(None, max_length=100)
    display_order: Optional[int] = None
    parent_category_id: Optional[int] = None
    is_reimbursable: Optional[bool] = None 
    exclude_from_budget: Optional[bool] = None
    
class SubCategoryInDB(SubCategoryBase):
    id: int

    model_config = ConfigDict(from_attributes=True)

# --- Category Schemas ---
class CategoryBase(BaseModel):
    name: str = Field(..., min_length=2, max_length=100, json_schema_extra={"example": "Food & Drinks"})
    description: Optional[str] = Field(None, max_length=255, json_schema_extra={"example": "Eating out, Swiggy, Zomato etc."})
    display_order: int = Field(0, json_schema_extra={"example": 0})

class CategoryCreate(CategoryBase):
    pass 

class CategoryUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=2, max_length=100)
    description: Optional[str] = Field(None, max_length=255)
    display_order: Optional[int] = None

class CategoryInDB(CategoryBase):
    id: int
    subcategories: List[SubCategoryInDB] = []

    model_config = ConfigDict(from_attributes=True)

class CategoryListWithSubcategories(BaseModel):
    categories: List[CategoryInDB]
```

`sms_finance_tracker/app/schemas/telegram.py`:

```py
from pydantic import BaseModel
from typing import Optional

# These models represent the nested structure of a Telegram callback query update.
# Currently only required fileds are defined.

class Chat(BaseModel):
    id: int

class Message(BaseModel):
    message_id: int
    chat: Chat

class CallbackQuery(BaseModel):
    id: str
    data: Optional[str] = None
    message: Optional[Message] = None

class TelegramUpdate(BaseModel):
    update_id: int
    callback_query: Optional[CallbackQuery] = None
```

`sms_finance_tracker/app/schemas/transaction.py`:

```py
from pydantic import BaseModel,Field, ConfigDict
from datetime import datetime
from typing import Optional
from app.models.transaction import TransactionStatus

class SMSRecieved(BaseModel):
    sms_content: str

class TransactionBase(BaseModel):
    amount: Optional[float] = None
    currency: Optional[str] = Field("INR", json_schema_extra={"example": "INR"})
    merchant_vpa: Optional[str] = None
    transaction_datetime_from_sms: Optional[datetime] = None
    description: Optional[str] = None
    raw_sms_content: str

    unique_hash: str
    linked_transaction_hash: Optional[str] = None
    override_reimbursable: Optional[bool] = None
    subcategory_id: Optional[int] = None 
    
    account_id: Optional[int] = None
    
    status: TransactionStatus = TransactionStatus.PENDING_PROCESSING
    
    model_config = ConfigDict(from_attributes=True)
    

class TransactionCreate(TransactionBase):
    pass

class TransactionUpdate(BaseModel):
    """
    Schema for updating an existing transaction. All fields are optional.
    This will be used in the PATCH request body.
    """
    account_id: Optional[int] = None
    subcategory_id: Optional[int] = None    
    description: Optional[str] = None
    status: Optional[str] = None
    linked_transaction_hash: Optional[str] = None
    override_reimbursable: Optional[bool] = None


class CategoryForTransaction(BaseModel):
    """A minimal Category schema for embedding in a Transaction response."""
    id: int
    name: str
    
    model_config = ConfigDict(from_attributes=True)
    
class SubCategoryForTransaction(BaseModel):
    id: int
    name: str
    icon_name: Optional[str] = None
    parent_category_id: int
    parent_category_name: str 

    model_config = ConfigDict(from_attributes=True)
        
class AccountForTransaction(BaseModel):
    """A minimal Account schema for embedding in a Transaction response."""
    id: int
    name: str
    account_type: str
    account_last4: str
    
    model_config = ConfigDict(from_attributes=True)

class TransactionInDB(TransactionBase):
    """
    The comprehensive schema for representing a transaction when returned from the API.
    Includes database-generated fields and nested objects for related models.
    """
    id: int
    unique_hash: str
    received_at: datetime
    status: str
    account: Optional[AccountForTransaction] = None
    subcategory: Optional[SubCategoryForTransaction] = None

    model_config = ConfigDict(from_attributes=True)
```

`sms_finance_tracker/app/services/budget_service.py`:

```py
from sqlalchemy.orm import Session
from sqlalchemy import func, or_, and_
from datetime import datetime, timedelta
from app.models import Transaction, SubCategory, Account, AccountPurpose
from app.crud import crud_budget

def get_current_budget_period() -> tuple[datetime, datetime]:
    """
    Determines the start and end dates for the current budget period.
    TODO: For now, this is fixed to the calendar month. Make this configurable later.
    """
    today = datetime.now()
    start_of_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    next_month = (today.replace(day=28) + timedelta(days=4)).replace(day=1)
    end_of_month = next_month - timedelta(microseconds=1)
    
    return start_of_month, end_of_month

def get_current_month_spending(db: Session) -> float:
    """
    Calculates total spending for the current budget period, respecting all the new rules.
    """
    start_date, end_date = get_current_budget_period()

    # Conditions for a transaction to be INCLUDED in spending:
    # 1. override_reimbursable is explicitly False OR
    # 2. override_reimbursable is None AND subcategory.is_reimbursable is False
    # This is equivalent to: NOT ( (override_reimbursable is True) OR (override_reimbursable is None AND subcategory.is_reimbursable is True) )

    condition_is_spending = or_(
        Transaction.override_reimbursable.is_(False),
        and_(
            Transaction.override_reimbursable.is_(None),
            SubCategory.is_reimbursable.is_(False)
        )
    )

    total_spent = db.query(func.sum(Transaction.amount)).join(
        Transaction.subcategory
    ).join(
        Transaction.account  
    ).filter(
        Transaction.transaction_datetime_from_sms.between(start_date, end_date),
        Account.purpose == AccountPurpose.PERSONAL,                     
        SubCategory.exclude_from_budget.is_(False), 
        Transaction.linked_transaction_hash.is_(None),    
        condition_is_spending                    
    ).scalar()

    return total_spent or 0.0

def get_remaining_spend_power(db: Session) -> dict | None:
    """
    The main service function to get the full budget picture for the current period.
    """
    today = datetime.now()
    budget_obj = crud_budget.get_budget(db, year=today.year, month=today.month)
    
    if not budget_obj:
        return None 

    total_spent = get_current_month_spending(db)
    
    remaining = budget_obj.budget_amount - total_spent
    
    return {
        "budget": budget_obj.budget_amount,
        "spent": total_spent,
        "remaining": remaining,
    }
```

`sms_finance_tracker/app/services/parser_engine.py`:

```py
from typing import Dict, Optional, Any, List

from sqlalchemy.orm import Session

from app.crud import crud_account
from app.schemas.account import AccountCreate
from app.models.account import AccountType

from .parsers.base_parser import BaseParser
from .parsers.hdfc_parser import HDFCParser
from .parsers.federal_parser import FederalBankParser
from .parsers.amex_parser import AmexParser
from .parsers.sbi_parser import SBIParser
from .parsers.icici_parser import ICICIBankParser
from .parsers.idfc_parser import IDFCFirstBankParser

from app.core.hashing import generate_transaction_hash

class ParserEngine:
    def __init__(self, db_session: Session):
        """
        The engine is initialized with a database session to be able to resolve accounts.
        """
        self.db: Session = db_session
        
        self.parsers: List[BaseParser] = [
            HDFCParser(),
            FederalBankParser(),
            AmexParser(),
            SBIParser(),
            ICICIBankParser(),
            IDFCFirstBankParser(),
        ]
        self._credit_keywords = ["credited to", "credited to your a/c", "credited to acct", "received", "deposited"]
        self._debit_keywords = ["debited", "spent", "sent from", "debited"]
        
    def _get_flow_type(self, sms_text: str) -> Optional[str]:
        """Determines if the SMS is a credit, debit, or unknown transaction."""
        sms_lower = sms_text.lower()
        if any(keyword in sms_lower for keyword in self._credit_keywords):
            return "CREDIT"
        if any(keyword in sms_lower for keyword in self._debit_keywords):
            return "DEBIT"
        return None

    def _resolve_account_id(self, parsed_data: Dict[str, Any]) -> Optional[int]:
        """
        Takes parsed data and finds or creates an account, returning the account_id.
        Returns None if the account is ambiguous (e.g., last4 is None).
        """
        bank_name = parsed_data.get("bank_name")
        account_last4 = parsed_data.get("account_last4")
        
        if not account_last4:
            print(f"DEBUG: Ambiguous account for {bank_name}. Requires user selection.")
            return None

        account = crud_account.get_account_by_identifier(
            self.db, bank_name=bank_name, account_last4=account_last4
        )

        if account:
            print(f"DEBUG: Found existing account: ID {account.id} ({account.name})")
            return account.id

        print(f"DEBUG: No existing account found for {bank_name} ending in {account_last4}. Creating placeholder.")
        placeholder_name = f"New Account - {bank_name} {account_last4}"
        
        account_in = AccountCreate(
            name=placeholder_name,
            account_type=AccountType.UNKNOWN,
            bank_name=bank_name,
            account_last4=account_last4
        )
        new_account = crud_account.create_account(self.db, obj_in=account_in)
        print(f"DEBUG: Created placeholder account: ID {new_account.id} ({new_account.name})")
        # Code to trigger a notification to the user here in the future TODO Telegram Bot/UI
        
        return new_account.id


    def run(self, sms_text: str) -> Optional[Dict[str, Any]]:
        """
        The main public method to run the full parsing and account resolution pipeline.
        
        Returns a dictionary ready for transaction creation, or None if the SMS should be ignored.
        The dictionary will include 'account_id' if an account could be resolved.
        """
        flow_type = self._get_flow_type(sms_text)
        
        if not flow_type:
            print(f"DEBUG: Could not determine flow type (credit/debit). Ignoring SMS: {sms_text[:70]}...")
            return None
        
        if flow_type == "CREDIT":
            print(f"DEBUG: Ignoring credit transaction for now: {sms_text[:70]}...")
            return None

        parsed_data: Optional[Dict[str, Any]] = None
        for parser in self.parsers:
            if (result := parser.parse(sms_text)):
                parsed_data = result
                print(f"DEBUG: SMS structure parsed by {parser.__class__.__name__}")
                break
        
        if not parsed_data:
            print(f"DEBUG: No parser matched for spend SMS: {sms_text[:70]}...")
            return None
        
        original_bank_name = parsed_data.get("bank_name")

        account_id = self._resolve_account_id(parsed_data)
        parsed_data["account_id"] = account_id
        
        if not account_id:
            parsed_data["bank_name"] = original_bank_name
            
        unique_hash = generate_transaction_hash(parsed_data)
        if not unique_hash:
            print("ERROR: Could not generate a stable hash, ignoring transaction.", parsed_data)
            return None
        
        parsed_data["unique_hash"] = unique_hash
        parsed_data.setdefault("currency", "INR")
        
        parsed_data["account_id"] = account_id
        parsed_data["flow_type"] = flow_type
        
        parsed_data.pop("bank_name", None)
        parsed_data.pop("account_last4", None)

        return parsed_data
```

`sms_finance_tracker/app/services/parsers/amex_parser.py`:

```py
from typing import Dict, Optional, Any
import re
from .base_parser import BaseParser

class AmexParser(BaseParser):
    """Parses SMS from AMEX."""
    bank_name = "AMEX"

    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:
        pattern = re.compile(r"Alert:\s*You've spent (?P<currency_symbol>\$|INR)\s*(?P<amount>[\d,]+\.?\d*)\s*on your AMEX card\s+\*\*\s*(?P<card_last4>\d{4,5})\s*at\s*(?P<merchant>.+?)\s*on\s*(?P<date>\d{1,2}\s+\w+\s+\d{4})\s*at\s*(?P<time>\d{2}:\d{2}\s+(?:AM|PM))")
        
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(f"{data['date']} {data['time']}", ["%d %B %Y %I:%M %p"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['card_last4'][-4:], 
                "amount": float(data["amount"].replace(",", "")),
                "currency": "USD" if data["currency_symbol"] == "$" else "INR",
                "merchant_vpa": data["merchant"].strip(),
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"Spent at {data['merchant'].strip()}",
            }
        return None

```

`sms_finance_tracker/app/services/parsers/base_parser.py`:

```py
from typing import Dict, Optional, Any, List
from datetime import datetime
from abc import ABC, abstractmethod

class BaseParser(ABC):
    """
    Abstract Base Class for all bank/service parsers.
    Each subclass is responsible for parsing SMS messages from a specific source.
    """
    @abstractmethod
    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:
        """
        If the parser can handle the SMS, it returns a dict of parsed data.
        The dictionary must include 'bank_name' and 'account_last4'.
        Otherwise, it returns None.
        """
        raise NotImplementedError

    def _parse_date(self, date_str: str, formats: List[str]) -> Optional[datetime]:
        """
        A reusable helper method to parse date strings.
        It's placed in the BaseParser so all subclasses can use it.
        """
        for fmt in formats:
            try:
                dt_obj = datetime.strptime(date_str, fmt)
                if '%y' in fmt and dt_obj.year < 2000:
                    dt_obj = dt_obj.replace(year=dt_obj.year + 2000)
                if any(f in fmt for f in ["%d-%m", "%d/%m"]) and dt_obj.year == 1900:
                    dt_obj = dt_obj.replace(year=datetime.now().year)
                return dt_obj
            except ValueError as e:
                print(e)
                continue
            
        return None

```

`sms_finance_tracker/app/services/parsers/federal_parser.py`:

```py
from typing import Dict, Optional, Any
import re
from .base_parser import BaseParser

class FederalBankParser(BaseParser):
    """Parses SMS from Federal Bank (for UPI and Netbanking)."""
    bank_name = "Federal Bank"

    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:
        parsers = [self._parse_netbanking, self._parse_upi]
        for parser_func in parsers:
            if (result := parser_func(sms_text)):
                return result
        return None

    def _parse_upi(self, sms_text: str) -> Optional[Dict[str, Any]]:
        """Parses UPI transactions which DO NOT include the account number."""
        if self.bank_name not in sms_text:
            return None
        
        pattern = re.compile(r"Rs\s*(?P<amount>[\d,]+\.?\d*)\s*debited via UPI on\s*(?P<date>\d{2}-\d{2}-\d{4})\s*(?P<time>\d{2}:\d{2}:\d{2})\s*to VPA\s*(?P<vpa>[^.]+?)\.Ref No")

        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(f"{data['date']} {data['time']}", ["%d-%m-%Y %H:%M:%S"])
            return {
                "bank_name": self.bank_name,
                "account_last4": "0000", 
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": data["vpa"],
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"UPI to {data['vpa']}",
            }
        return None

    def _parse_netbanking(self, sms_text: str) -> Optional[Dict[str, Any]]:
        """Parses FEDNET transactions which include the account number."""
        pattern = re.compile(r"Rs\.(?P<amount>[\d,]+\.?\d*)\s*debited from your A/c XX(?P<account_last4>\d{4})\s*on\s*(?P<date>\d{2}\w{3}\d{4})\s*(?P<time>\d{2}:\d{2}:\d{2})")
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(f"{data['date']} {data['time']}", ["%d%b%Y %H:%M:%S"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['account_last4'],
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": "FEDNET Transaction",
                "transaction_datetime_from_sms": parsed_datetime,
                "description": "FEDNET Net Banking Debit",
            }
        return None

```

`sms_finance_tracker/app/services/parsers/hdfc_parser.py`:

```py
from typing import Dict, Optional, Any
import re
from .base_parser import BaseParser

class HDFCParser(BaseParser):
    """Parses SMS from HDFC Bank (for Cards and UPI)."""
    bank_name = "HDFC Bank"

    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:
        parsers = [self._parse_card, self._parse_upi]
        for parser_func in parsers:
            if (result := parser_func(sms_text)):
                return result
        return None

    def _parse_card(self, sms_text: str) -> Optional[Dict[str, Any]]:
        pattern = re.compile(r"Spent Rs\.(?P<amount>[\d,]+\.?\d*)\s*On HDFC Bank Card (?P<card_last4>\d{4})\s*At\s*(?P<merchant>.+?)\s*On\s*(?P<date>\d{4}-\d{2}-\d{2}):(?P<time>\d{2}:\d{2}:\d{2})")
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(f"{data['date']} {data['time']}", ["%Y-%m-%d %H:%M:%S"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['card_last4'],
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": data["merchant"].strip(),
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"Spent at {data['merchant'].strip()}",
            }
        return None

    def _parse_upi(self, sms_text: str) -> Optional[Dict[str, Any]]:
        pattern = re.compile(r"Amt Sent Rs\.(?P<amount>[\d,]+\.?\d*)\s*\nFrom HDFC Bank A/C \*(?P<account_last4>\d{4})\s*\nTo (?P<recipient>.+?)\s*\nOn (?P<date>\d{2}-\d{2})")
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(data["date"], ["%d-%m"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['account_last4'],
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": data["recipient"].strip(),
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"UPI to {data['recipient'].strip()}",
            }
        return None

```

`sms_finance_tracker/app/services/parsers/icici_parser.py`:

```py
from typing import Dict, Optional, Any
import re
from .base_parser import BaseParser

class ICICIBankParser(BaseParser):
    bank_name = "ICICI Bank"
    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:

        parsers = [self._parse_card]
        for parser_func in parsers:
            if (result := parser_func(sms_text)):
                return result
        return None

    def _parse_card(self, sms_text: str) -> Optional[Dict[str, Any]]:
        pattern = re.compile(
        r"(?P<currency_symbol>INR|Rs)\s*(?P<amount>[\d,]+\.?\d*)\s*spent (?:on|using) ICICI Bank Card (?:XX|\*\*)(?P<card_last4>\d{4})\s*on\s*(?P<date>\d{1,2}-\w{3}-\d{2})\s*(?:on|at)\s*(?P<merchant>[^.]+?)\."
    )
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(f"{data['date']}", ["%d-%b-%y", "%d-%B-%y"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['card_last4'],
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": data["merchant"].strip(),
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"Spent at {data['merchant'].strip()}",
            }
        return None 
```

`sms_finance_tracker/app/services/parsers/idfc_parser.py`:

```py
from typing import Dict, Optional, Any
import re
from .base_parser import BaseParser

class IDFCFirstBankParser(BaseParser):
    bank_name = "IDFC FIRST Bank"
    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:

        parsers = [self._parse_card]
        for parser_func in parsers:
            if (result := parser_func(sms_text)):
                return result
        return None

    def _parse_card(self, sms_text: str) -> Optional[Dict[str, Any]]:
        pattern = re.compile(r"INR\s*(?P<amount>[\d,]+\.?\d*)\s*spent on your IDFC FIRST Bank Credit Card ending (?:XX|\*\*)(?P<card_last4>\d{4})\s*at\s*(?P<merchant>.+?)\s*on\s*(?P<date>\d{2}\s+\w{3}\s+\d{4})\s*at\s*(?P<time>\d{2}:\d{2}\s+(?:AM|PM))")
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(f"{data['date']} {data['time']}", ["%d %b %Y %I:%M %p"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['card_last4'],
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": data["merchant"].strip(),
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"Spent at {data['merchant'].strip()}",
            }
        return None 
```

`sms_finance_tracker/app/services/parsers/sbi_parser.py`:

```py
from typing import Dict, Optional, Any
import re
from .base_parser import BaseParser

class SBIParser(BaseParser):
    """Parses SMS from SBI."""
    bank_name = "SBI"

    def parse(self, sms_text: str) -> Optional[Dict[str, Any]]:
        # This one parser can handle both card and potentially other SBI messages if patterns are added.
        return self._parse_credit_card(sms_text)

    def _parse_credit_card(self, sms_text: str) -> Optional[Dict[str, Any]]:
        pattern = re.compile(r"Rs\.(?P<amount>[\d,]+\.?\d*)\s*spent on your SBI Credit Card ending (?P<card_last4>\d{4})\s*at\s*(?P<merchant>.+?)\s*on\s*(?P<date>\d{2}/\d{2}/\d{2})")
        if (match := pattern.search(sms_text)):
            data = match.groupdict()
            parsed_datetime = self._parse_date(data["date"], ["%d/%m/%y"])
            return {
                "bank_name": self.bank_name,
                "account_last4": data['card_last4'],
                "amount": float(data["amount"].replace(",", "")),
                "merchant_vpa": data["merchant"].strip(),
                "transaction_datetime_from_sms": parsed_datetime,
                "description": f"Spent at {data['merchant'].strip()}",
            }
        return None

```

`sms_finance_tracker/app/services/rule_engine.py`:

```py
from typing import Dict, Any, Optional
from sqlalchemy.orm import Session
# from app.crud import crud_subcategory

# Define rules as a list of functions. This is easily extendable.
# Each rule function takes the parsed data and returns a subcategory_id if it matches, else None.

def rule_self_transfer(parsed_data: Dict[str, Any], db: Session) -> Optional[int]:
    # This is a placeholder. A real implementation would check against a list of the user's own VPAs/accounts.
    # For now, replying on the user to categorize this manually.
    return None

def rule_cred_cc_payment(parsed_data: Dict[str, Any], db: Session) -> Optional[int]:
    merchant = parsed_data.get("merchant_vpa", "").lower()
    if "cred.cc.payment" in merchant:
        # Find the subcategory for "Credit Card Payment"
        # This requires a way to reliably get a specific subcategory. Let's assume we have a helper for that.
        # subcat = crud_subcategory.get_subcategory_by_name_and_parent(db, name="Credit card", parent_name="Credit Bill")
        # if subcat: return subcat.id
        # For now, let's assume we know its ID from the seed data.
        return 1036
    return None

RULES = [
    rule_cred_cc_payment,
    rule_self_transfer,
]

class RuleEngine:
    def __init__(self, db_session: Session):
        self.db = db_session

    def run(self, parsed_data: Dict[str, Any]) -> Optional[int]:
        """
        Runs all rules against the parsed transaction data.
        Returns the ID of the first matching subcategory.
        """
        for rule_func in RULES:
            subcategory_id = rule_func(parsed_data, self.db)
            if subcategory_id:
                print(f"DEBUG: Rule '{rule_func.__name__}' matched. Setting subcategory to {subcategory_id}.")
                return subcategory_id
        return None
```

`sms_finance_tracker/app/services/telegram_notifier.py`:

```py
import httpx
from typing import Optional
from sqlalchemy.orm import Session
import enum

from app.core.config import settings
from app.core.security import create_mini_app_access_token 
from app.schemas.transaction import TransactionInDB
from app.models.transaction import TransactionStatus
from app.crud import crud_account

from app.services.budget_service import get_remaining_spend_power


API_BASE_URL = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}"

class TransactionType(str, enum.Enum):
    NEW = "New Transaction Captured"
    UPDATED = "Transaction UPDATED"

async def send_message(text: str, reply_markup: Optional[dict] = None) -> Optional[int]:
    """A simple async function to send a message using httpx."""
    if not settings.TELEGRAM_BOT_TOKEN or not settings.TELEGRAM_CHAT_ID:
        print("WARN: Telegram credentials not set. Skipping notification.")
        return

    async with httpx.AsyncClient() as client:
        payload = {
            "chat_id": settings.TELEGRAM_CHAT_ID,
            "text": text,
            "parse_mode": "MarkdownV2",
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
            
        try:
            response = await client.post(f"{API_BASE_URL}/sendMessage", json=payload)
            response.raise_for_status()
            response_data = response.json()
            if response_data.get("ok"):
                return response_data["result"]["message_id"]
            
        except httpx.HTTPStatusError as e:
            print(f"ERROR sending Telegram message: {e.response.text}")
        except Exception as e:
            print(f"ERROR during Telegram notification: {e}")
            
        return None

def _format_transaction_message(transaction: TransactionInDB, type_str: TransactionType, db: Session) -> str:
    """Formats a transaction object into a nice string for Telegram."""
    def escape_md(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        return "".join(f"\\{char}" if char in escape_chars else char for char in str(text))

    amount_str = escape_md(f"{transaction.amount:.2f} {transaction.currency}")
    merchant = escape_md(transaction.merchant_vpa or "Unknown Merchant")
    
    budget_line = ""
    summary = get_remaining_spend_power(db) 
    if summary:
        remaining_str = escape_md(f"₹{summary['remaining']:,.0f}")
        budget_str = escape_md(f"₹{summary['budget']:,.0f}")
        
        percentage = 0
        if summary['budget'] > 0:
            percentage = (summary['spent'] / summary['budget']) * 100
        
        progress_blocks = int(percentage / 10)
        progress_bar = ("█" * progress_blocks) + ("░" * (10 - progress_blocks))

        budget_line = (
            f"\n\n*💰 Spend Power*:\n"
            f"`{remaining_str} / {budget_str} Left`\n"
            f"`[{progress_bar}] {percentage:.0f}% Used`"
        )
    
    account_name = "⚠️ *Not Set*"
    if transaction.account:
        account_name = escape_md(transaction.account.name)

    subcategory_display_name  = "⚠️ *Not Set*"
    if transaction.subcategory:
        parent_name = transaction.subcategory.parent_category.name if transaction.subcategory.parent_category else ""
        subcategory_display_name = escape_md(
            f"{transaction.subcategory.name} ({parent_name})" if parent_name else transaction.subcategory.name
        )

    status_emoji_map = { 
        TransactionStatus.PROCESSED: "✅",
        TransactionStatus.PENDING_CATEGORIZATION: "🏷️",
        TransactionStatus.PENDING_ACCOUNT_SELECTION: "🏦",
        TransactionStatus.PENDING_PROCESSING:"🚧",
        TransactionStatus.ERROR: "❌",
        TransactionStatus.FAILED: "💀",
        TransactionStatus.CANCELLED: "🚫"
    }
    status_emoji = status_emoji_map.get(transaction.status, "⚙️") 
    status_text = escape_md(transaction.status.value.replace('_', ' ').title()) 
    
    description_text = escape_md(transaction.description or "_No description_")
    
    message = (
            f"*{status_emoji} {escape_md(type_str.value)}*\n\n" 
            f"*Amount*: `{amount_str}`\n"
            f"*Merchant*: {merchant}\n"
            f"*Account*: {account_name}\n"
            f"*Category*: {subcategory_display_name}\n" 
            f"*Description*: {description_text}\n"
            f"*Status*: {status_text}"
            f"{budget_line}" 
        )
    return message

def _build_inline_keyboard(transaction: TransactionInDB, db: Session) -> Optional[dict]:
    """Builds an interactive keyboard based on the transaction's status."""
    buttons = []
    mini_app_access_token = create_mini_app_access_token(transaction_hash=transaction.unique_hash)
    mini_app_url = f"{settings.MINI_APP_BASE_URL}/edit-transaction?token={mini_app_access_token}"
    
    if transaction.status == TransactionStatus.PROCESSED:
        buttons.append([{"text": "✏️ Edit Details (App)", "web_app": {"url": mini_app_url}}])
    
    elif transaction.status == TransactionStatus.PENDING_PROCESSING:
        buttons.append([{"text": "🏦 Select Account", "callback_data": f"sel_mod:{transaction.unique_hash}:{TransactionStatus.PENDING_ACCOUNT_SELECTION.value}"}])
        buttons.append([{"text": "🏷️ Select Category (App)", "web_app": {"url": mini_app_url}}])

    elif transaction.status == TransactionStatus.PENDING_ACCOUNT_SELECTION:
        accounts = crud_account.get_accounts(db, limit=5)
        for acc in accounts:
            buttons.append([{"text": f"{acc.name}", "callback_data": f"set_acc:{transaction.unique_hash}:{acc.id}"}])
        if len(accounts) >= 5: 
             buttons.append([{"text": "🏦 More Accounts (App)", "web_app": {"url": mini_app_url}}])

    elif transaction.status == TransactionStatus.PENDING_CATEGORIZATION:
        buttons.append([{"text": "🏷️ Select Category (App)", "web_app": {"url": mini_app_url}}])
        
    if transaction.status != TransactionStatus.PROCESSED:
        found_edit_button = any("Edit Details (App)" in row[0]["text"] for row in buttons if row)
        if not found_edit_button:
             buttons.append([{"text": "📲 Open in App", "web_app": {"url": mini_app_url}}])


    return {"inline_keyboard": buttons} if buttons else None 

async def send_new_transaction_notification(transaction: TransactionInDB, db: Session):
    """The main function to call from an endpoint."""
    message_text = _format_transaction_message(transaction, TransactionType.NEW, db)
    keyboard = _build_inline_keyboard(transaction, db)
    return await send_message(text=message_text, reply_markup=keyboard)

async def send_update_notification(transaction: TransactionInDB, db: Session):
    """Sends a simpler notification when a transaction is updated."""
    message_text = _format_transaction_message(transaction, TransactionType.UPDATED)
    keyboard = _build_inline_keyboard(transaction, db)
    await send_message(text=message_text, reply_markup=keyboard)
    
async def edit_message_after_update(transaction: TransactionInDB, chat_id: int, message_id: int, db: Session):
    """Edits an existing Telegram message to reflect the updated transaction state."""
    new_text = _format_transaction_message(transaction, TransactionType.UPDATED, db)
    keyboard = _build_inline_keyboard(transaction, db)
    async with httpx.AsyncClient() as client:
        payload = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": new_text,
            "parse_mode": "MarkdownV2",
            "reply_markup": keyboard
        }
        try:
            await client.post(f"{API_BASE_URL}/editMessageText", json=payload)
        except httpx.HTTPStatusError as e:
            print(f"INFO: Could not edit Telegram message (this is often okay): {e.response.text}")
```

`sms_finance_tracker/app/services/transaction_status_manager.py`:

```py
from typing import Dict, Any, Optional

from app.models.account import AccountType
from app.crud import crud_account 
from app.models.transaction import TransactionStatus, Transaction 
from app.models.subcategory import SubCategory 


class TransactionStatusManager:
    """Manages transaction status transitions based on account and subcategory validation"""
    
    @staticmethod
    def is_account_valid(db, account_id: Optional[int]) -> bool:
        if account_id is None:
            return False
        try:
            account = crud_account.get_account(db=db, account_id=account_id)
            return account is not None and account.account_type != AccountType.UNKNOWN
        except Exception:
            return False
    
    @staticmethod
    def is_subcategory_valid(db, subcategory_id: Optional[int]) -> bool:
        """Check if provided subcategory_id is valid and not 'Uncategorized'."""
        if subcategory_id is None:
            return False
        
        try:
            subcategory = db.query(SubCategory).filter(SubCategory.id == subcategory_id).first()
            
            if subcategory and subcategory.name.lower() != "uncategorized":
                 return True
            return False
        except Exception:
            return False
        
    @staticmethod
    def determine_initial_status(db, creation_data: Dict[str, Any]) -> TransactionStatus:
        account_id = creation_data.get("account_id")
        has_valid_account = TransactionStatusManager.is_account_valid(account_id=account_id, db=db)
        

        subcategory_id_from_creation = creation_data.get("subcategory_id")
        has_meaningful_category = TransactionStatusManager.is_subcategory_valid(
            subcategory_id=subcategory_id_from_creation, db=db
        )

        if has_valid_account and has_meaningful_category:
            return TransactionStatus.PROCESSED
        elif has_valid_account and not has_meaningful_category: 
            return TransactionStatus.PENDING_CATEGORIZATION
        elif not has_valid_account and has_meaningful_category:
            return TransactionStatus.PENDING_ACCOUNT_SELECTION
        else:
            return TransactionStatus.PENDING_PROCESSING 
    
    @staticmethod
    def determine_status_for_update(transaction: Transaction, db, update_data: Dict[str, Any]) -> TransactionStatus:
        current_account_id = transaction.account_id
        current_subcategory_id = transaction.subcategory_id

        if "account_id" in update_data:
            current_account_id = update_data["account_id"]
        
        if "subcategory_id" in update_data:
            current_subcategory_id = update_data["subcategory_id"]
            
        has_valid_account = TransactionStatusManager.is_account_valid(account_id=current_account_id, db=db)
        has_meaningful_category = TransactionStatusManager.is_subcategory_valid(subcategory_id=current_subcategory_id, db=db)
        
        if has_valid_account and has_meaningful_category:
            return TransactionStatus.PROCESSED
        elif has_valid_account and not has_meaningful_category:
            return TransactionStatus.PENDING_CATEGORIZATION
        elif not has_valid_account and has_meaningful_category:
            return TransactionStatus.PENDING_ACCOUNT_SELECTION
        else:
            return TransactionStatus.PENDING_PROCESSING 
```

`sms_finance_tracker/static/css/mini-app.css`:

```css
* {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background-color: #f8f9fa; /* Off-white background */
            color: #1a1a1a; /* Default dark text */
            padding: 16px;
            padding-bottom: 100px; /* Space for Telegram MainButton */
            min-height: 100vh;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            gap: 16px; /* Spacing between cards, Fold uses ~16px or sometimes 12px */
        }

        .card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.05), 0 3px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(0, 0, 0, 0.06); /* Subtle border */
        }

        /* Main transaction card */
        .main-card {
            text-align: center;
            padding: 24px 20px;
            position: relative;
        }

        /* REMOVED .bookmark-icon */

        .amount {
            font-size: 48px;
            font-weight: 700; /* Bold amount */
            color: #1a1a1a;
            margin: 16px 0;
            line-height: 1;
        }

        .category-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: #f3f4f6; /* Light grey badge background */
            padding: 8px 16px;
            border-radius: 20px; /* Pill shape */
            font-size: 14px;
            font-weight: 500;
            color: #374151; /* Darker grey text */
            margin-top: 12px;
            cursor: pointer;
        }

        .category-badge i {
            width: 16px;
            height: 16px;
        }

        /* Info cards (FROM / ON) */
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1px; /* Creates the separator line */
            background: #e5e7eb; /* Separator color */
            border-radius: 16px;
            overflow: hidden; /* To clip children to border-radius */
            border: 1px solid rgba(0, 0, 0, 0.06);
        }

        .info-item {
            background: white;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .info-label {
            font-size: 12px;
            font-weight: 500;
            color: #6b7280; /* Grey label */
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .info-value {
            font-size: 14px;
            font-weight: 600; /* Semi-bold value */
            color: #1a1a1a;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .account-icon { 
            height: 20px;
            background: #3b82f6; /* Blue background */
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: 600;
            padding: 5px;
        }

        /* Paid to section */
        .paid-to-card {
            padding: 16px 20px; /* Specific padding */
            cursor: pointer;
        }

        .paid-to-header {
            font-size: 12px;
            font-weight: 500;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 12px;
        }

        .paid-to-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .paid-to-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .merchant-icon {
            width: 32px;
            height: 32px;
            background: #f3f4f6; /* Light grey background for icon */
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6b7280; /* Icon color */
        }
        .merchant-icon i {
            width: 18px;
            height: 18px;
        }

        .merchant-name {
            font-size: 16px;
            font-weight: 600;
            color: #1a1a1a;
        }

        .chevron {
            width: 20px;
            height: 20px;
            color: #9ca3af; /* Chevron color */
        }

        /* Action items (Account in, More Details, etc.) */
        .actions-card {
            padding: 0;
            overflow: hidden; 
        }

        .action-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px 20px;
            cursor: pointer;
            transition: background-color 0.15s ease;
        }

        .action-item:hover {
            background-color: #f9fafb; 
        }

        .action-item:not(:last-child) {
            border-bottom: 1px solid #f3f4f6; 
        }

        .action-left {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .action-icon {
            width: 20px;
            height: 20px;
            color: #6b7280;
        }

        .action-text {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
        }

        .action-date {
            font-size: 14px;
            font-weight: 500;
            color: #374151; 
            margin-left: auto;
            padding-right: 8px;
        }
        
        .action-item.no-chevron .action-left {
            flex-grow: 1; 
        }


        /* Notes section */
        .notes-card {
            padding: 0; 
            overflow: hidden;
        }

        .notes-header {
            padding: 16px 20px;
            border-bottom: 1px solid #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .notes-title-text { 
            font-size: 16px;
            font-weight: 600;
            color: #1a1a1a;
        }

        .add-receipt-btn {
            font-size: 14px;
            font-weight: 600;
            color: #3b82f6; 
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
        }

        .notes-content {
            padding: 16px 20px;
        }

        .notes-textarea {
            width: 100%;
            min-height: 80px;
            border: none;
            outline: none;
            font-family: inherit;
            font-size: 15px;
            color: #374151; 
            resize: none;
            background: transparent;
        }

        .notes-textarea::placeholder {
            color: #9ca3af; 
        }

        /* Toggle switch (Exclude from Cash Flow) */
        .toggle-item-card { 
             padding: 0; 
        }
        .toggle-item {
            display: flex;
            align-items: center; 
            justify-content: space-between;
            padding: 16px 20px;
        }

        .toggle-left {
            display: flex;
            align-items: flex-start; 
            gap: 12px;
            flex: 1; 
        }

        .toggle-icon {
            width: 20px;
            height: 20px;
            color: #6b7280;
            margin-top: 2px; 
        }

        .toggle-content {
            flex: 1;
        }

        .toggle-title {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
            margin-bottom: 4px;
        }

        .toggle-subtitle {
            font-size: 14px;
            color: #6b7280;
            line-height: 1.4;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 44px; 
            height: 24px; 
            flex-shrink: 0; 
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #e5e7eb; 
            transition: 0.2s;
            border-radius: 24px; 
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 20px; 
            width: 20px;  
            left: 2px;   
            bottom: 2px; 
            background-color: white;
            transition: 0.2s;
            border-radius: 50%; 
        }

        input:checked + .slider {
            background-color: #3b82f6; 
        }

        input:checked + .slider:before {
            transform: translateX(20px); 
        }

        /* Loading overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: none; 
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid #f3f4f6; 
            border-radius: 50%;
            border-top-color: #3b82f6; 
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Category modal */
        .category-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5); 
            display: none; 
            justify-content: center;
            align-items: flex-end; 
            z-index: 2000;
        }

        .category-content {
            background: white;
            width: 100%;
            max-width: 400px; 
            border-radius: 16px 16px 0 0; 
            max-height: 85vh; 
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .category-header {
            padding: 12px 20px; 
            border-bottom: 1px solid #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            background: white;
            z-index: 10;
        }

        .category-title {
            font-size: 18px;
            font-weight: 600;
            color: #1a1a1a;
            text-align: center;
            flex-grow: 1; 
        }

        .close-btn, .save-btn {
            font-size: 16px;
            font-weight: 600;
            color: #3b82f6; 
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px; 
        }
        .close-btn { font-size: 20px; line-height: 1; } 
        .save-btn { font-size: 22px; line-height: 1; } 


        .transaction-preview {
            padding: 16px 20px;
            border-bottom: 1px solid #f3f4f6;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .preview-left {
            display: flex;
            align-items: center;
            gap: 12px;
            width: 100%;
        }
        .preview-left .merchant-icon { 
            width: 28px; 
            height: 28px;
        }
        .preview-left .merchant-icon i {
             width: 16px; 
             height: 16px;
        }
        .preview-left .merchant-name { 
            font-size: 14px; 
            font-weight: 500;
        }

        .preview-right {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            gap: 8px;
        }
        
        .preview-amount {
            font-size: 18px; 
            font-weight: 700;
            color: #1a1a1a;
        }

        .preview-category-badge { 
            display: flex;
            align-items: center;
            gap: 6px;
            background: #f3f4f6;
            padding: 6px 10px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 500;
            color: #374151;
            flex-shrink: 0;
        }
        .preview-category-badge i { 
            width: 12px; 
            height: 12px; 
        }

        .preview-account-icon { 
            height: 18px; 
            font-size: 9px;
            padding: 5px;
            flex-shrink: 0;
            margin-left: auto;
        }


        .search-section {
            padding: 16px 20px;
            border-bottom: 1px solid #f3f4f6;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            font-size: 16px;
            outline: none;
        }
        .search-input::placeholder { color: #9ca3af; }

        .search-input:focus {
            border-color: #3b82f6; 
        }

        .categories-section {
            padding: 20px;
            flex-grow: 1; 
            overflow-y: auto;
        }

        .section-title {
            font-size: 14px;
            font-weight: 600;
            color: #6b7280; 
            margin-bottom: 16px;
        }

        .category-grid { /* For 'Most used' */
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); 
            gap: 12px;
            margin-bottom: 24px;
        }

        .category-chip {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 12px; 
            background: #f9fafb; 
            border: 1px solid #e5e7eb; 
            border-radius: 12px;
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            cursor: pointer;
            transition: all 0.15s ease;
        }
        .category-chip i { width: 16px; height: 16px; color: #6b7280; }

        .category-chip:hover,
        .category-chip.selected {
            background: #eff6ff; 
            border-color: #3b82f6; 
            color: #1d4ed8; 
        }
        .category-chip.selected i { color: #1d4ed8; }


        .category-list { /* For main list of categories */
            display: flex;
            flex-direction: column;
            gap: 24px; 
        }

        .category-group-title {
            font-size: 16px;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 4px; 
        }

        .category-group-subtitle {
            font-size: 12px; 
            color: #6b7280;
            margin-bottom: 12px;
        }

        .subcategory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr)); 
            gap: 12px;
        }

        .subcategory-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 6px;
            padding: 10px 6px; 
            border-radius: 12px;
            cursor: pointer;
            transition: background-color 0.15s ease;
            position: relative;
        }
         .subcategory-item.selected::after { 
            content: '';
            position: absolute;
            bottom: 4px;
            left: 50%;
            transform: translateX(-50%);
            width: 6px;
            height: 6px;
            background-color: #3b82f6;
            border-radius: 50%;
        }


        .subcategory-item:hover {
            background: #f9fafb; 
        }

        .subcategory-icon-wrapper { 
            width: 40px; 
            height: 40px;
            background: #f3f4f6; 
            border-radius: 12px; 
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6b7280;
            font-size: 20px; 
        }
        .subcategory-icon-wrapper i { width: 20px; height: 20px;}


        .subcategory-name {
            font-size: 12px;
            font-weight: 500;
            color: #374151;
            text-align: center;
            line-height: 1.2;
            width: 100%; 
        }

        .subcategory-icon-wrapper .emoji-icon,
        .preview-category-badge .emoji-icon, 
        .category-badge .emoji-icon {
            font-size: 1.2em; 
            line-height: 1;
            vertical-align: middle;
        }

        .subcategory-icon-wrapper img.custom-icon,
        .preview-category-badge img.custom-icon,
        .category-badge img.custom-icon{
            width: 20px; 
            height: 20px;
            vertical-align: middle;
        }

        /* Styling for the actual logo image inside the container */
.account-item-icon img.custom-icon {
    max-width: 100%;   
    max-height: 100%;  
    object-fit: contain; /* Safest for not cropping logos */
    display: block;
}
        .category-chip .emoji-icon {
            font-size: 1em; 
        }
        .category-chip img.custom-icon {
            width: 16px;
            height: 16px;
        }

        /* Details Modal Styles */
        .details-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2500;
            padding: 20px;
        }

        .details-modal-content {
            background: #ffffff;
            width: 100%;
            max-width: 340px;
            border-radius: 16px;
            max-height: 85vh;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .details-modal-header {
            padding: 16px 20px 12px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            background: #ffffff;
            z-index: 10;
            border-radius: 16px 16px 0 0;
        }

        .details-modal-title {
            font-size: 16px;
            font-weight: 600;
            color: #000000;
            text-align: center;
            flex-grow: 1;
            margin-left: 24px; /* Compensate for close button */
        }

        .details-close-btn {
            font-size: 18px;
            font-weight: 400;
            color: #999999;
            background: none;
            border: none;
            cursor: pointer;
            padding: 4px;
            line-height: 1;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: color 0.2s;
        }

        .details-close-btn:hover {
            color: #666666;
        }

        .details-modal-body {
            padding: 0 20px 20px 20px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
            padding-bottom: 12px;
        }

        .detail-item:last-child {
            padding-bottom: 0;
        }

        .detail-label {
            color: #999999;
            font-weight: 400;
            font-size: 13px;
            line-height: 1.2;
        }

        .detail-value {
            color: #000000;
            font-weight: 500;
            font-size: 15px;
            line-height: 1.3;
            word-break: break-word;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Special styling for amount */
        .detail-item:has(#details-amount) .detail-value {
            font-size: 18px;
            font-weight: 600;
        }

        .detail-item .copy-btn {
            background: none;
            border: none;
            padding: 2px;
            cursor: pointer;
            color: #cccccc;
            display: flex;
            align-items: center;
            transition: all 0.2s;
            flex-shrink: 0;
        }

        .detail-item .copy-btn:hover {
            color: #999999;
        }

        .detail-item .copy-btn svg {
            width: 14px;
            height: 14px;
            stroke-width: 2;
        }

        /* Mobile responsiveness */
        @media (max-width: 480px) {
            .details-modal {
                padding: 16px;
            }
            
            .details-modal-content {
                max-width: none;
                border-radius: 12px;
            }
            
            .details-modal-header {
                padding: 14px 16px 10px 16px;
                border-radius: 12px 12px 0 0;
            }
            
            .details-modal-body {
                padding: 0 16px 16px 16px;
                gap: 14px;
            }
            
            .detail-item {
                padding-bottom: 10px;
            }
        }

        /* Account Selection Modal Styles */
.account-select-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: flex-end; 
    z-index: 3000; /* Higher than other modals */
}

.account-select-modal-content {
    background: #f8f9fa; /* Light background for the sheet */
    width: 100%;
    max-width: 400px;
    border-radius: 16px 16px 0 0;
    max-height: 90vh; 
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
}

.account-select-modal-header {
    padding: 12px 20px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: sticky;
    top: 0;
    background: #f8f9fa; /* Match content background */
    z-index: 10;
}

.account-select-modal-title {
    font-size: 17px;
    font-weight: 600;
    color: #1a1a1a;
    text-align: center;
    flex-grow: 1;
}

.account-select-close-btn, .account-select-save-btn {
    font-size: 16px;
    font-weight: 600;
    color: #3b82f6; /* Blue, matching category modal */
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
}
.account-select-close-btn { font-size: 20px; line-height: 1; }
.account-select-save-btn { font-size: 22px; line-height: 1; }

#account-select-transaction-preview {
    background-color: white; 
    border-bottom: 1px solid #e5e7eb;
    padding: 16px 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    /* padding, etc., should be inherited from .transaction-preview */
}
#account-select-transaction-preview .merchant-icon { /* Ensure specific ID targeting if needed */
    width: 32px;
            height: 32px;
            background: #f3f4f6; /* Light grey background for icon */
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6b7280; /* Icon color */
}
/* ... other preview styles ... */


.account-select-modal-body {
    padding: 16px 20px 20px 20px;
    background-color: white; /* White background for the list area */
}

.account-select-prompt-title {
    font-size: 18px;
    font-weight: 600;
    color: #1a1a1a;
    text-align: center;
    margin-bottom: 8px;
}

.account-select-prompt-subtitle {
    font-size: 14px;
    color: #6b7280;
    text-align: center;
    line-height: 1.4;
    margin-bottom: 24px;
    max-width: 300px; /* Limit width for better readability */
    margin-left: auto;
    margin-right: auto;
}

#account-list-container {
    display: flex;
    flex-direction: column;
    gap: 16px; /* Space between account groups */
}


.account-group-title {
    font-size: 13px; /* Smaller title for account type groups */
    font-weight: 500;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 8px;
    padding-left: 4px; /* Slight indent */
}

.account-item {
    background-color: #f8f9fa; /* Slightly off-white for item background within white body */
    padding: 12px 16px;
    border-radius: 12px; /* Rounded corners for each item */
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.15s ease;
    border: 1px solid #e5e7eb;
    margin-bottom: 5px; /* Subtle border for each item */
}
.account-item:hover {
    background-color: #eff6ff; /* Light blue hover */
}
.account-item.selected {
    border-color: #3b82f6; /* Blue border for selected */
    background-color: #eff6ff;
}

.account-item-icon { 
    width: 40px;
    height: 40px;
    background: #fff;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    padding: 5px;
    box-sizing: border-box;
    border: 1px solid rgba(0, 0, 0, 0.08);
    box-shadow: 0 2px 4px rgba(0,0,0,0.07), inset 0 1px 1px rgba(255,255,255,0.5), inset 0 -1px 1px rgba(0,0,0,0.05);
}


.account-item-details {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

.account-item-name {
    font-size: 15px;
    font-weight: 500;
    color: #1a1a1a;
}

.account-item-last4 {
    font-size: 13px;
    color: #6b7280;
}

.account-item-radio {
    appearance: none;
    -webkit-appearance: none;
    width: 22px;
    height: 22px;
    border: 2px solid #c8c7cc; /* iOS-like grey border */
    border-radius: 50%;
    outline: none;
    cursor: pointer;
    margin-left: 16px;
    position: relative;
    flex-shrink: 0;
}

.account-item-radio:checked {
    border-color: #3b82f6; /* Blue border when checked */
    background-color: #3b82f6; /* Blue fill */
}

.account-item-radio:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 6px; /* Adjust size of inner dot */
    height: 6px;
    border-radius: 50%;
    background-color: white;
    transform: translate(-50%, -50%);
    display: block;
}

/* For the "Cash" item if it needs specific icon */
.account-item[data-account-type="CASH"] .account-item-icon i.feather {
    width: 18px; height: 18px;
}


/* Style for the "Unlink" button state in the linkable transactions list */
.linkable-tx-item button.unlink-button {
    background-color: #ef4444; 
    color: white;
}

.linkable-tx-item button.unlink-button:hover {
    background-color: #dc2626; 
}

.linkable-tx-item.currently-linked {
    border-left: 3px solid #3b82f6; 
    background-color: #f0f7ff; 
}

/* Enhanced Styles for the Sliding Three-State Toggle */

.reimbursable-override-card{
    overflow: hidden;
}

.three-state-toggle {
    display: flex;
    position: relative;
    border-radius: 8px;
    background-color: #e9ecef;
    padding: 2px;
    width: 180px;
    user-select: none;
}

.three-state-toggle::before {
    content: '';
    position: absolute;
    top: 2px;
    bottom: 2px;
    width: calc(33.333% - 1.33px); /* Account for padding distribution */
    left: 2px;
    background-color: white;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transform: var(--slider-transform, translateX(0));
    transition: transform 0.3s cubic-bezier(0.65, 0, 0.35, 1);
    z-index: 1;
}

.toggle-segment {
    padding: 6px 0;
    font-size: 13px;
    font-weight: 500;
    color: #4b5563;
    background-color: transparent;
    border: none;
    cursor: pointer;
    flex: 1; /* Use flex: 1 instead of flex-grow: 1 for equal distribution */
    text-align: center;
    outline: none;
    position: relative;
    z-index: 2;
    transition: color 0.3s ease;
}

.toggle-segment.active-text {
    color: #1a1a1a;
    font-weight: 600;
}
```

`sms_finance_tracker/static/js/edit-transaction.js`:

```js
document.addEventListener('DOMContentLoaded', function() {
    'use strict';
    const tg = window.Telegram.WebApp;
    // --- Initialize Telegram Web App ---
    if (tg.initDataUnsafe?.user) {
        tg.expand();
        tg.setHeaderColor('#f8f9fa');
        tg.setBackgroundColor('#f8f9fa');
    }

    // --- DOM Element Cache ---
    const elements = {
        loadingOverlay: document.getElementById('loading-overlay'),
        // Main page elements
        transactionAmount: document.getElementById('transaction-amount'),
        mainCategoryIconWrapper: document.getElementById('main-category-icon-wrapper'),
        mainCategoryName: document.getElementById('main-category-name'),
        fromAccountIcon: document.getElementById('from-account-icon-initial'),
        fromAccountDetails: document.getElementById('from-account-details'),
        transactionDate: document.getElementById('transaction-date'),
        paidToMerchantName: document.getElementById('paid-to-merchant-name'),
        descriptionTextarea: document.getElementById('description'),
        categoryBadge: document.getElementById('category-badge-main'),
        fromAccountAction: document.getElementById('from-account-action'),
        moreDetailsAction: document.getElementById('more-details-action'),

        linkTransactionAction: document.getElementById('link-transaction-action'),
        linkedTransactionInfo: document.getElementById('linked-transaction-info'),

        // New: Reimbursable Override elements (main page)
        reimbursableOverrideCard: document.getElementById('reimbursable-override-card'), 
        reimbursableToggle: document.getElementById('reimbursable-toggle'), 

        // Modals
        moreDetailsModal: document.getElementById('moreDetailsModal'),
        closeMoreDetailsModalBtn: document.getElementById('closeMoreDetailsModalBtn'),
        detailsAmount: document.getElementById('details-amount'),
        detailsDebitedFrom: document.getElementById('details-debited-from'),
        detailsMerchant: document.getElementById('details-merchant'),
        detailsTimestamp: document.getElementById('details-timestamp'),
        detailsStatus: document.getElementById('details-status'),
        detailsUniqueHash: document.getElementById('details-unique-hash'),
        detailsRawSms: document.getElementById('details-raw-sms'),

        accountSelectModal: document.getElementById('accountSelectModal'),
        closeAccountSelectModalBtn: document.getElementById('closeAccountSelectModalBtn'),
        saveAccountSelectionBtn: document.getElementById('saveAccountSelectionBtn'),
        accountListContainer: document.getElementById('account-list-container'),
        
        // Preview elements inside the account modal
        accSelMerchantName: document.getElementById('account-select-merchant-name-preview'),
        accSelTransactionTime: document.getElementById('account-select-transaction-time-preview'),
        accSelAmount: document.getElementById('account-select-amount-preview'),
        accSelCategoryIconWrapper: document.getElementById('account-select-category-icon-wrapper'),
        accSelCategoryName: document.getElementById('account-select-category-name-preview'),
        accSelCurrentAccountIcon: document.getElementById('account-select-current-account-icon-preview'),

        // --- Category Select Modal elements ---
        categoryModal: document.getElementById('categoryModal'),
        closeCategoryModalBtn: document.getElementById('closeCategoryModalBtn'),
        saveCategorySelectionBtn: document.getElementById('saveCategorySelectionBtn'),
        categoryListContainer: document.getElementById('category-list-container'),
        categorySearchInput: document.getElementById('category-search-input'),
        
        // Preview elements inside the category modal
        catSelMerchantName: document.getElementById('cat-select-merchant-name-preview'),
        catSelTransactionTime: document.getElementById('cat-select-transaction-time-preview'),
        catSelAmount: document.getElementById('cat-select-amount-preview'),
        catSelCategoryIconWrapper: document.getElementById('cat-select-category-icon-wrapper'),
        catSelCategoryName: document.getElementById('cat-select-category-name-preview'),
        catSelCurrentAccountIcon: document.getElementById('cat-select-current-account-icon-preview'),

        // New: Link Transaction Modal elements
        linkTransactionModal: document.getElementById('linkTransactionModal'),
        closeLinkModalBtn: document.getElementById('closeLinkModalBtn'),
        saveLinkBtn: document.getElementById('saveLinkBtn'), 
        linkCurrentTransactionPreview: document.getElementById('link-current-transaction-preview'), 
        linkCurrentMerchantIconPreview: document.getElementById('link-current-merchant-icon-preview'),
        linkCurrentMerchantNamePreview: document.getElementById('link-current-merchant-name-preview'),
        linkCurrentTransactionTimePreview: document.getElementById('link-current-transaction-time-preview'),
        linkCurrentAmountPreview: document.getElementById('link-current-amount-preview'),
        linkCurrentCategoryIconWrapper: document.getElementById('link-current-category-icon-wrapper'),
        linkCurrentCategoryNamePreview: document.getElementById('link-current-category-name-preview'),
        linkCurrentAccountIconPreview: document.getElementById('link-current-account-icon-preview'),
        linkableTransactionsList: document.getElementById('linkable-transactions-list'),

    };

    // --- State Management ---
    let state = {
        transaction: null,
        allCategories: [],
        allAccounts: [],
        linkableTransactions: [],
        originalTransaction: {},
        tempSelectedSubcategoryId: null,
        tempSelectedAccountId: null,
        linkedTransactionDetails: null,
        hasUnsavedChanges: false,
        apiToken: '',
        apiBaseUrl: 'https://finance.arlp.live/api/v1',
    };

    // --- Main Initialization ---
    async function initialize() {
        setLoading(true);
        try {
            const urlParams = new URLSearchParams(window.location.search);
            state.apiToken = urlParams.get('token');
            if (!state.apiToken) throw new Error("Access token is missing.");

            const [transactionData, categories, accounts] = await Promise.all([
                fetchApi('/transactions/get/by-token'),
                fetchApi('/categories/all_details'),
                fetchApi('/accounts/for-mini-app')
            ]);
            
            state.transaction = transactionData;
            state.originalTransaction = JSON.parse(JSON.stringify(transactionData));
            state.allCategories = categories;
            state.allAccounts = accounts;
            state.tempSelectedSubcategoryId = transactionData.subcategory?.id;
            state.tempSelectedAccountId = transactionData.account?.id;

            populateUI();
            configureMainButton();
            setupEventListeners();

        } catch (error) {
            console.error("Initialization Error:", error);
            showError(error.message);
        } finally {
            setLoading(false);
            feather.replace({ width: '1em', height: '1em', 'stroke-width': 1.8 });
        }
    }

    // --- API Fetch Utility ---
    async function fetchApi(endpoint, options = {}) {
        const headers = {
            'Authorization': `Bearer ${state.apiToken}`,
            'Content-Type': 'application/json',
            ...options.headers,
        };
        const response = await fetch(`${state.apiBaseUrl}${endpoint}`, { ...options, headers });
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ detail: response.statusText }));
            throw new Error(`API Error: ${errorData.detail || response.statusText}`);
        }
        return response.json();
    }

    // --- UI Population ---
    function populateUI() {
        const { transaction } = state;
        if (!transaction) return;

        elements.transactionAmount.textContent = `-${getCurrencySymbol(transaction.currency)}${transaction.amount.toFixed(2)}`;
        elements.mainCategoryName.textContent = getSubcategoryDisplayName(transaction.subcategory).toUpperCase();
        elements.mainCategoryIconWrapper.innerHTML = createIconHTML(transaction.subcategory?.icon_name);
        
        if (transaction.account) {
            elements.fromAccountDetails.textContent = `***${transaction.account.account_last4}`;
            elements.fromAccountIcon.textContent = transaction.account.name?.charAt(0).toUpperCase() || 'A';
        } else {
            elements.fromAccountDetails.textContent = 'Select Account';
            elements.fromAccountIcon.textContent = '?';
        }
        
        elements.paidToMerchantName.textContent = transaction.merchant_vpa || 'Unknown Merchant';
        elements.descriptionTextarea.value = transaction.description || '';

        if (transaction.transaction_datetime_from_sms) {
            const date = new Date(transaction.transaction_datetime_from_sms);
            elements.transactionDate.textContent = date.toLocaleDateString('en-GB', { weekday: 'short', month: 'short', day: 'numeric', year: '2-digit' }).replace(/,/g, '');
        } else {
            elements.transactionDate.textContent = 'No Date';
        }

        updateReimbursableStatusDisplay();
        updateLinkedTransactionDisplay();
        
        feather.replace();
    }

    function updateReimbursableStatusDisplay() {
        const { transaction } = state;
        if (!transaction || !elements.reimbursableToggle) return;

        const currentOverride = transaction.override_reimbursable;
        const segments = elements.reimbursableToggle.querySelectorAll('.toggle-segment');
        let activeIndex = 0;

        if (currentOverride === true) {
            activeIndex = 1; 
        } else if (currentOverride === false) {
            activeIndex = 2; 
        }

        segments.forEach((segment, index) => {
            if (index === activeIndex) {
                segment.classList.add('active-text');
            } else {
                segment.classList.remove('active-text');
            }
        });
       
        const segmentWidth = (elements.reimbursableToggle.offsetWidth - 4) / 3;
        const transformValue = `translateX(${activeIndex * segmentWidth}px)`;
    
        elements.reimbursableToggle.style.setProperty('--slider-transform', transformValue);

    }

    async function updateLinkedTransactionDisplay() {
        const { transaction } = state;
        const linkActionTextElement = elements.linkTransactionAction.querySelector('#link-action-text'); 
        if (!transaction) return;

        if (transaction.linked_transaction_hash) {
            setLoading(true);
            try {
                const linkedTxDetails = await fetchApi(`/transactions/by-hash/${transaction.linked_transaction_hash}`);
                state.linkedTransactionDetails = linkedTxDetails; 

                if (linkedTxDetails) {
                    const displayDate = linkedTxDetails.transaction_datetime_from_sms 
                        ? new Date(linkedTxDetails.transaction_datetime_from_sms).toLocaleDateString('en-GB', { month: 'short', day: 'numeric' })
                        : 'Date N/A';
                    const displayAmount = `${getCurrencySymbol(linkedTxDetails.currency)}${linkedTxDetails.amount.toFixed(2)}`;
                    
                    elements.linkedTransactionInfo.textContent = `Linked: ${displayAmount} (${displayDate})`;
                    elements.linkedTransactionInfo.style.color = '#3b82f6';
                    if(linkActionTextElement) linkActionTextElement.textContent = 'Manage Link';
                } else {
                    elements.linkedTransactionInfo.textContent = "Linked (Details N/A)";
                    if(linkActionTextElement) linkActionTextElement.textContent = 'Link Transaction'; 
                    state.linkedTransactionDetails = null; 
                }
            } catch (error) {
                console.error("Failed to fetch linked transaction details:", error);
                elements.linkedTransactionInfo.textContent = "Linked (Error)";
                if(linkActionTextElement) linkActionTextElement.textContent = 'Link Transaction';
                state.linkedTransactionDetails = null; 
            } finally {
                setLoading(false);
            }
        } else {
            elements.linkedTransactionInfo.textContent = "Not Linked";
            elements.linkedTransactionInfo.style.color = ''; 
            if(linkActionTextElement) linkActionTextElement.textContent = 'Link Transaction';
            state.linkedTransactionDetails = null;
        }
    }
    
    function populateMoreDetailsModal() {
        const { transaction } = state;
        if (!transaction) return;

        elements.detailsAmount.textContent = `${getCurrencySymbol(transaction.currency)} ${transaction.amount.toFixed(2)}`;
        elements.detailsDebitedFrom.textContent = transaction.account ? `${transaction.account.name} (***${transaction.account.account_last4})` : 'N/A';
        elements.detailsMerchant.textContent = transaction.merchant_vpa || 'N/A';
        elements.detailsTimestamp.textContent = new Date(transaction.transaction_datetime_from_sms).toLocaleString('en-GB');
        elements.detailsStatus.textContent = transaction.status.replace('_', ' ').toUpperCase();
        elements.detailsUniqueHash.textContent = transaction.unique_hash;
        elements.detailsRawSms.textContent = transaction.raw_sms_content;
    }

    // "UI Population" section

    function populateAccountSelectModalPreview() {
        const { transaction, allAccounts } = state;
        if (!transaction) return;
        const accountToPreview = allAccounts.find(acc => acc.id === state.tempSelectedAccountId) || transaction.account;
        elements.accSelMerchantName.textContent = transaction.merchant_vpa || 'Unknown';
        elements.accSelAmount.textContent = `-${getCurrencySymbol(transaction.currency)}${transaction.amount.toFixed(2)}`;
        if (transaction.transaction_datetime_from_sms) {
            elements.accSelTransactionTime.textContent = new Date(transaction.transaction_datetime_from_sms).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
        } else {
            elements.accSelTransactionTime.textContent = "Time N/A";
        }
        
        elements.accSelCategoryName.textContent = getSubcategoryDisplayName(transaction.subcategory).toUpperCase();
        elements.accSelCategoryIconWrapper.innerHTML = createIconHTML(transaction.subcategory?.icon_name);
        
        if (accountToPreview) {
            elements.accSelCurrentAccountIcon.textContent = accountToPreview.name?.charAt(0).toUpperCase() || 'A';
        } else {
            elements.accSelCurrentAccountIcon.textContent = '?';
        }
        feather.replace();
    }

    function populateAccountsInModalList() {
        const { allAccounts, tempSelectedAccountId } = state;
        elements.accountListContainer.innerHTML = '';
        const groupedAccounts = allAccounts.reduce((acc, account) => {
            const type = account.account_type || 'UNKNOWN';
            if (!acc[type]) acc[type] = [];
            acc[type].push(account);
            return acc;
        }, {});

        const accountTypeOrder = ['savings_account', 'wallet', 'credit_card', 'unknown'];

        accountTypeOrder.forEach(typeKey => {
            const group = groupedAccounts[typeKey];
            if (!group) return;
            
            const groupDiv = document.createElement('div');
            groupDiv.className = 'account-group';
            
            const title = document.createElement('h4');
            title.className = 'account-group-title';
            title.textContent = typeKey.replace('_', ' ').toUpperCase() + 'S';
            groupDiv.appendChild(title);
            group.forEach(acc => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'account-item';
                itemDiv.dataset.accountId = acc.id;
                
                if (acc.id === tempSelectedAccountId) {
                    itemDiv.classList.add('selected');
                }

                const iconName = getBankIconClass(acc.name, acc.account_type);

                itemDiv.innerHTML = `
                    <div class="account-item-icon">
                    <img class="custom-icon" src="/static/images/icons/${iconName}" alt="${iconName.split('/').pop().split('.')[0]}">
                    </div>
                    <div class="account-item-details">
                        <span class="account-item-name">${acc.name}</span>
                        <span class="account-item-last4">***${acc.account_last4}</span>
                    </div>
                    <input type="radio" name="selectedAccountRadio" value="${acc.id}" class="account-item-radio" ${acc.id === tempSelectedAccountId ? 'checked' : ''}>
                `;

                
                groupDiv.appendChild(itemDiv);
            });
            elements.accountListContainer.appendChild(groupDiv);
        });
    }

    function populateCategorySelectModalPreview() {
        const { transaction, allCategories } = state;
        if (!transaction) return;

        // Populate the static parts of the preview
        elements.catSelMerchantName.textContent = transaction.merchant_vpa || 'Unknown';
        elements.catSelAmount.textContent = `-${getCurrencySymbol(transaction.currency)}${transaction.amount.toFixed(2)}`;
        elements.catSelCurrentAccountIcon.textContent = transaction.account?.name.charAt(0).toUpperCase() || '?';
        
        if (transaction.transaction_datetime_from_sms) {
            elements.catSelTransactionTime.textContent = new Date(transaction.transaction_datetime_from_sms).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
        } else {
            elements.catSelTransactionTime.textContent = "Time N/A";
        }

        // Find the currently selected subcategory to display its info
        let subcatToPreview = null;
        for (const parentCat of allCategories) {
            const found = parentCat.subcategories.find(sc => sc.id === state.tempSelectedSubcategoryId);
            if (found) {
                subcatToPreview = { ...found, parent_category_name: parentCat.name };
                break;
            }
        }
        
        elements.catSelCategoryName.textContent = getSubcategoryDisplayName(subcatToPreview).toUpperCase();
        elements.catSelCategoryIconWrapper.innerHTML = createIconHTML(subcatToPreview?.icon_name);
        feather.replace();
    }

    function populateCategoriesInModal(filterText = '') {
        const { allCategories, tempSelectedSubcategoryId } = state;
        elements.categoryListContainer.innerHTML = '';
        const searchTerm = filterText.toLowerCase();

        allCategories.forEach(parentCat => {
            // Filter subcategories based on search term
            const matchingSubcategories = parentCat.subcategories.filter(subCat => 
                subCat.name.toLowerCase().includes(searchTerm) || 
                parentCat.name.toLowerCase().includes(searchTerm)
            );

            // Only show the parent category if it has matching subcategories
            if (matchingSubcategories.length > 0) {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'category-group';
                groupDiv.innerHTML = `
                    <div class="category-group-title">${parentCat.name}</div>
                    <div class="category-group-subtitle">${parentCat.description || ''}</div>
                `;
                
                const subcategoryGridDiv = document.createElement('div');
                subcategoryGridDiv.className = 'subcategory-grid';

                matchingSubcategories.forEach(subCat => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'subcategory-item';
                    itemDiv.dataset.subcategoryId = subCat.id;
                    if (subCat.id === tempSelectedSubcategoryId) {
                        itemDiv.classList.add('selected');
                    }
                    itemDiv.innerHTML = `
                        <div class="subcategory-icon-wrapper">${createIconHTML(subCat.icon_name)}</div>
                        <div class="subcategory-name">${subCat.name}</div>
                    `;
                    subcategoryGridDiv.appendChild(itemDiv);
                });

                groupDiv.appendChild(subcategoryGridDiv);
                elements.categoryListContainer.appendChild(groupDiv);
            }
        });
        feather.replace();
    }

    function populateLinkTransactionModalPreview() {
        const { transaction } = state;
        if (!transaction) return;

        elements.linkCurrentMerchantNamePreview.textContent = transaction.merchant_vpa || 'Unknown';
        elements.linkCurrentAmountPreview.textContent = `-${getCurrencySymbol(transaction.currency)}${transaction.amount.toFixed(2)}`;
        elements.linkCurrentAccountIconPreview.textContent = transaction.account?.name.charAt(0).toUpperCase() || '?';
        
        if (transaction.transaction_datetime_from_sms) {
            elements.linkCurrentTransactionTimePreview.textContent = new Date(transaction.transaction_datetime_from_sms).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });
        } else {
            elements.linkCurrentTransactionTimePreview.textContent = "Time N/A";
        }
        
        elements.linkCurrentCategoryNamePreview.textContent = getSubcategoryDisplayName(transaction.subcategory).toUpperCase();
        elements.linkCurrentCategoryIconWrapper.innerHTML = createIconHTML(transaction.subcategory?.icon_name);
        feather.replace();
    }

    function populateLinkableTransactionsList() {
        elements.linkableTransactionsList.innerHTML = ''; 

        const currentLinkedHash = state.transaction.linked_transaction_hash;

        if (state.linkableTransactions.length === 0 && !currentLinkedHash) {
            elements.linkableTransactionsList.innerHTML = '<p style="text-align:center; color:#6b7280; padding: 20px;">No recent transactions available to link.</p>';
            return;
        }

        let displayList = [...state.linkableTransactions];
        
      
        if (currentLinkedHash && state.linkedTransactionDetails && !displayList.find(tx => tx.unique_hash === currentLinkedHash)) {
             displayList.unshift(state.linkedTransactionDetails); 
        }


        if (displayList.length === 0) {
             elements.linkableTransactionsList.innerHTML = '<p style="text-align:center; color:#6b7280; padding: 20px;">No transactions to display.</p>';
            return;
        }


        displayList.forEach(tx => {
            if (tx.unique_hash === state.transaction.unique_hash) {
                return;
            }

            const itemDiv = document.createElement('div');
            itemDiv.className = 'account-item linkable-tx-item';
            itemDiv.dataset.hash = tx.unique_hash;

            const isCurrentlyLinked = tx.unique_hash === currentLinkedHash;
            if (isCurrentlyLinked) {
                itemDiv.classList.add('currently-linked'); 
            }

            const txDate = tx.transaction_datetime_from_sms 
                ? new Date(tx.transaction_datetime_from_sms).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: '2-digit'})
                : 'Date N/A';
            const txAmount = `${getCurrencySymbol(tx.currency)}${tx.amount.toFixed(2)}`;
            const merchantOrDesc = tx.merchant_vpa || tx.description || 'Unknown Transaction';
            
            // const amountIcon = tx.amount > 0 ? `<i data-feather="arrow-down-circle" style="color: green;"></i>` : `<i data-feather="arrow-up-circle" style="color: red;"></i>`;

            const amountIcon = tx.amount > 0 ? createIconHTML(tx.subcategory?.icon_name) : `<i data-feather="arrow-up-circle" style="color: red;"></i>`;

            const buttonText = isCurrentlyLinked ? 'Unlink' : 'Link';
            const buttonClass = isCurrentlyLinked ? 'unlink-button' : 'link-button'; 

            itemDiv.innerHTML = `
                <div class="account-item-icon" style="background-color: #e5e7eb;">${amountIcon}</div>
                <div class="account-item-details">
                    <span class="account-item-name">${txAmount} - ${merchantOrDesc.substring(0, 25)}${merchantOrDesc.length > 25 ? '...' : ''}</span>
                    <span class="account-item-last4">${getSubcategoryDisplayName(tx.subcategory)} - ${txDate}</span>
                </div>
                <button class="${buttonClass}" style="padding: 6px 12px; border: none; border-radius: 8px; cursor: pointer;">${buttonText}</button>
            `;
            elements.linkableTransactionsList.appendChild(itemDiv);
        });
        feather.replace();
    }

    // --- UI Helpers ---
    function setLoading(isLoading) { elements.loadingOverlay.style.display = isLoading ? 'flex' : 'none'; }
    function showError(message) { tg.showAlert(message); if(tg.MainButton.isVisible) tg.MainButton.hide(); }
    function getCurrencySymbol(code) { return code === 'USD' ? '$' : '₹'; }

    function getSubcategoryDisplayName(subcategory) {
        if (!subcategory || !subcategory.name) return 'Uncategorized';
        const parentName = subcategory.parent_category_name;
        return (parentName && parentName.toLowerCase() !== 'general') ? `${parentName} (${subcategory.name})` : subcategory.name;
    }
    
    function createIconHTML(iconString) {
        if (!iconString) return `<i data-feather="circle"></i>`;
        if (iconString.startsWith('fthr:')) return `<i data-feather="${iconString.substring(5)}"></i>`;
        if (iconString.startsWith('img:')) return `<img src="/static/images/icons/${iconString.substring(4)}" class="custom-icon">`;
        if (iconString.startsWith('emoji:')) return `<span class="emoji-icon">${iconString.substring(6)}</span>`;
        return `<i data-feather="tag"></i>`; // Default
    }

    function setupClipboard() {
        document.querySelectorAll('.copy-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                e.stopPropagation(); // Prevent modal from closing if clicked inside
                const targetSelector = button.dataset.clipboardTarget;
                const targetElement = document.querySelector(targetSelector);
                if (targetElement) {
                    navigator.clipboard.writeText(targetElement.textContent.trim())
                        .then(() => {
                            const originalIcon = button.innerHTML;
                            button.innerHTML = '<i data-feather="check" style="color: #31b545;"></i>';
                            feather.replace();
                            setTimeout(() => {
                                button.innerHTML = originalIcon;
                                feather.replace();
                            }, 1500);
                        })
                        .catch(err => console.error('Failed to copy text: ', err));
                }
            });
        });
    }

    function getBankIconClass(bankName, accountType) {
        if (accountType === 'CASH') return 'bank-icon-cash';
        const name = bankName?.toLowerCase() || '';
        if (name.includes('hdfc') && name.includes('dinner club')) return 'brand/diners-club.svg';
        if (name.includes('hdfc')) return 'brand/hdfc.svg';
        if (name.includes('icici') && name.includes('amazon')) return 'brand/amazon-icici-cc.svg';
        if (name.includes('icici')) return 'brand/icici.svg';
        if (name.includes('sbi') && name.includes('cashback')) return 'brand/sbi-cashback.svg';
        if (name.includes('sbi')) return 'brand/sbi.svg';
        if (name.includes('idfc')) return 'brand/idfc.svg';
        if (name.includes('federal') && name.includes('jupiter')) return 'brand/jupiter-fed.svg';
        if (name.includes('federal') && name.includes('fi')) return 'brand/fi.svg';
        if (name.includes('federal')) return 'brand/federal-bank-savings.svg';
        if (name.includes('amex') || name.includes('american express')) return 'brand/amex.svg';
        return 'bank-icon-default';
    }

    // --- Event Listeners ---
    function setupEventListeners() {
        elements.descriptionTextarea.addEventListener('input', () => { state.hasUnsavedChanges = true; });

        
        elements.moreDetailsAction.addEventListener('click', () => {
            populateMoreDetailsModal(); 
            elements.moreDetailsModal.style.display = 'flex';
            feather.replace();
        });

        elements.fromAccountAction.addEventListener('click', () => {
            state.tempSelectedAccountId = state.transaction.account?.id;
            populateAccountSelectModalPreview();
            populateAccountsInModalList();
            elements.accountSelectModal.style.display = 'flex';
        });

        elements.closeAccountSelectModalBtn.addEventListener('click', () => {
            elements.accountSelectModal.style.display = 'none';
        });

         elements.accountSelectModal.addEventListener('click', (e) => {
            if (e.target === elements.accountSelectModal) {
                elements.accountSelectModal.style.display = 'none';
            }
        });

        elements.saveAccountSelectionBtn.addEventListener('click', () => {
            if (state.tempSelectedAccountId !== state.transaction.account?.id) {
                state.transaction.account = state.allAccounts.find(acc => acc.id === state.tempSelectedAccountId);
                state.hasUnsavedChanges = true;
                populateUI();
            }
            elements.accountSelectModal.style.display = 'none';
        });

        elements.accountListContainer.addEventListener('click', (e) => {
            const item = e.target.closest('.account-item');
            if (item) {
                elements.accountListContainer.querySelectorAll('.account-item.selected').forEach(el => el.classList.remove('selected'));
                item.classList.add('selected');

                const radio = item.querySelector('.account-item-radio');
                if (radio) {
                    radio.checked = true;
                    state.tempSelectedAccountId = parseInt(radio.value, 10);
                    populateAccountSelectModalPreview(); 
                }
            }
        });

        elements.categoryBadge.addEventListener('click', () => {
            state.tempSelectedSubcategoryId = state.transaction.subcategory?.id; 
            populateCategorySelectModalPreview();
            populateCategoriesInModal();
            elements.categoryModal.style.display = 'flex';
        });

         elements.closeCategoryModalBtn.addEventListener('click', () => {
            elements.categoryModal.style.display = 'none';
        });
        
        elements.categoryModal.addEventListener('click', (e) => {
            if (e.target === elements.categoryModal) {
                elements.categoryModal.style.display = 'none';
            }
        });

        elements.saveCategorySelectionBtn.addEventListener('click', () => {
            if (state.tempSelectedSubcategoryId !== state.transaction.subcategory?.id) {
                for (const parentCat of state.allCategories) {
                    const foundSubcat = parentCat.subcategories.find(sc => sc.id === state.tempSelectedSubcategoryId);
                    if (foundSubcat) {
                        state.transaction.subcategory = { ...foundSubcat, parent_category_name: parentCat.name };
                        break;
                    }
                }
                state.hasUnsavedChanges = true;
                populateUI(); 
            }
            elements.categoryModal.style.display = 'none';
        });

        elements.categorySearchInput.addEventListener('input', (e) => {
            populateCategoriesInModal(e.target.value);
        });

        elements.categoryListContainer.addEventListener('click', (e) => {
            const item = e.target.closest('.subcategory-item');
            if (item) {
                elements.categoryListContainer.querySelectorAll('.subcategory-item.selected').forEach(el => el.classList.remove('selected'));
                item.classList.add('selected');
                state.tempSelectedSubcategoryId = parseInt(item.dataset.subcategoryId, 10);
                populateCategorySelectModalPreview(); 
            }
        });

         elements.closeMoreDetailsModalBtn.addEventListener('click', () => {
            elements.moreDetailsModal.style.display = 'none';
        });

        
        elements.moreDetailsModal.addEventListener('click', (e) => {
            if (e.target === elements.moreDetailsModal) {
                elements.moreDetailsModal.style.display = 'none';
            }
        });

         elements.linkTransactionAction.addEventListener('click', async () => {
            if (state.transaction.linked_transaction_hash) {
                console.log("Currently linked. Opening modal to manage/change link.");
            }
            
            setLoading(true);
            try {
                const linkableTxs = await fetchApi('/transactions/linkable');
                state.linkableTransactions = linkableTxs;
                populateLinkTransactionModalPreview(); 
                populateLinkableTransactionsList();     
                elements.linkTransactionModal.style.display = 'flex';
            } catch (error) {
                showError("Could not fetch linkable transactions: " + error.message);
            } finally {
                setLoading(false);
            }
        });

        // New: Event listeners for "Link Transaction" Modal
        elements.closeLinkModalBtn.addEventListener('click', () => {
            elements.linkTransactionModal.style.display = 'none';
        });

        elements.linkTransactionModal.addEventListener('click', (e) => { 
            if (e.target === elements.linkTransactionModal) {
                elements.linkTransactionModal.style.display = 'none';
            }
        });

        elements.linkableTransactionsList.addEventListener('click', (e) => {
            const buttonClicked = e.target.closest('button');
            if (!buttonClicked) return;

            const itemDiv = buttonClicked.closest('.linkable-tx-item');
            if (!itemDiv) return;

            const selectedHash = itemDiv.dataset.hash;

            if (buttonClicked.classList.contains('unlink-button')) { 
                state.transaction.linked_transaction_hash = null;
            } else { 
                state.transaction.linked_transaction_hash = selectedHash;
            }
            
            state.hasUnsavedChanges = true;
            updateLinkedTransactionDisplay(); 
            populateLinkableTransactionsList(); 
           
        });
        if (elements.reimbursableToggle) { 
            elements.reimbursableToggle.addEventListener('click', (e) => {
                const selectedSegment = e.target.closest('.toggle-segment');
                if (!selectedSegment) return; 

                const selectedValue = selectedSegment.dataset.value;
                let newOverrideValue = null;

                if (selectedValue === 'true') {
                    newOverrideValue = true;
                } else if (selectedValue === 'false') {
                    newOverrideValue = false;
                } 

                if (state.transaction.override_reimbursable !== newOverrideValue) {
                    state.transaction.override_reimbursable = newOverrideValue;
                    state.hasUnsavedChanges = true;
                    updateReimbursableStatusDisplay(); 
                }
            });
        }

        setupClipboard();
    }

    // --- Main Button & Save Logic ---
    function configureMainButton() {
        tg.MainButton.setParams({
            text: 'SAVE CHANGES',
            color: '#3b82f6',
            text_color: '#ffffff',
        }).show();
        tg.MainButton.onClick(handleSave);
    }

    async function handleSave() {
        if (!tg.MainButton.isActive) return;
        
        const patchData = {};
        if (state.hasUnsavedChanges) {
            patchData.description = elements.descriptionTextarea.value;
        }
        if (state.tempSelectedSubcategoryId !== state.transaction.subcategory?.id) {
            patchData.subcategory_id = state.tempSelectedSubcategoryId;
        }
        if (state.tempSelectedAccountId !== state.transaction.account?.id) {
            patchData.account_id = state.tempSelectedAccountId;
        }

         if (state.transaction.linked_transaction_hash !== (state.originalTransaction?.linked_transaction_hash || null)) {
            patchData.linked_transaction_hash = state.transaction.linked_transaction_hash;
            state.hasUnsavedChanges = true;
        }

        if (state.transaction.override_reimbursable !== (state.originalTransaction?.override_reimbursable || null)) {
            patchData.override_reimbursable = state.transaction.override_reimbursable;
            state.hasUnsavedChanges = true;
        }

        if (Object.keys(patchData).length === 0) {
            tg.close();
            return;
        }

        tg.MainButton.showProgress();
        try {
            await fetchApi('/transactions/by-token', {
                method: 'PATCH',
                body: JSON.stringify(patchData),
            });
            tg.close();
        } catch (error) {
            showError(`Error saving: ${error.message}`);
        } finally {
            tg.MainButton.hideProgress();
            state.hasUnsavedChanges = false;
        }
    }

    initialize();
});
```

`sms_finance_tracker/static/js/settings.js`:

```js
document.addEventListener('DOMContentLoaded', function() {
    'use strict';
    const tg = window.Telegram.WebApp;

    // --- Initialize Telegram Web App ---
    if (tg.initDataUnsafe?.user) {
        tg.expand();
        tg.setHeaderColor(tg.themeParams.secondary_bg_color || '#f0f0f0');
        tg.setBackgroundColor(tg.themeParams.secondary_bg_color || '#f0f0f0');
    } else {
        console.warn("Telegram WebApp user data not available. Some features might not work.");
    }
    tg.MainButton.setParams({
        text: 'CLOSE', 
        // color: '#3b82f6', 
        // text_color: '#ffffff',
    }).onClick(() => tg.close());
    tg.MainButton.show();


    // --- DOM Element Cache ---
    const elements = {
        loadingOverlay: document.getElementById('loading-overlay'),
        budgetMonthYearInput: document.getElementById('budget-month-year'),
        budgetAmountInput: document.getElementById('budget-amount'),
        saveMonthlyBudgetBtn: document.getElementById('save-monthly-budget-btn'),
        currentBudgetDisplay: document.getElementById('current-budget-display'),

        // Account Settings elements
        accountsListContainer: document.getElementById('accounts-list-container'),
        // New: Subcategory Settings elements
        categoriesAccordionContainer: document.getElementById('categories-accordion-container'),
    };

    // --- State Management ---
    let state = {
        apiBaseUrl: '/api/v1', 
        currentSelectedYear: null,
        currentSelectedMonth: null,
        allAccounts: [],

    };

    // --- API Fetch Utility ---
    async function fetchApi(endpoint, options = {}) {
        setLoading(true);
        try {
            const headers = {
                'Content-Type': 'application/json',
                'X-API-Key': '1d3d5ea1d406e27b3586a7bb2e7f3d858223a61d1863c3fcdc03720085faae82', 
                ...options.headers,
            };
            const response = await fetch(`${state.apiBaseUrl}${endpoint}`, { ...options, headers });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ detail: response.statusText }));
                throw new Error(`API Error (${response.status}): ${errorData.detail || response.statusText}`);
            }
            return response.status === 204 ? null : response.json(); 
        } finally {
            setLoading(false);
        }
    }

    // --- UI Helpers ---
    function setLoading(isLoading) {
        if (elements.loadingOverlay) {
            elements.loadingOverlay.style.display = isLoading ? 'flex' : 'none';
        }
    }

    function showMessage(message, type = 'info') {
        tg.showAlert(message);
        if (type === 'error') console.error(message);
        else console.log(message);
    }

    function getBankIconClass(bankName, accountType) {
        if (accountType === 'CASH') return 'bank-icon-cash';
        const name = bankName?.toLowerCase() || '';
        if (name.includes('hdfc') && name.includes('dinner club')) return 'brand/diners-club.svg';
        if (name.includes('hdfc')) return 'brand/hdfc.svg';
        if (name.includes('icici') && name.includes('amazon')) return 'brand/amazon-icici-cc.svg';
        if (name.includes('icici')) return 'brand/icici.svg';
        if (name.includes('sbi') && name.includes('cashback')) return 'brand/sbi-cashback.svg';
        if (name.includes('sbi')) return 'brand/sbi.svg';
        if (name.includes('idfc')) return 'brand/idfc.svg';
        if (name.includes('federal') && name.includes('jupiter')) return 'brand/jupiter-fed.svg';
        if (name.includes('federal') && name.includes('fi')) return 'brand/fi.svg';
        if (name.includes('federal')) return 'brand/federal-bank-savings.svg';
        if (name.includes('amex') || name.includes('american express')) return 'brand/amex.svg';
        return 'bank-icon-default';
    }

    function createIconHTML(iconString) { 
        if (!iconString) return `<i data-feather="circle"></i>`;
        if (iconString.startsWith('fthr:')) return `<i data-feather="${iconString.substring(5)}"></i>`;
        if (iconString.startsWith('img:')) return `<img src="/static/images/icons/${iconString.substring(4)}" class="custom-icon" alt="icon">`;
        if (iconString.startsWith('emoji:')) return `<span class="emoji-icon">${iconString.substring(6)}</span>`;
        return `<i data-feather="tag"></i>`;
    }


    // --- Budget Management Logic ---
    function setDefaultMonthYear() {
        const today = new Date();
        const year = today.getFullYear();
        const month = (today.getMonth() + 1).toString().padStart(2, '0')
        elements.budgetMonthYearInput.value = `${year}-${month}`;
        state.currentSelectedYear = year;
        state.currentSelectedMonth = parseInt(month, 10);
        fetchAndDisplayBudgetForSelectedMonth(); 
    }

    async function fetchAndDisplayBudgetForSelectedMonth() {
        if (!state.currentSelectedYear || !state.currentSelectedMonth) {
            elements.currentBudgetDisplay.textContent = "Please select a month and year.";
            return;
        }

        try {
            const budgetData = await fetchApi(`/budget/${state.currentSelectedYear}/${state.currentSelectedMonth}`);
            if (budgetData && typeof budgetData.budget_amount !== 'undefined') {
                elements.budgetAmountInput.value = budgetData.budget_amount;
                elements.currentBudgetDisplay.textContent = `Current budget for ${state.currentSelectedMonth}/${state.currentSelectedYear}: ₹${budgetData.budget_amount.toFixed(2)}`;
            } else {
                elements.budgetAmountInput.value = '';
                elements.currentBudgetDisplay.textContent = `No budget set for ${state.currentSelectedMonth}/${state.currentSelectedYear}.`;
            }
        } catch (error) {
            if (error.message.includes("404")) { 
                 elements.budgetAmountInput.value = '';
                 elements.currentBudgetDisplay.textContent = `No budget set for ${state.currentSelectedMonth}/${state.currentSelectedYear}.`;
            } else {
                showMessage(`Error fetching budget: ${error.message}`, 'error');
                elements.currentBudgetDisplay.textContent = "Error loading budget.";
            }
        }
    }

    async function handleSaveMonthlyBudget() {
        const monthYearValue = elements.budgetMonthYearInput.value;
        const amountValue = parseFloat(elements.budgetAmountInput.value);

        if (!monthYearValue) {
            showMessage("Please select a month and year.", 'error');
            return;
        }
        if (isNaN(amountValue) || amountValue <= 0) {
            showMessage("Please enter a valid positive budget amount.", 'error');
            return;
        }

        const [year, month] = monthYearValue.split('-').map(Number);

        try {
            await fetchApi('/budget/', {
                method: 'POST',
                body: JSON.stringify({ year, month, budget_amount: amountValue }),
            });
            showMessage(`Budget for ${month}/${year} saved successfully!`, 'success');
            state.currentSelectedYear = year;
            state.currentSelectedMonth = month;
            fetchAndDisplayBudgetForSelectedMonth(); 
        } catch (error) {
            showMessage(`Error saving budget: ${error.message}`, 'error');
        }
    }

    // --- Account Purpose Management Logic ---
    async function fetchAndDisplayAccounts() {
        if (!elements.accountsListContainer) return;
        setLoading(true);
        try {
            const accountsData = await fetchApi('/accounts/for-mini-app');
            state.allAccounts = accountsData || [];
            renderAccountsList();
        } catch (error) {
            showMessage(`Error fetching accounts: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    }

    function renderAccountsList() {
        if (!elements.accountsListContainer) return;
        elements.accountsListContainer.innerHTML = ''; 

        if (state.allAccounts.length === 0) {
            elements.accountsListContainer.innerHTML = '<p>No accounts found.</p>';
            return;
        }

        state.allAccounts.forEach(account => {
            const itemDiv = document.createElement('div');
            itemDiv.className = 'account-list-item';
            itemDiv.dataset.accountId = account.id;

            const iconName = getBankIconClass(account.name, account.account_type); 
            const iconHTML = `<img class="custom-icon" src="/static/images/icons/${iconName}" alt="...">`;

            itemDiv.innerHTML = `
                <div class="account-info">
                    <div class="account-item-icon">${iconHTML}</div> 
                    <div class="account-name-details">
                        <span class="account-name-settings">${account.name}</span>
                        <span class="account-meta-settings">${account.account_type.replace('_', ' ')} ***${account.account_last4}</span>
                    </div>
                </div>
                <div class="three-state-toggle account-purpose-toggle-style" data-account-id="${account.id}">
                    <button class="toggle-segment ${account.purpose === 'personal' ? 'active-text' : ''}" data-value="personal" data-index="0">Personal</button>
                    <button class="toggle-segment ${account.purpose === 'business' ? 'active-text' : ''}" data-value="business" data-index="1">Business</button>
                </div>
            `;
            elements.accountsListContainer.appendChild(itemDiv);

            const toggleElement = itemDiv.querySelector('.three-state-toggle');
            const activeIndex = account.purpose === 'business' ? 1 : 0;
            const segmentWidth = (140 - 4) / 2;
            const transformValue = `translateX(${activeIndex * segmentWidth}px)`;
            toggleElement.style.setProperty('--slider-transform', transformValue);
        });
        feather.replace(); 
    }

    async function handleAccountPurposeChange(accountId, newPurpose) {
        setLoading(true);
        try {
            await fetchApi(`/accounts/${accountId}`, {
                method: 'PATCH',
                body: JSON.stringify({ purpose: newPurpose }),
            });
            const accountInState = state.allAccounts.find(acc => acc.id === accountId);
            if (accountInState) {
                accountInState.purpose = newPurpose;
            }
            const toggleContainer = elements.accountsListContainer.querySelector(`[data-account-id="${accountId}"]`);
            if (toggleContainer) {
                const toggleElement = toggleContainer.querySelector('.three-state-toggle');
            
                toggleElement.querySelectorAll('.toggle-segment').forEach(segment => {
                    segment.classList.toggle('active-text', segment.dataset.value === newPurpose);
                });
            
                const activeIndex = newPurpose === 'business' ? 1 : 0;
                const segmentWidth = (140 - 4) / 2;
                const transformValue = `translateX(${activeIndex * segmentWidth}px)`;
                toggleElement.style.setProperty('--slider-transform', transformValue);
            }
        } catch (error) {
            showMessage(`Error updating account purpose: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    }

    // --- Subcategory Rule Management Logic ---
    async function fetchAndDisplayCategoriesAndSubcategories() {
        if (!elements.categoriesAccordionContainer) return;
        setLoading(true);
        try {
            const categoriesData = await fetchApi('/categories/all_details');
            state.allCategoriesWithSubcategories = categoriesData || [];
            renderCategoriesAccordion();
        } catch (error) {
            showMessage(`Error fetching categories: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    }

    function renderCategoriesAccordion() {
        if (!elements.categoriesAccordionContainer) return;
        elements.categoriesAccordionContainer.innerHTML = ''; 

        if (state.allCategoriesWithSubcategories.length === 0) {
            elements.categoriesAccordionContainer.innerHTML = '<p>No categories found.</p>';
            return;
        }

        state.allCategoriesWithSubcategories.forEach(category => {
            const categoryGroupDiv = document.createElement('div');
            categoryGroupDiv.className = 'category-group-settings';
            categoryGroupDiv.dataset.categoryId = category.id;

            const headerDiv = document.createElement('div');
            headerDiv.className = 'category-header-settings';
            headerDiv.innerHTML = `
                <span class="category-title-settings">${category.name}</span>
                <i data-feather="chevron-right" class="category-chevron"></i>
            `;

            const subcategoriesListDiv = document.createElement('div');
            subcategoriesListDiv.className = 'subcategories-list-settings';

            if (category.subcategories && category.subcategories.length > 0) {
                category.subcategories.forEach(sub => {
                    const subItemDiv = document.createElement('div');
                    subItemDiv.className = 'subcategory-item-settings';
                    subItemDiv.dataset.subcategoryId = sub.id;

                    subItemDiv.innerHTML = `
                        <div class="subcategory-info-settings">
                            <div class="subcategory-icon-settings">${createIconHTML(sub.icon_name)}</div>
                            <span class="subcategory-name-settings">${sub.name}</span>
                        </div>
                        <div class="subcategory-toggles-container">
                            <div class="subcategory-toggle-item">
                                <span class="subcategory-toggle-label">Reimbursable</span>
                                <label class="switch">
                                    <input type="checkbox" class="subcategory-flag-toggle" data-flag="is_reimbursable" ${sub.is_reimbursable ? 'checked' : ''}>
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <div class="subcategory-toggle-item">
                                <span class="subcategory-toggle-label">Exclude from Budget</span>
                                <label class="switch">
                                    <input type="checkbox" class="subcategory-flag-toggle" data-flag="exclude_from_budget" ${sub.exclude_from_budget ? 'checked' : ''}>
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    `;
                    subcategoriesListDiv.appendChild(subItemDiv);
                });
            } else {
                subcategoriesListDiv.innerHTML = '<p style="padding: 10px 0; color: var(--tg-theme-hint-color);">No subcategories.</p>';
            }

            categoryGroupDiv.appendChild(headerDiv);
            categoryGroupDiv.appendChild(subcategoriesListDiv);
            elements.categoriesAccordionContainer.appendChild(categoryGroupDiv);
        });
        feather.replace();
    }

    async function handleSubcategoryFlagChange(subcategoryId, flagName, newValue) {
        setLoading(true);
        const patchData = {};
        patchData[flagName] = newValue; 

        try {
            await fetchApi(`/categories/subcategories/${subcategoryId}`, {
                method: 'PATCH',
                body: JSON.stringify(patchData),
            });
            showMessage(`Subcategory ${flagName.replace('_', ' ')} updated.`, 'success');
            // Update local state
            const parentCategory = state.allCategoriesWithSubcategories.find(cat => 
                cat.subcategories.some(sub => sub.id === subcategoryId)
            );
            if (parentCategory) {
                const subcategoryInState = parentCategory.subcategories.find(sub => sub.id === subcategoryId);
                if (subcategoryInState) {
                    subcategoryInState[flagName] = newValue;
                }
            }
        } catch (error) {
            showMessage(`Error updating subcategory: ${error.message}`, 'error');
            // Revert UI toggle if API call fails (optional, but good UX)
            // This would require finding the checkbox and setting its 'checked' property back.
            // For now, we'll rely on a page refresh or re-fetch to correct inconsistencies.
        } finally {
            setLoading(false);
        }
    }

    // --- Event Listeners ---
    function setupEventListeners() {
        if (elements.budgetMonthYearInput) {
            elements.budgetMonthYearInput.addEventListener('change', (event) => {
                const [year, month] = event.target.value.split('-').map(Number);
                state.currentSelectedYear = year;
                state.currentSelectedMonth = month;
                fetchAndDisplayBudgetForSelectedMonth();
            });
        }

        if (elements.saveMonthlyBudgetBtn) {
            elements.saveMonthlyBudgetBtn.addEventListener('click', handleSaveMonthlyBudget);
        }

        // Event listener for account purpose toggles (using event delegation)
        if (elements.accountsListContainer) {
            elements.accountsListContainer.addEventListener('click', (event) => {
                const segmentButton = event.target.closest('.toggle-segment');
                if (segmentButton && segmentButton.parentElement.classList.contains('three-state-toggle')) {
                    const accountId = parseInt(segmentButton.parentElement.dataset.accountId, 10);
                    const newPurpose = segmentButton.dataset.value;
                    
                    const accountInState = state.allAccounts.find(acc => acc.id === accountId);
                    if (accountInState && accountInState.purpose !== newPurpose) {
                        handleAccountPurposeChange(accountId, newPurpose);
                    }
                }
            });
        }

        //  Event listeners for category accordion and subcategory toggles
        if (elements.categoriesAccordionContainer) {
            elements.categoriesAccordionContainer.addEventListener('click', (event) => {
                const header = event.target.closest('.category-header-settings');
                if (header) {
                    header.classList.toggle('expanded');
                    const sublist = header.nextElementSibling;
                    if (sublist && sublist.classList.contains('subcategories-list-settings')) {
                        sublist.style.display = header.classList.contains('expanded') ? 'block' : 'none';
                    }
                    feather.replace(); 
                    return; 
                }

                const toggleInput = event.target.closest('.subcategory-flag-toggle');
                if (toggleInput) {
                    const subcategoryId = parseInt(toggleInput.closest('.subcategory-item-settings').dataset.subcategoryId, 10);
                    const flagName = toggleInput.dataset.flag;
                    const newValue = toggleInput.checked;
                    handleSubcategoryFlagChange(subcategoryId, flagName, newValue);
                }
            });
        }
    }

    // --- Main Initialization ---
    function initialize() {
        if (elements.budgetMonthYearInput) {
            setDefaultMonthYear();
        }
        fetchAndDisplayAccounts(); 
        fetchAndDisplayCategoriesAndSubcategories(); 
        setupEventListeners();
        feather.replace(); 
        tg.ready(); 
    }

    initialize();
});
```

`sms_finance_tracker/templates/mini-app/edit-transaction-stable.html`:

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Transaction Details</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background-color: #f8f9fa; /* Off-white background */
            color: #1a1a1a; /* Default dark text */
            padding: 16px;
            padding-bottom: 100px; /* Space for Telegram MainButton */
            min-height: 100vh;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            gap: 16px; /* Spacing between cards, Fold uses ~16px or sometimes 12px */
        }

        .card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(0, 0, 0, 0.06); /* Subtle border */
        }

        /* Main transaction card */
        .main-card {
            text-align: center;
            padding: 24px 20px;
            position: relative;
        }

        /* REMOVED .bookmark-icon */

        .amount {
            font-size: 48px;
            font-weight: 700; /* Bold amount */
            color: #1a1a1a;
            margin: 16px 0;
            line-height: 1;
        }

        .category-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background: #f3f4f6; /* Light grey badge background */
            padding: 8px 16px;
            border-radius: 20px; /* Pill shape */
            font-size: 14px;
            font-weight: 500;
            color: #374151; /* Darker grey text */
            margin-top: 12px;
            cursor: pointer;
        }

        .category-badge i {
            width: 16px;
            height: 16px;
        }

        /* Info cards (FROM / ON) */
        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1px; /* Creates the separator line */
            background: #e5e7eb; /* Separator color */
            border-radius: 16px;
            overflow: hidden; /* To clip children to border-radius */
            border: 1px solid rgba(0, 0, 0, 0.06);
        }

        .info-item {
            background: white;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .info-label {
            font-size: 12px;
            font-weight: 500;
            color: #6b7280; /* Grey label */
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .info-value {
            font-size: 14px;
            font-weight: 600; /* Semi-bold value */
            color: #1a1a1a;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .account-icon { 
            height: 20px;
            background: #3b82f6; /* Blue background */
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: 600;
            padding: 5px;
        }

        /* Paid to section */
        .paid-to-card {
            padding: 16px 20px; /* Specific padding */
            cursor: pointer;
        }

        .paid-to-header {
            font-size: 12px;
            font-weight: 500;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 12px;
        }

        .paid-to-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .paid-to-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .merchant-icon {
            width: 32px;
            height: 32px;
            background: #f3f4f6; /* Light grey background for icon */
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6b7280; /* Icon color */
        }
        .merchant-icon i {
            width: 18px;
            height: 18px;
        }

        .merchant-name {
            font-size: 16px;
            font-weight: 600;
            color: #1a1a1a;
        }

        .chevron {
            width: 20px;
            height: 20px;
            color: #9ca3af; /* Chevron color */
        }

        /* Action items (Account in, More Details, etc.) */
        .actions-card {
            padding: 0;
            overflow: hidden; 
        }

        .action-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px 20px;
            cursor: pointer;
            transition: background-color 0.15s ease;
        }

        .action-item:hover {
            background-color: #f9fafb; 
        }

        .action-item:not(:last-child) {
            border-bottom: 1px solid #f3f4f6; 
        }

        .action-left {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .action-icon {
            width: 20px;
            height: 20px;
            color: #6b7280;
        }

        .action-text {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
        }

        .action-date {
            font-size: 14px;
            font-weight: 500;
            color: #374151; 
            margin-left: auto;
            padding-right: 8px;
        }
        
        .action-item.no-chevron .action-left {
            flex-grow: 1; 
        }


        /* Notes section */
        .notes-card {
            padding: 0; 
            overflow: hidden;
        }

        .notes-header {
            padding: 16px 20px;
            border-bottom: 1px solid #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .notes-title-text { 
            font-size: 16px;
            font-weight: 600;
            color: #1a1a1a;
        }

        .add-receipt-btn {
            font-size: 14px;
            font-weight: 600;
            color: #3b82f6; 
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
        }

        .notes-content {
            padding: 16px 20px;
        }

        .notes-textarea {
            width: 100%;
            min-height: 80px;
            border: none;
            outline: none;
            font-family: inherit;
            font-size: 15px;
            color: #374151; 
            resize: none;
            background: transparent;
        }

        .notes-textarea::placeholder {
            color: #9ca3af; 
        }

        /* Toggle switch (Exclude from Cash Flow) */
        .toggle-item-card { 
             padding: 0; 
        }
        .toggle-item {
            display: flex;
            align-items: center; 
            justify-content: space-between;
            padding: 16px 20px;
        }

        .toggle-left {
            display: flex;
            align-items: flex-start; 
            gap: 12px;
            flex: 1; 
        }

        .toggle-icon {
            width: 20px;
            height: 20px;
            color: #6b7280;
            margin-top: 2px; 
        }

        .toggle-content {
            flex: 1;
        }

        .toggle-title {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
            margin-bottom: 4px;
        }

        .toggle-subtitle {
            font-size: 14px;
            color: #6b7280;
            line-height: 1.4;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 44px; 
            height: 24px; 
            flex-shrink: 0; 
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #e5e7eb; 
            transition: 0.2s;
            border-radius: 24px; 
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 20px; 
            width: 20px;  
            left: 2px;   
            bottom: 2px; 
            background-color: white;
            transition: 0.2s;
            border-radius: 50%; 
        }

        input:checked + .slider {
            background-color: #3b82f6; 
        }

        input:checked + .slider:before {
            transform: translateX(20px); 
        }

        /* Loading overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: none; 
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 32px;
            height: 32px;
            border: 3px solid #f3f4f6; 
            border-radius: 50%;
            border-top-color: #3b82f6; 
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Category modal */
        .category-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5); 
            display: none; 
            justify-content: center;
            align-items: flex-end; 
            z-index: 2000;
        }

        .category-content {
            background: white;
            width: 100%;
            max-width: 400px; 
            border-radius: 16px 16px 0 0; 
            max-height: 85vh; 
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .category-header {
            padding: 12px 20px; 
            border-bottom: 1px solid #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            background: white;
            z-index: 10;
        }

        .category-title {
            font-size: 18px;
            font-weight: 600;
            color: #1a1a1a;
            text-align: center;
            flex-grow: 1; 
        }

        .close-btn, .save-btn {
            font-size: 16px;
            font-weight: 600;
            color: #3b82f6; 
            background: none;
            border: none;
            cursor: pointer;
            padding: 8px; 
        }
        .close-btn { font-size: 20px; line-height: 1; } 
        .save-btn { font-size: 22px; line-height: 1; } 


        .transaction-preview {
            padding: 16px 20px;
            border-bottom: 1px solid #f3f4f6;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .preview-left {
            display: flex;
            align-items: center;
            gap: 12px;
            width: 100%;
        }
        .preview-left .merchant-icon { 
            width: 28px; 
            height: 28px;
        }
        .preview-left .merchant-icon i {
             width: 16px; 
             height: 16px;
        }
        .preview-left .merchant-name { 
            font-size: 14px; 
            font-weight: 500;
        }

        .preview-right {
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            gap: 8px;
        }
        
        .preview-amount {
            font-size: 18px; 
            font-weight: 700;
            color: #1a1a1a;
        }

        .preview-category-badge { 
            display: flex;
            align-items: center;
            gap: 6px;
            background: #f3f4f6;
            padding: 6px 10px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 500;
            color: #374151;
            flex-shrink: 0;
        }
        .preview-category-badge i { 
            width: 12px; 
            height: 12px; 
        }

        .preview-account-icon { 
            height: 18px; 
            font-size: 9px;
            padding: 5px;
            flex-shrink: 0;
            margin-left: auto;
        }


        .search-section {
            padding: 16px 20px;
            border-bottom: 1px solid #f3f4f6;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            font-size: 16px;
            outline: none;
        }
        .search-input::placeholder { color: #9ca3af; }

        .search-input:focus {
            border-color: #3b82f6; 
        }

        .categories-section {
            padding: 20px;
            flex-grow: 1; 
            overflow-y: auto;
        }

        .section-title {
            font-size: 14px;
            font-weight: 600;
            color: #6b7280; 
            margin-bottom: 16px;
        }

        .category-grid { /* For 'Most used' */
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); 
            gap: 12px;
            margin-bottom: 24px;
        }

        .category-chip {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 12px; 
            background: #f9fafb; 
            border: 1px solid #e5e7eb; 
            border-radius: 12px;
            font-size: 14px;
            font-weight: 500;
            color: #374151;
            cursor: pointer;
            transition: all 0.15s ease;
        }
        .category-chip i { width: 16px; height: 16px; color: #6b7280; }

        .category-chip:hover,
        .category-chip.selected {
            background: #eff6ff; 
            border-color: #3b82f6; 
            color: #1d4ed8; 
        }
        .category-chip.selected i { color: #1d4ed8; }


        .category-list { /* For main list of categories */
            display: flex;
            flex-direction: column;
            gap: 24px; 
        }

        .category-group-title {
            font-size: 16px;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 4px; 
        }

        .category-group-subtitle {
            font-size: 12px; 
            color: #6b7280;
            margin-bottom: 12px;
        }

        .subcategory-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(60px, 1fr)); 
            gap: 12px;
        }

        .subcategory-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 6px;
            padding: 10px 6px; 
            border-radius: 12px;
            cursor: pointer;
            transition: background-color 0.15s ease;
            position: relative;
        }
         .subcategory-item.selected::after { 
            content: '';
            position: absolute;
            bottom: 4px;
            left: 50%;
            transform: translateX(-50%);
            width: 6px;
            height: 6px;
            background-color: #3b82f6;
            border-radius: 50%;
        }


        .subcategory-item:hover {
            background: #f9fafb; 
        }

        .subcategory-icon-wrapper { 
            width: 40px; 
            height: 40px;
            background: #f3f4f6; 
            border-radius: 12px; 
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6b7280;
            font-size: 20px; 
        }
        .subcategory-icon-wrapper i { width: 20px; height: 20px;}


        .subcategory-name {
            font-size: 12px;
            font-weight: 500;
            color: #374151;
            text-align: center;
            line-height: 1.2;
            width: 100%; 
        }

        .subcategory-icon-wrapper .emoji-icon,
        .preview-category-badge .emoji-icon, 
        .category-badge .emoji-icon {
            font-size: 1.2em; 
            line-height: 1;
            vertical-align: middle;
        }

        .subcategory-icon-wrapper img.custom-icon,
        .preview-category-badge img.custom-icon,
        .category-badge img.custom-icon{
            width: 20px; 
            height: 20px;
            vertical-align: middle;
        }

        /* Styling for the actual logo image inside the container */
.account-item-icon img.custom-icon {
    max-width: 100%;   
    max-height: 100%;  
    object-fit: contain; /* Safest for not cropping logos */
    display: block;
}
        .category-chip .emoji-icon {
            font-size: 1em; 
        }
        .category-chip img.custom-icon {
            width: 16px;
            height: 16px;
        }

        /* Details Modal Styles */
        .details-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.4);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2500;
            padding: 20px;
        }

        .details-modal-content {
            background: #ffffff;
            width: 100%;
            max-width: 340px;
            border-radius: 16px;
            max-height: 85vh;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .details-modal-header {
            padding: 16px 20px 12px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            background: #ffffff;
            z-index: 10;
            border-radius: 16px 16px 0 0;
        }

        .details-modal-title {
            font-size: 16px;
            font-weight: 600;
            color: #000000;
            text-align: center;
            flex-grow: 1;
            margin-left: 24px; /* Compensate for close button */
        }

        .details-close-btn {
            font-size: 18px;
            font-weight: 400;
            color: #999999;
            background: none;
            border: none;
            cursor: pointer;
            padding: 4px;
            line-height: 1;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: color 0.2s;
        }

        .details-close-btn:hover {
            color: #666666;
        }

        .details-modal-body {
            padding: 0 20px 20px 20px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
            padding-bottom: 12px;
        }

        .detail-item:last-child {
            padding-bottom: 0;
        }

        .detail-label {
            color: #999999;
            font-weight: 400;
            font-size: 13px;
            line-height: 1.2;
        }

        .detail-value {
            color: #000000;
            font-weight: 500;
            font-size: 15px;
            line-height: 1.3;
            word-break: break-word;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Special styling for amount */
        .detail-item:has(#details-amount) .detail-value {
            font-size: 18px;
            font-weight: 600;
        }

        .detail-item .copy-btn {
            background: none;
            border: none;
            padding: 2px;
            cursor: pointer;
            color: #cccccc;
            display: flex;
            align-items: center;
            transition: all 0.2s;
            flex-shrink: 0;
        }

        .detail-item .copy-btn:hover {
            color: #999999;
        }

        .detail-item .copy-btn svg {
            width: 14px;
            height: 14px;
            stroke-width: 2;
        }

        /* Mobile responsiveness */
        @media (max-width: 480px) {
            .details-modal {
                padding: 16px;
            }
            
            .details-modal-content {
                max-width: none;
                border-radius: 12px;
            }
            
            .details-modal-header {
                padding: 14px 16px 10px 16px;
                border-radius: 12px 12px 0 0;
            }
            
            .details-modal-body {
                padding: 0 16px 16px 16px;
                gap: 14px;
            }
            
            .detail-item {
                padding-bottom: 10px;
            }
        }

        /* Account Selection Modal Styles */
.account-select-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none; /* Hidden by default */
    justify-content: center;
    align-items: flex-end; 
    z-index: 3000; /* Higher than other modals */
}

.account-select-modal-content {
    background: #f8f9fa; /* Light background for the sheet */
    width: 100%;
    max-width: 400px;
    border-radius: 16px 16px 0 0;
    max-height: 90vh; 
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
}

.account-select-modal-header {
    padding: 12px 20px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: sticky;
    top: 0;
    background: #f8f9fa; /* Match content background */
    z-index: 10;
}

.account-select-modal-title {
    font-size: 17px;
    font-weight: 600;
    color: #1a1a1a;
    text-align: center;
    flex-grow: 1;
}

.account-select-close-btn, .account-select-save-btn {
    font-size: 16px;
    font-weight: 600;
    color: #3b82f6; /* Blue, matching category modal */
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
}
.account-select-close-btn { font-size: 20px; line-height: 1; }
.account-select-save-btn { font-size: 22px; line-height: 1; }

#account-select-transaction-preview {
    background-color: white; 
    border-bottom: 1px solid #e5e7eb;
    padding: 16px 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    /* padding, etc., should be inherited from .transaction-preview */
}
#account-select-transaction-preview .merchant-icon { /* Ensure specific ID targeting if needed */
    width: 32px;
            height: 32px;
            background: #f3f4f6; /* Light grey background for icon */
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6b7280; /* Icon color */
}
/* ... other preview styles ... */


.account-select-modal-body {
    padding: 16px 20px 20px 20px;
    background-color: white; /* White background for the list area */
}

.account-select-prompt-title {
    font-size: 18px;
    font-weight: 600;
    color: #1a1a1a;
    text-align: center;
    margin-bottom: 8px;
}

.account-select-prompt-subtitle {
    font-size: 14px;
    color: #6b7280;
    text-align: center;
    line-height: 1.4;
    margin-bottom: 24px;
    max-width: 300px; /* Limit width for better readability */
    margin-left: auto;
    margin-right: auto;
}

#account-list-container {
    display: flex;
    flex-direction: column;
    gap: 16px; /* Space between account groups */
}


.account-group-title {
    font-size: 13px; /* Smaller title for account type groups */
    font-weight: 500;
    color: #6b7280;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 8px;
    padding-left: 4px; /* Slight indent */
}

.account-item {
    background-color: #f8f9fa; /* Slightly off-white for item background within white body */
    padding: 12px 16px;
    border-radius: 12px; /* Rounded corners for each item */
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.15s ease;
    border: 1px solid #e5e7eb;
    margin-bottom: 5px; /* Subtle border for each item */
}
.account-item:hover {
    background-color: #eff6ff; /* Light blue hover */
}
.account-item.selected {
    border-color: #3b82f6; /* Blue border for selected */
    background-color: #eff6ff;
}

.account-item-icon { 
    width: 40px;
    height: 40px;
    background: #fff;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    padding: 5px;
    box-sizing: border-box;
    border: 1px solid rgba(0, 0, 0, 0.08);
    box-shadow: 0 2px 4px rgba(0,0,0,0.07), inset 0 1px 1px rgba(255,255,255,0.5), inset 0 -1px 1px rgba(0,0,0,0.05);
}


.account-item-details {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

.account-item-name {
    font-size: 15px;
    font-weight: 500;
    color: #1a1a1a;
}

.account-item-last4 {
    font-size: 13px;
    color: #6b7280;
}

.account-item-radio {
    appearance: none;
    -webkit-appearance: none;
    width: 22px;
    height: 22px;
    border: 2px solid #c8c7cc; /* iOS-like grey border */
    border-radius: 50%;
    outline: none;
    cursor: pointer;
    margin-left: 16px;
    position: relative;
    flex-shrink: 0;
}

.account-item-radio:checked {
    border-color: #3b82f6; /* Blue border when checked */
    background-color: #3b82f6; /* Blue fill */
}

.account-item-radio:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 6px; /* Adjust size of inner dot */
    height: 6px;
    border-radius: 50%;
    background-color: white;
    transform: translate(-50%, -50%);
    display: block;
}

/* For the "Cash" item if it needs specific icon */
.account-item[data-account-type="CASH"] .account-item-icon i.feather {
    width: 18px; height: 18px;
}
    </style>
</head>

<body>
    <main class="container">
        <div class="card main-card">
            <div id="transaction-amount" class="amount">Loading...</div>
            <div class="category-badge" id="category-badge-main">
                <i data-feather="tag" id="main-category-icon"></i>
                <span id="main-category-name">Loading...</span>
            </div>
        </div>

        <div class="info-grid">
            <div class="info-item">
                <div class="info-label">FROM</div>
                <div class="info-value">
                    <div class="account-icon" id="from-account-icon-initial">..</div>
                    <span id="from-account-details">Loading...</span>
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">ON</div>
                <div class="info-value">
                    <span id="transaction-date">Loading...</span>
                </div>
            </div>
        </div>

        <div class="card paid-to-card" id="paid-to-card-action">
            <div class="paid-to-header">PAID TO</div>
            <div class="paid-to-content">
                <div class="paid-to-info">
                    <div class="merchant-icon">
                        <i data-feather="user"></i>
                    </div>
                    <div id="paid-to-merchant-name" class="merchant-name">Loading...</div>
                </div>
                <i data-feather="chevron-right" class="chevron"></i>
            </div>
        </div>

        <div class="card actions-card">
            <div class="action-item" id="account-in-action">
                <div class="action-left">
                    <i data-feather="calendar" class="action-icon"></i>
                    <span class="action-text">Account in</span>
                </div>
                <span id="account-in-date" class="action-date">Loading...</span>
                <i data-feather="chevron-right" class="chevron"></i>
            </div>
            <div class="action-item" id="more-details-action">
                <div class="action-left">
                    <i data-feather="info" class="action-icon"></i>
                    <span class="action-text">More Details</span>
                </div>
                <i data-feather="chevron-right" class="chevron"></i>
            </div>
        </div>


        <!-- Notes -->
        <div class="card notes-card">
            <div class="notes-header">
                <div class="notes-title-text">NOTES</div>
                <button class="add-receipt-btn">ADD RECEIPT</button>
            </div>
            <div class="notes-content">
                <textarea id="description" class="notes-textarea" placeholder="Something about this transaction you would like to recall later?"></textarea>
            </div>
        </div>

        <!-- Cash Flow Toggle -->
        <div class="card toggle-item-card">
            <div class="toggle-item">
                <div class="toggle-left">
                    <i data-feather="trending-down" class="toggle-icon"></i>
                    <div class="toggle-content">
                        <div class="toggle-title">Exclude from Cash Flow</div>
                        <div class="toggle-subtitle">Turn this on if you don't want this expense to affect your cash flow analysis.</div>
                    </div>
                </div>
                <label class="switch">
                    <input disabled type="checkbox" id="exclude-cashflow-toggle">
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    </main>

    <!-- Category Selection Modal -->
    <div class="category-modal" id="categoryModal">
        <div class="category-content">
            <div class="category-header">
                <button class="close-btn" id="closeModalBtn">✕</button>
                <div class="category-title">Tag transaction</div>
                <button class="save-btn" id="saveCategoryBtn">✓</button>
            </div>

            <div class="transaction-preview">
                <div class="preview-left">
                    <div class="merchant-icon" id="modal-merchant-icon-preview">
                        <i data-feather="user"></i>
                    </div>
                    <div>
                        <div class="merchant-name" id="modal-merchant-name-preview">Loading...</div>
                        <div style="font-size: 12px; color: #6b7280;" id="modal-transaction-time-preview">Loading...</div>
                    </div>
                </div>
                <div class="preview-right">
                    <div class="preview-amount" id="modal-amount-preview">Loading...</div>
                    <div class="preview-category-badge" id="modal-category-badge-preview">
                        <i data-feather="" id="modal-category-icon-preview"></i>
                        <span id="modal-category-name-preview">Loading...</span>
                    </div>
                    <div class="account-icon preview-account-icon" id="modal-account-icon-preview">..</div>
                </div>
            </div>

            <div class="search-section">
                <input type="text" id="category-search-input" class="search-input" placeholder="Search Bills, Categories...">
            </div>

            <div class="categories-section">
                <div id="most-used-categories-container">
                    <div class="section-title">Most used</div>
                    <div class="category-grid" id="most-used-category-grid">
                        <!-- Most used category chips will be populated here by JS -->
                    </div>
                </div>

                <div class="category-list" id="full-category-list">
                    <!-- Full category groups will be populated here by JS -->
                </div>
            </div>
        </div>
    </div>

    <!-- Transaction Details Modal -->
    <div class="details-modal" id="moreDetailsModal">
        <div class="details-modal-content">
            <div class="details-modal-header">
                <span class="details-modal-title">Transaction Details</span>
                <button class="details-close-btn" id="closeMoreDetailsModalBtn" onclick="hideModal()">×</button>
            </div>
            <div class="details-modal-body">
                <div class="detail-item">
                    <span class="detail-label">Summary</span>
                    <span class="detail-value" id="details-summary">Loading...</span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Transaction Type</span>
                    <span class="detail-value" id="details-type">Outgoing</span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Amount</span>
                    <span class="detail-value" id="details-amount">
                        Loading...
                        <button class="copy-btn" data-clipboard-target="#details-amount">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                            </svg>
                        </button>
                    </span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Debited From</span>
                    <span class="detail-value" id="details-debited-from">Loading...</span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Transferred To</span>
                    <span class="detail-value" id="details-transferred-to">
                        Lullu
                        <button class="copy-btn" data-clipboard-target="#details-transferred-to">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                            </svg>
                        </button>
                    </span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Narration</span>
                    <span class="detail-value" id="details-narration">
                        Loading...
                        <button class="copy-btn" data-clipboard-target="#details-narration">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                            </svg>
                        </button>
                    </span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Transaction ID</span>
                    <span class="detail-value" id="details-transaction-id">
                        Loading...
                        <button class="copy-btn" data-clipboard-target="#details-transaction-id">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2-2v1"></path>
                            </svg>
                        </button>
                    </span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Transaction Timestamp</span>
                    <span class="detail-value" id="details-timestamp">Loading...</span>
                </div>

                <div class="detail-item">
                    <span class="detail-label">Transaction Mode</span>
                    <span class="detail-value" id="details-mode">Loading...</span>
                </div>

                <div style="display: none;" class="detail-item">
                    <span class="detail-label">Reference/UTR</span>
                    <span class="detail-value" id="details-reference-utr">
                        Loading...
                        <button class="copy-btn" data-clipboard-target="#details-reference-utr">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                            </svg>
                        </button>
                    </span>
                </div>
            </div>
        </div>
    </div>

    <!-- Account Selection Modal -->
    <div class="account-select-modal" id="accountSelectModal">
        <div class="account-select-modal-content">
            <div class="account-select-modal-header">
                <button class="account-select-close-btn" id="closeAccountSelectModalBtn">✕</button>
                <span class="account-select-modal-title">Choose source</span>
                <button class="account-select-save-btn" id="saveAccountSelectionBtn">✓</button>
            </div>
            <div class="transaction-preview" id="account-select-transaction-preview">
                <div class="preview-left">
                    <div class="merchant-icon" id="account-select-merchant-icon-preview">
                        <i data-feather="user"></i>
                    </div>
                    <div>
                        <div class="merchant-name" id="account-select-merchant-name-preview">Loading...</div>
                        <div style="font-size: 12px; color: #6b7280;" id="account-select-transaction-time-preview">Loading...</div>
                    </div>
                </div>
                <div class="preview-right">
                    <div class="preview-amount" id="account-select-amount-preview">Loading...</div>
                    <div class="preview-category-badge" id="account-select-category-badge-preview">
                        <i data-feather="briefcase" id="account-select-category-icon-preview"></i>
                        <span id="account-select-category-name-preview">Loading...</span>
                    </div>
                    <div class="account-icon preview-account-icon" id="account-select-current-account-icon-preview">P</div>
                </div>
            </div>

            <div class="account-select-modal-body">
                <h3 class="account-select-prompt-title">What's the source for this transaction?</h3>
                <p class="account-select-prompt-subtitle">
                    Transaction will be linked to your chosen source. You can change the source or delete this transaction later if you wish.
                </p>
                <div id="account-list-container">
                    <!-- Accounts will be populated here by JS -->
                    <!-- Example Group Structure:
                    <div class="account-group">
                        <h4 class="account-group-title">Credit cards</h4>
                        <div class="account-item" data-account-id="123">
                            <div class="account-item-icon" style="background-color: #007AFF;">S</div>
                            <div class="account-item-details">
                                <span class="account-item-name">SBI CASHBACK</span>
                                <span class="account-item-last4">***0400</span>
                            </div>
                            <input type="radio" name="selectedAccount" value="123" class="account-item-radio">
                        </div>
                    </div>
                    -->
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
    'use strict';
    const tg = window.Telegram.WebApp;
    if (tg.initDataUnsafe?.user) {
        tg.expand();
        tg.setHeaderColor('#f8f9fa');
        tg.setBackgroundColor('#f8f9fa');
    }

    // --- DOM Elements ---
    const loadingOverlay = document.getElementById('loading-overlay');

    const transactionAmountEl = document.getElementById('transaction-amount');
    const mainCategoryIconEl = document.getElementById('main-category-icon');
    const mainCategoryNameEl = document.getElementById('main-category-name');
    const fromAccountIconInitialEl = document.getElementById('from-account-icon-initial');
    const fromAccountDetailsEl = document.getElementById('from-account-details');
    const transactionDateEl = document.getElementById('transaction-date');
    const paidToMerchantNameEl = document.getElementById('paid-to-merchant-name');
    const accountInDateEl = document.getElementById('account-in-date');
    const descriptionTextarea = document.getElementById('description');
    const categoryBadgeMain = document.getElementById('category-badge-main');
    const excludeCashflowToggle = document.getElementById('exclude-cashflow-toggle');

    // Category Modal elements
    const categoryModal = document.getElementById('categoryModal');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const saveCategoryBtn = document.getElementById('saveCategoryBtn');
    const modalMerchantNamePreviewEl = document.getElementById('modal-merchant-name-preview');
    const modalTransactionTimePreviewEl = document.getElementById('modal-transaction-time-preview');
    const modalAmountPreviewEl = document.getElementById('modal-amount-preview');
    const modalCategoryIconPreviewEl = document.getElementById('modal-category-icon-preview');
    const modalCategoryNamePreviewEl = document.getElementById('modal-category-name-preview');
    const modalAccountIconPreviewEl = document.getElementById('modal-account-icon-preview');
    const mostUsedCategoryGridEl = document.getElementById('most-used-category-grid');
    const fullCategoryListEl = document.getElementById('full-category-list');
    const categorySearchInputEl = document.getElementById('category-search-input');
    const mostUsedCategoriesContainerEl = document.getElementById('most-used-categories-container');

    const moreDetailsModalEl = document.getElementById('moreDetailsModal');
    const closeMoreDetailsModalBtn = document.getElementById('closeMoreDetailsModalBtn');
    const moreDetailsActionItem = document.getElementById('more-details-action');

    // DOM elements for detail values
    const detailsSummaryEl = document.getElementById('details-summary');
    const detailsTypeEl = document.getElementById('details-type');
    const detailsAmountEl = document.getElementById('details-amount');
    const detailsDebitedFromEl = document.getElementById('details-debited-from');
    const detailsTransferredToEl = document.getElementById('details-transferred-to');
    const detailsNarrationEl = document.getElementById('details-narration');
    const detailsTransactionIdEl = document.getElementById('details-transaction-id');
    const detailsTimestampEl = document.getElementById('details-timestamp');
    const detailsModeEl = document.getElementById('details-mode');
    const detailsReferenceUtrEl = document.getElementById('details-reference-utr');

    const fromInfoItemEl = document.querySelector('.info-grid .info-item:first-child');
    const accountSelectModalEl = document.getElementById('accountSelectModal');
    const closeAccountSelectModalBtn = document.getElementById('closeAccountSelectModalBtn');
    const saveAccountSelectionBtn = document.getElementById('saveAccountSelectionBtn');
    const accountListContainerEl = document.getElementById('account-list-container');

    // Preview elements in Account Select Modal
    const accSelMerchantIconPreviewEl = document.getElementById('account-select-merchant-icon-preview');
    const accSelMerchantNamePreviewEl = document.getElementById('account-select-merchant-name-preview');
    const accSelTransactionTimePreviewEl = document.getElementById('account-select-transaction-time-preview');
    const accSelAmountPreviewEl = document.getElementById('account-select-amount-preview');
    const accSelCategoryIconPreviewEl = document.getElementById('account-select-category-icon-preview');
    const accSelCategoryNamePreviewEl = document.getElementById('account-select-category-name-preview');
    const accSelCurrentAccountIconPreviewEl = document.getElementById('account-select-current-account-icon-preview');


    // --- STATE ---
    let currentTransaction = null;
    let access_token = '';
    let allUserAccounts = [];
    let tempSelectedAccountId = null;
    const API_BASE_URL = 'https://finance.arlp.live/api/v1';

    let allCategoriesStructured = []; // Stores fetched categories: Array of {id, name, description, icon (for parent if any), display_order, subcategories: [{id, name, icon_name, display_order}]}
    let tempSelectedSubcategoryId = null; // Stores ID of SUBCATEGORY selected in modal
    let dataChangedInModal = {
        subcategory: false,
    };

    function getCurrenncySymbol(currency_type){
        if (currency_type === "USD"){
            return "$"
        }
        return "₹"
    }


    // --- MAIN ---
    async function initialize() {
        setLoading(true);
        try {
            const urlParams = new URLSearchParams(window.location.search);
            access_token = urlParams.get('token');

            if (!access_token && !tg.initDataUnsafe?.user) {
                console.warn("Access token not found. Running in local mode.");
                currentTransaction = getMockTransactionWithSubcategory();
                allCategoriesStructured = getMockStructuredCategories();
            } else if (!access_token && tg.initDataUnsafe?.user) {
                throw new Error("Access token not found.");
            } else {
                [currentTransaction, allCategoriesStructured, allUserAccounts] = await Promise.all([
                    fetchTransactionAPI(),
                    fetchAllCategoriesDetailsAPI(),
                    fetchAllUserAccountsAPI()
                ]);
            }

            // Initialize tempSelectedSubcategoryId from current transaction
            if (currentTransaction.subcategory && currentTransaction.subcategory.id) {
                tempSelectedSubcategoryId = currentTransaction.subcategory.id;
            } else {
                // Find the "Uncategorized" subcategory under "General" from allCategoriesStructured
                const generalCat = allCategoriesStructured.find(c => c.name.toLowerCase() === 'general');
                if (generalCat && generalCat.subcategories) {
                    const uncategorizedSub = generalCat.subcategories.find(sc => sc.name.toLowerCase() === 'uncategorized');
                    if (uncategorizedSub) {
                        tempSelectedSubcategoryId = uncategorizedSub.id;
                        if (!currentTransaction.subcategory) {
                            currentTransaction.subcategory = {
                                ...uncategorizedSub,
                                parent_category_name: generalCat.name
                            };
                        }
                    }
                }
            }

            populateUI(currentTransaction);
            configureMainButton();
            setupEventListeners();
        } catch (error) {
            console.error("Initialization error:", error);
            showError(error.message);
        } finally {
            setLoading(false);
            feather.replace({
                width: '1em',
                height: '1em',
                'stroke-width': 1.8
            });
        }
    }

    function getMockTransactionWithSubcategory() {
        return {
            unique_hash: 'mock_hash_123',
            merchant_vpa: 'MOCK MERCHANT A',
            amount: 140.00,
            description: 'Mock tea at office',
            subcategory: {
                id: 1101,
                name: 'Tea & Coffee',
                icon_name: 'emoji:☕',
                parent_category_id: 101,
                parent_category_name: 'Food & Drinks'
            },
            account: {
                id: 1,
                name: 'MockBank',
                account_last4: '0214',
                type_initial: 'M',
                account_type: 'SAVINGS_ACCOUNT'
            },
            transaction_datetime_from_sms: new Date().toISOString(),
            exclude_from_cashflow: false,
            currency: 'INR',
            status: 'processed',
            raw_sms_content: 'mock sms',
            received_at: new Date().toISOString(),
            subcategory_id: 1101,
            account_id: 1
        };
    }

    function getMockStructuredCategories() {
        return [{
                id: 100,
                name: 'General',
                description: 'Default items',
                display_order: 999,
                subcategories: [{
                    id: 1000,
                    name: 'Uncategorized',
                    icon_name: 'fthr:tag',
                    display_order: 0,
                    parent_category_id: 100
                }, ]
            },
            {
                id: 101,
                name: 'Food & Drinks',
                description: 'Eating out, Swiggy, Zomato etc.',
                display_order: 0,
                subcategories: [{
                        id: 1101,
                        name: 'Eating out',
                        icon_name: 'emoji:🍽️',
                        display_order: 0,
                        parent_category_id: 101
                    },
                    {
                        id: 1102,
                        name: 'Tea & Coffee',
                        icon_name: 'emoji:☕',
                        display_order: 1,
                        parent_category_id: 101
                    },
                ]
            },
            {
                id: 102,
                name: 'Groceries',
                description: 'Supermarket, daily needs',
                display_order: 1,
                subcategories: [{
                    id: 1201,
                    name: 'Staples',
                    icon_name: 'fthr:archive',
                    display_order: 0,
                    parent_category_id: 102
                }, ]
            },
        ];
    }

    // --- API ---
    async function fetchTransactionAPI() {
        const response = await fetch(`${API_BASE_URL}/transactions/get/by-token`, {
            headers: {
                'Authorization': `Bearer ${access_token}`
            },
        });
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({
                detail: response.statusText
            }));
            throw new Error(`API Error fetching transaction: ${errorData.detail || response.statusText}`);
        }
        const txnData = await response.json();

        if (!txnData.subcategory) {
            const generalCat = allCategoriesStructured.find(c => c.name.toLowerCase() === 'general') || {
                name: 'General'
            };
            const uncategorizedSub = generalCat.subcategories ? generalCat.subcategories.find(sc => sc.name.toLowerCase() === 'uncategorized') : null;
            txnData.subcategory = uncategorizedSub ? {
                ...uncategorizedSub,
                parent_category_name: generalCat.name,
                parent_category_id: generalCat.id
            } : {
                id: null,
                name: 'Uncategorized',
                icon_name: 'fthr:circle',
                parent_category_name: 'General',
                parent_category_id: null
            };
            if (uncategorizedSub) txnData.subcategory_id = uncategorizedSub.id;
        }
        return txnData;
    }

    async function fetchAllCategoriesDetailsAPI() {
        const response = await fetch(`${API_BASE_URL}/categories/all_details`, {});
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({
                detail: response.statusText
            }));
            throw new Error(`API Error fetching categories: ${errorData.detail || response.statusText}`);
        }
        return await response.json();
    }

    async function updateTransactionAPI(patchData) {
        const response = await fetch(`${API_BASE_URL}/transactions/by-token`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${access_token}`
            },
            body: JSON.stringify(patchData),
        });
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({
                detail: response.statusText
            }));
            throw new Error(`API Error: ${errorData.detail || response.statusText}`);
        }
        return await response.json();
    }

    // --- API for Accounts ---
    async function fetchAllUserAccountsAPI() {

        try {
            const response = await fetch(`${API_BASE_URL}/accounts/for-mini-app`, {
                headers: {
                    'Authorization': `Bearer ${access_token}`
                },
            });
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({
                    detail: response.statusText
                }));
                throw new Error(`API Error fetching accounts: ${errorData.detail || response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            console.error("Failed to fetch accounts, using mock:", error);
            showError("Could not load accounts. Using sample data.");
            return getMockUserAccounts();
        }
    }

    function getMockUserAccounts() {
        return [{
                id: 1,
                name: 'HDFC Salary',
                account_type: 'SAVINGS_ACCOUNT',
                bank_name: 'HDFC Bank',
                account_last4: '0000',
                type_initial: 'H'
            },
            {
                id: 2,
                name: 'ICICI Amazon Pay',
                account_type: 'CREDIT_CARD',
                bank_name: 'ICICI Bank',
                account_last4: '0000',
                type_initial: 'I'
            },
            {
                id: 3,
                name: 'SBI Cashback Card',
                account_type: 'CREDIT_CARD',
                bank_name: 'SBI',
                account_last4: '0400',
                type_initial: 'S'
            },
            {
                id: 4,
                name: 'IDFC Select',
                account_type: 'CREDIT_CARD',
                bank_name: 'IDFC FIRST Bank',
                account_last4: '0000',
                type_initial: 'I'
            },
            {
                id: 5,
                name: 'Cash Wallet',
                account_type: 'CASH',
                bank_name: 'Cash',
                account_last4: '',
                type_initial: 'C'
            },
            {
                id: 6,
                name: 'Federal Bank Savings',
                account_type: 'SAVINGS_ACCOUNT',
                bank_name: 'Federal Bank',
                account_last4: '0000',
                type_initial: 'F'
            },
        ];
    }

    // --- UI HELPERS ---
    function setLoading(isLoading) {
        loadingOverlay.style.display = isLoading ? 'flex' : 'none';
    }

    function showError(message) {
        if (tg.initDataUnsafe?.user) {
            tg.showAlert(message);
        } else {
            alert(message); // Fallback for local testing
        }
        if (tg.MainButton) tg.MainButton.hide();
    }

    function populateUI(transaction) {
        if (!transaction) return;
        transactionAmountEl.textContent = `-${getCurrenncySymbol(transaction.currency_type)}${Math.round(transaction.amount)}`;

        if (transaction.subcategory && transaction.subcategory.name) {
            const displayName = transaction.subcategory.parent_category_name && transaction.subcategory.parent_category_name.toLowerCase() !== 'general' ?
                `${transaction.subcategory.parent_category_name} (${transaction.subcategory.name})` :
                transaction.subcategory.name;
            mainCategoryNameEl.textContent = displayName.toUpperCase();
            var parsedIcon = parseIconName(transaction.subcategory.icon_name);
            if (parsedIcon.type === 'feather') {
                mainCategoryIconEl.outerHTML = `<i data-feather="${parsedIcon.name}" id="modal-category-icon-preview"></i>`;
            } else if (parsedIcon.type === 'emoji') {
                mainCategoryIconEl.outerHTML = `<span id="modal-category-icon-preview" class="emoji-icon">${parsedIcon.name}</span>`;
            }
        } else {
            mainCategoryNameEl.textContent = 'UNCATEGORIZED';
            mainCategoryIconEl.setAttribute('data-feather', 'circle');
        }

        if (transaction.account) {
            fromAccountDetailsEl.textContent = `***${transaction.account.account_last4}`;
            const accInitial = transaction.account.type_initial ||
                (transaction.account.bank_name ? transaction.account.bank_name.split(" ")[0].toUpperCase() :
                    (transaction.account.name ? transaction.account.name.split(" ")[0].toUpperCase() : 'A'));
            fromAccountIconInitialEl.textContent = accInitial;
        } else {
            fromAccountDetailsEl.textContent = '***0000';
            fromAccountIconInitialEl.textContent = 'A';
        }

        paidToMerchantNameEl.textContent = transaction.merchant_vpa || 'Unknown Merchant';
        descriptionTextarea.value = transaction.description || '';
        excludeCashflowToggle.checked = transaction.exclude_from_cashflow || false;

        if (transaction.transaction_datetime_from_sms) {
            const date = new Date(transaction.transaction_datetime_from_sms);
            transactionDateEl.textContent = date.toLocaleDateString('en-GB', {
                weekday: 'short',
                month: 'short',
                day: 'numeric',
                year: '2-digit'
            }).replace(/,/g, '');

            accountInDateEl.textContent = date.toLocaleDateString('en-US', {
                month: 'short',
                year: 'numeric'
            });
        } else {
            transactionDateEl.textContent = 'No Date';
            accountInDateEl.textContent = 'N/A';
        }

        feather.replace({
            width: '1em',
            height: '1em',
            'stroke-width': 1.8
        });
    }

    function populateCategoryModalPreview(transaction) {
        if (!transaction) return;
        modalMerchantNamePreviewEl.textContent = transaction.merchant_vpa || 'Unknown';
        
        modalAmountPreviewEl.textContent = `-${getCurrenncySymbol(transaction.currency_type)}${Math.round(transaction.amount)}`;

        if (transaction.account) {
            modalAccountIconPreviewEl.textContent = transaction.account.type_initial || transaction.account.name?.split(" ")[0].toUpperCase() || 'A';
        } else {
            modalAccountIconPreviewEl.textContent = 'A';
        }

        if (transaction.transaction_datetime_from_sms) {
            const date = new Date(transaction.transaction_datetime_from_sms);
            modalTransactionTimePreviewEl.textContent = date.toLocaleTimeString('en-US', {
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            });
        } else {
            modalTransactionTimePreviewEl.textContent = "Time N/A";
        }

        // Use tempSelectedSubcategoryId to reflect live changes in modal preview
        let subcatToPreview = null;
        if (tempSelectedSubcategoryId) {
            for (const parentCat of allCategoriesStructured) {
                subcatToPreview = parentCat.subcategories.find(sc => sc.id === tempSelectedSubcategoryId);
                if (subcatToPreview) {
                    subcatToPreview.parent_category_name = parentCat.name;
                    break;
                }
            }
        }
        // Fallback to current transaction's subcategory if nothing temporarily selected or found
        if (!subcatToPreview) subcatToPreview = transaction.subcategory;


        if (subcatToPreview && subcatToPreview.name) {
            const displayName = subcatToPreview.parent_category_name && subcatToPreview.parent_category_name.toLowerCase() !== 'general' ?
                `${subcatToPreview.parent_category_name} (${subcatToPreview.name})` :
                subcatToPreview.name;
            modalCategoryNamePreviewEl.textContent = displayName.toUpperCase();
            const parsedIcon = parseIconName(subcatToPreview.icon_name);
            if (parsedIcon.type === 'feather') {
                modalCategoryIconPreviewEl.outerHTML = `<i data-feather="${parsedIcon.name}" id="modal-category-icon-preview"></i>`;
            } else if (parsedIcon.type === 'emoji') {
                modalCategoryIconPreviewEl.outerHTML = `<span id="modal-category-icon-preview" class="emoji-icon">${parsedIcon.name}</span>`;
            }
        } else {
            modalCategoryNamePreviewEl.textContent = 'UNCATEGORIZED';
            modalCategoryIconPreviewEl.outerHTML = `<i data-feather="circle" id="modal-category-icon-preview"></i>`;
        }
        feather.replace({
            width: '1em',
            height: '1em',
            'stroke-width': 1.8
        });
    }

    function populateMoreDetailsModal(transaction) {
        if (!transaction) return;

        const transactionDate = new Date(transaction.transaction_datetime_from_sms);
        const formattedDate = transactionDate.toLocaleDateString('en-GB', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });

        detailsSummaryEl.textContent = `You transferred ${getCurrenncySymbol(transaction.currency_type)}${Math.round(transaction.amount)} to ${transaction.merchant_vpa || 'Unknown'} on ${formattedDate}`;
        // detailsTypeEl is static "Outgoing" for now

        detailsAmountEl.textContent = transaction.amount.toFixed(2);

        if (transaction.account) {
            detailsDebitedFromEl.textContent = `${transaction.account.name || 'Unknown Account'} (***${transaction.account.account_last4 || '0000'})`;
        } else {
            detailsDebitedFromEl.textContent = 'N/A';
        }

        detailsTransferredToEl.textContent = transaction.merchant_vpa || 'N/A';

        // --- Fields needing backend support ---
        // For now, use placeholders or existing fields.
        // These should ideally come from new fields on the Transaction model/schema:
        // transaction.narration, transaction.bank_reference_id, transaction.transaction_mode
        detailsNarrationEl.textContent = transaction.description || transaction.raw_sms_content.substring(0, 100) || 'N/A';
        detailsTransactionIdEl.textContent = transaction.bank_reference_id || transaction.unique_hash || 'N/A'; 
        detailsModeEl.textContent = transaction.transaction_mode || (transaction.account ? capitalizeFirstLetter(transaction.account.account_type) : 'Unknown');

        detailsTimestampEl.textContent = transactionDate.toLocaleString('en-GB', {
            day: 'numeric',
            month: 'short',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
            hour12: true
        }).replace(/,/g, '');

        // detailsReferenceUtrEl.textContent = transaction.reference_utr || 'N/A'; // Placeholder

        feather.replace({
            width: '1em',
            height: '1em',
            'stroke-width': 1.8
        }); // Re-run for copy icons
    }

    function capitalizeFirstLetter(str) {
        if (!str) {
            return str;
        }

        return `${str.split("_")[0].substring(0, 1).toUpperCase()+str.split("_")[0].substring(1)} ${str.split("_")[1].substring(0, 1).toUpperCase() + str.split("_")[1].substring(1)}`;
    }

    // --- UI Population for Account Select Modal ---
    function populateAccountSelectModalPreview(transaction, selectedAccountId) {
        if (!transaction) return;

        // Merchant, Time, Amount, Category - from currentTransaction
        accSelMerchantNamePreviewEl.textContent = transaction.merchant_vpa || 'Unknown';
        if (transaction.transaction_datetime_from_sms) {
            const date = new Date(transaction.transaction_datetime_from_sms);
            accSelTransactionTimePreviewEl.textContent = date.toLocaleTimeString('en-US', {
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            });
        } else {
            accSelTransactionTimePreviewEl.textContent = "Time N/A";
        }
        accSelAmountPreviewEl.textContent = `-${getCurrenncySymbol(transaction.currency_type)}${Math.round(transaction.amount)}`;

        if (transaction.subcategory) {
            accSelCategoryNamePreviewEl.textContent = (transaction.subcategory.parent_category_name && transaction.subcategory.parent_category_name.toLowerCase() !== 'general' ? `${transaction.subcategory.parent_category_name} (${transaction.subcategory.name})` : transaction.subcategory.name).toUpperCase();
            const catIcon = parseIconName(transaction.subcategory.icon_name);
            accSelCategoryIconPreviewEl.outerHTML = createIconElementHTML(catIcon, 'account-select-category-icon-preview');
        } else {
            accSelCategoryNamePreviewEl.textContent = 'UNCATEGORIZED';
            accSelCategoryIconPreviewEl.outerHTML = createIconElementHTML(parseIconName('circle'), 'account-select-category-icon-preview');
        }

        // Account Icon - reflects the *temporarily selected* account in the modal
        let accountForPreview = allUserAccounts.find(acc => acc.id === selectedAccountId);
        if (!accountForPreview && transaction.account) { // Fallback to current transaction's account if no temp selection
            accountForPreview = transaction.account;
        }

        if (accountForPreview) {
            const initial = accountForPreview.type_initial || accountForPreview.bank_name?.split(" ")[0].toUpperCase() || accountForPreview.name?.split(" ")[0].toUpperCase() || 'A';
            accSelCurrentAccountIconPreviewEl.textContent = initial;
            accSelCurrentAccountIconPreviewEl.className = `account-icon preview-account-icon ${getBankIconClass(accountForPreview.bank_name, accountForPreview.account_type)}`;

        } else {
            accSelCurrentAccountIconPreviewEl.textContent = '?';
            accSelCurrentAccountIconPreviewEl.className = 'account-icon preview-account-icon bank-icon-default';
        }
        feather.replace({
            width: '1em',
            height: '1em',
            'stroke-width': 1.8
        });
    }

    function getBankIconClass(bankName, accountType) {
        if (accountType === 'CASH') return 'bank-icon-cash';
        const name = bankName?.toLowerCase() || '';
        if (name.includes('hdfc') && name.includes('dinner club')) return 'brand/diners-club.svg';
        if (name.includes('hdfc')) return 'brand/hdfc.svg';
        if (name.includes('icici') && name.includes('amazon')) return 'brand/amazon-icici-cc.svg';
        if (name.includes('icici')) return 'brand/icici.svg';
        if (name.includes('sbi') && name.includes('cashback')) return 'brand/sbi-cashback.svg';
        if (name.includes('sbi')) return 'brand/sbi.svg';
        if (name.includes('idfc')) return 'brand/idfc.svg';
        if (name.includes('federal') && name.includes('jupiter')) return 'brand/jupiter-fed.svg';
        if (name.includes('federal') && name.includes('fi')) return 'brand/fi-fed.svg';
        if (name.includes('federal')) return 'brand/federal-bank-savings.svg';
        if (name.includes('amex') || name.includes('american express')) return 'brand/american-express.svg';
        return 'bank-icon-default';
    }

    function createIconElementHTML(parsedIcon, elementId) { // Helper to generate outerHTML string
        if (parsedIcon.type === 'feather') {
            return `<i data-feather="${parsedIcon.name || 'circle'}" id="${elementId}"></i>`;
        } else if (parsedIcon.type === 'emoji') {
            return `<span id="${elementId}" class="emoji-icon">${parsedIcon.name}</span>`;
        } else if (parsedIcon.type === 'image') {
            return `<img src="/static/images/icons/${parsedIcon.name}" alt="${parsedIcon.name.split('/').pop().split('.')[0]}" id="${elementId}" class="custom-icon">`;
        }
        return `<i data-feather="circle" id="${elementId}"></i>`; // Fallback
    }


    function populateAccountsInModalList(accounts, currentAccountId) {
        accountListContainerEl.innerHTML = '';

        const groupedAccounts = accounts.reduce((acc, account) => {
            const type = account.account_type || 'UNKNOWN';
            if (!acc[type]) {
                acc[type] = [];
            }
            acc[type].push(account);
            return acc;
        }, {});



        // Define preferred order for account types
        const accountTypeOrder = ['savings_account', 'wallet', 'credit_card', 'unknown'];
        accountTypeOrder.forEach(accountTypeKey => {
            const accountsInGroup = groupedAccounts[accountTypeKey];
            if (accountsInGroup && accountsInGroup.length > 0) {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'account-group';

                const title = document.createElement('h4');
                title.className = 'account-group-title';

                let groupName = accountTypeKey.replace('_', ' ').toLowerCase();
                groupName = groupName.charAt(0).toUpperCase() + groupName.slice(1) + (groupName.endsWith('s') ? '' : 's');
                if (accountTypeKey === 'CASH') groupName = 'Cash';
                title.textContent = groupName;
                groupDiv.appendChild(title);


                accountsInGroup.forEach(acc => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'account-item';
                    itemDiv.dataset.accountId = acc.id;
                    if (acc.id === currentAccountId) {
                        itemDiv.classList.add('selected');
                    }
                    itemDiv.dataset.accountType = acc.account_type;

                    const iconName = getBankIconClass(acc.name, acc.account_type);

                    itemDiv.innerHTML = `
                            <div class="account-item-icon">
                            <img class="custom-icon" src="/static/images/icons/${iconName}" alt="${iconName.split('/').pop().split('.')[0]}">
                            </div>
                            <div class="account-item-details">
                                <span class="account-item-name">${acc.name}</span>
                                ${acc.account_last4 ? `<span class="account-item-last4">***${acc.account_last4}</span>` : ''}
                            </div>
                            <input type="radio" name="selectedAccountRadio" value="${acc.id}" class="account-item-radio" ${acc.id === currentAccountId ? 'checked' : ''}>
                        `;
                    itemDiv.addEventListener('click', handleAccountItemClick);
                    groupDiv.appendChild(itemDiv);
                });
                console.log(accountListContainerEl)
                accountListContainerEl.appendChild(groupDiv);
            }
        });
        feather.replace({
            width: '1em',
            height: '1em',
            'stroke-width': 1.8
        });
    }

    function handleAccountItemClick(event) {
        const clickedItem = event.currentTarget;
        const accountId = parseInt(clickedItem.dataset.accountId);

        // Unselect previous
        document.querySelectorAll('#account-list-container .account-item.selected').forEach(el => el.classList.remove('selected'));
        document.querySelectorAll('#account-list-container .account-item-radio:checked').forEach(radio => radio.checked = false);

        // Select current
        clickedItem.classList.add('selected');
        const radio = clickedItem.querySelector('.account-item-radio');
        if (radio) radio.checked = true;

        tempSelectedAccountId = accountId;
        dataChangedInModal.account = true; // Mark that account choice has changed
        populateAccountSelectModalPreview(currentTransaction, tempSelectedAccountId);
    }

    function setupClipboard() {
        document.querySelectorAll('.copy-btn').forEach(button => {
            button.addEventListener('click', () => {
                const targetSelector = button.dataset.clipboardTarget;
                const targetElement = document.querySelector(targetSelector);
                if (targetElement) {
                    navigator.clipboard.writeText(targetElement.textContent)
                        .then(() => {
                            // Optional: Show a "Copied!" message or change icon
                            const originalIcon = button.innerHTML;
                            button.innerHTML = '<i data-feather="check" style="color: green;"></i>';
                            feather.replace({
                                width: '1em',
                                height: '1em',
                                'stroke-width': 1.8
                            });
                            setTimeout(() => {
                                button.innerHTML = originalIcon;
                                feather.replace({
                                    width: '1em',
                                    height: '1em',
                                    'stroke-width': 1.8
                                });
                            }, 1500);
                        })
                        .catch(err => console.error('Failed to copy: ', err));
                }
            });
        });
    }

    function parseIconName(iconString) {
        if (!iconString) return {
            type: 'feather',
            name: 'circle'
        };
        if (iconString.startsWith('fthr:')) return {
            type: 'feather',
            name: iconString.substring(5)
        };
        if (iconString.startsWith('img:')) return {
            type: 'image',
            name: iconString.substring(4)
        };
        if (iconString.startsWith('emoji:')) return {
            type: 'emoji',
            name: iconString.substring(6)
        };
        const emojiRegex = /[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F900}-\u{1F9FF}\u{1F1E0}-\u{1F1FF}]/u;
        if (emojiRegex.test(iconString)) return {
            type: 'emoji',
            name: iconString
        };

        return {
            type: 'feather',
            name: iconString
        };
    }

    function createIconElement(iconString) {
        const parsed = parseIconName(iconString);
        if (parsed.type === 'feather') {
            return `<i data-feather="${parsed.name || 'circle'}"></i>`;
        } else if (parsed.type === 'emoji') {
            return `<span class="emoji-icon">${parsed.name}</span>`;
        } else if (parsed.type === 'image') {
            // Assuming images are in a known path e.g., /static/images/icons/
            return `<img src="/static/images/icons/${parsed.name}" alt="${parsed.name.split('/').pop().split('.')[0]}" class="custom-icon">`;
        }
        return `<i data-feather="circle"></i>`;
    }


    function populateCategoriesInModal(categoriesToDisplay) {
        mostUsedCategoryGridEl.innerHTML = '';
        fullCategoryListEl.innerHTML = '';

        // TODO: For "Most Used" needs a proper mechanism. For now, skip or use a few from first category.
        // Example: take first 2 subcategories from first 2 parent categories if they exist
        let mostUsedCount = 0;
        if (categoriesToDisplay.length > 0) {
            mostUsedCategoriesContainerEl.style.display = 'block';
            for (const parentCat of categoriesToDisplay) {
                if (parentCat.subcategories && parentCat.subcategories.length > 0) {
                    for (const subCat of parentCat.subcategories.slice(0, 2)) {
                        if (mostUsedCount >= 4) break;
                        const chip = document.createElement('div');
                        chip.className = 'category-chip';
                        chip.dataset.subcategoryId = subCat.id;
                        chip.innerHTML = `${createIconElement(subCat.icon_name)} ${subCat.name.toUpperCase()}`;
                        if (subCat.id === tempSelectedSubcategoryId) {
                            chip.classList.add('selected');
                        }
                        chip.addEventListener('click', handleSubcategorySelection);
                        mostUsedCategoryGridEl.appendChild(chip);
                        mostUsedCount++;
                    }
                }
                if (mostUsedCount >= 4) break;
            }
        } else {
            mostUsedCategoriesContainerEl.style.display = 'none';
        }


        categoriesToDisplay.forEach(parentCat => {
            if (parentCat.name.toLowerCase() === 'general' && parentCat.subcategories.some(sc => sc.name.toLowerCase() === 'uncategorized' && sc.id === tempSelectedSubcategoryId)) {
                // Optionally skip showing "General (Uncategorized)" in the main list if it's the current selection
                // Or always show it. For now, let's show all.
            }

            const groupDiv = document.createElement('div');
            groupDiv.className = 'category-group';

            const titleDiv = document.createElement('div');
            titleDiv.className = 'category-group-title';
            titleDiv.textContent = parentCat.name;
            groupDiv.appendChild(titleDiv);

            if (parentCat.description) {
                const subtitleDiv = document.createElement('div');
                subtitleDiv.className = 'category-group-subtitle';
                subtitleDiv.textContent = parentCat.description;
                groupDiv.appendChild(subtitleDiv);
            }

            const subcategoryGridDiv = document.createElement('div');
            subcategoryGridDiv.className = 'subcategory-grid';

            parentCat.subcategories.forEach(subCat => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'subcategory-item';
                itemDiv.dataset.subcategoryId = subCat.id;
                itemDiv.innerHTML = `
                            <div class="subcategory-icon-wrapper">${createIconElement(subCat.icon_name)}</div>
                            <div class="subcategory-name">${subCat.name}</div>
                        `;
                if (subCat.id === tempSelectedSubcategoryId) {
                    itemDiv.classList.add('selected');
                }
                itemDiv.addEventListener('click', handleSubcategorySelection);
                subcategoryGridDiv.appendChild(itemDiv);
            });
            groupDiv.appendChild(subcategoryGridDiv);
            fullCategoryListEl.appendChild(groupDiv);
        });

        feather.replace({
            width: '1em',
            height: '1em',
            'stroke-width': 1.8
        });
    }

    function handleSubcategorySelection(event) {
        const clickedItem = event.currentTarget;
        const subcategoryId = parseInt(clickedItem.dataset.subcategoryId);

        document.querySelectorAll('.category-modal .category-chip.selected, .category-modal .subcategory-item.selected')
            .forEach(el => el.classList.remove('selected'));

        clickedItem.classList.add('selected');
        const correspondingChip = mostUsedCategoryGridEl.querySelector(`.category-chip[data-subcategory-id="${subcategoryId}"]`);
        if (correspondingChip) correspondingChip.classList.add('selected');


        tempSelectedSubcategoryId = subcategoryId;
        dataChangedInModal.subcategory = true;
        populateCategoryModalPreview(currentTransaction);
    }

    // --- TELEGRAM BUTTONS ---
    function configureMainButton() {
        if (!tg.MainButton) return;
        tg.MainButton.setParams({
            text: 'SAVE CHANGES',
            color: '#3b82f6',
            text_color: '#ffffff',
            is_active: true,
            is_visible: true
        });
        tg.MainButton.onClick(handleSave);
    }

    async function handleSave() {
        if (tg.MainButton && (!tg.MainButton.isVisible || !tg.MainButton.isActive)) return;
        if (tg.MainButton) tg.MainButton.showProgress();
        setLoading(true);

        try {
            const patchData = {
                description: descriptionTextarea.value,
                exclude_from_cashflow: excludeCashflowToggle.checked
            };

            if (dataChangedInModal.subcategory && tempSelectedSubcategoryId !== null) {
                patchData.subcategory_id = tempSelectedSubcategoryId;
            }
            if (dataChangedInModal.account && tempSelectedAccountId !== null) {
                patchData.account_id = tempSelectedAccountId;
            }
            let madeChanges = Object.keys(patchData).length > 2 || dataChangedInModal.subcategory || dataChangedInModal.account;

            if (madeChanges) {
                if (access_token) {
                    const updatedTxnFromServer = await updateTransactionAPI(patchData);
                    currentTransaction = {
                        ...currentTransaction,
                        ...updatedTxnFromServer
                    };

                    if (updatedTxnFromServer.subcategory) {
                        currentTransaction.subcategory = updatedTxnFromServer.subcategory;
                        tempSelectedSubcategoryId = updatedTxnFromServer.subcategory.id;
                    }
                    if (updatedTxnFromServer.account) { // <<<< UPDATE FROM SERVER RESPONSE
                        currentTransaction.account = updatedTxnFromServer.account;
                        tempSelectedAccountId = updatedTxnFromServer.account.id;
                    } else if (patchData.account_id) { // If server didn't return account but we sent one
                        const acc = allUserAccounts.find(a => a.id === patchData.account_id);
                        currentTransaction.account = acc ? {
                            ...acc
                        } : null;
                        tempSelectedAccountId = patchData.account_id;
                    }


                } else {
                    if (dataChangedInModal.account && tempSelectedAccountId !== null) {
                        const acc = allUserAccounts.find(a => a.id === tempSelectedAccountId);
                        currentTransaction.account = acc ? {
                            ...acc
                        } : null;
                        currentTransaction.account_id = tempSelectedAccountId;
                    }
                }
            }

            dataChangedInModal.subcategory = false;
            dataChangedInModal.account = false;
            populateUI(currentTransaction);

            if (tg.initDataUnsafe?.user && madeChanges) tg.close();
            else if (!tg.initDataUnsafe?.user) console.log("Changes processed!");

            if (Object.keys(patchData).length > 0 || dataChangedInModal.subcategory) {
                if (access_token) {
                    const updatedTxnFromServer = await updateTransactionAPI(patchData);
                    currentTransaction = {
                        ...currentTransaction,
                        ...updatedTxnFromServer
                    };
                    if (updatedTxnFromServer.subcategory) {
                        currentTransaction.subcategory = updatedTxnFromServer.subcategory;
                        tempSelectedSubcategoryId = updatedTxnFromServer.subcategory.id;
                    } else if (tempSelectedSubcategoryId) {
                        const sc = findSubcategoryById(allCategoriesStructured, tempSelectedSubcategoryId);
                        currentTransaction.subcategory = sc ? {
                            ...sc.subcat,
                            parent_category_name: sc.parentCat.name
                        } : null;
                    }

                } else {
                    console.log("Local save (mock):", patchData);
                    if (dataChangedInModal.subcategory && tempSelectedSubcategoryId !== null) {
                        const scPair = findSubcategoryById(allCategoriesStructured, tempSelectedSubcategoryId);
                        if (scPair) {
                            currentTransaction.subcategory = {
                                ...scPair.subcat,
                                parent_category_name: scPair.parentCat.name
                            };
                            currentTransaction.subcategory_id = tempSelectedSubcategoryId;
                        }
                    }
                    currentTransaction.description = descriptionTextarea.value;
                    currentTransaction.exclude_from_cashflow = excludeCashflowToggle.checked;
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            }

            dataChangedInModal.subcategory = false;
            populateUI(currentTransaction);

            if (tg.initDataUnsafe?.user) tg.close();
            else console.log("Changes processed!");

        } catch (error) {
            console.error("Save error:", error);
            showError(`Error saving: ${error.message}`);
        } finally {
            if (tg.MainButton) tg.MainButton.hideProgress();
            setLoading(false);
        }
    }

    function findSubcategoryById(structuredCategories, subcatId) {
        for (const parentCat of structuredCategories) {
            const foundSubcat = parentCat.subcategories.find(sc => sc.id === subcatId);
            if (foundSubcat) {
                return {
                    subcat: foundSubcat,
                    parentCat: parentCat
                };
            }
        }
        return null;
    }

    // --- EVENT LISTENERS ---
    function setupEventListeners() {
        categoryBadgeMain.addEventListener('click', () => {
            if (currentTransaction.subcategory && currentTransaction.subcategory.id) {
                tempSelectedSubcategoryId = currentTransaction.subcategory.id;
            } else {
                const generalCat = allCategoriesStructured.find(c => c.name.toLowerCase() === 'general');
                const uncategorizedSub = generalCat?.subcategories.find(sc => sc.name.toLowerCase() === 'uncategorized');
                tempSelectedSubcategoryId = uncategorizedSub ? uncategorizedSub.id : null;
            }
            dataChangedInModal.subcategory = false;
            categorySearchInputEl.value = '';
            populateCategoriesInModal(allCategoriesStructured);
            populateCategoryModalPreview(currentTransaction);
            categoryModal.style.display = 'flex';
            feather.replace({
                width: '1em',
                height: '1em',
                'stroke-width': 1.8
            });
        });

        closeModalBtn.addEventListener('click', () => {
            categoryModal.style.display = 'none';
            dataChangedInModal.subcategory = false;
            if (currentTransaction.subcategory && currentTransaction.subcategory.id) {
                tempSelectedSubcategoryId = currentTransaction.subcategory.id;
            }
        });

        saveCategoryBtn.addEventListener('click', () => {
            categoryModal.style.display = 'none';
            if (dataChangedInModal.subcategory && tempSelectedSubcategoryId) {
                const scPair = findSubcategoryById(allCategoriesStructured, tempSelectedSubcategoryId);
                if (scPair) {
                    populateUI({
                        ...currentTransaction,
                        subcategory: {
                            ...scPair.subcat,
                            parent_category_name: scPair.parentCat.name
                        }
                    });
                }
            }
        });

        categoryModal.addEventListener('click', (e) => {
            if (e.target === categoryModal) {
                categoryModal.style.display = 'none';
            }
        })

        categorySearchInputEl.addEventListener('input', (e) => {
            if (e.target === categorySearchInputEl) {
                categorySearchInputEl.style.display = 'none';
            }
        });

        if (moreDetailsActionItem) {
            moreDetailsActionItem.addEventListener('click', () => {
                populateMoreDetailsModal(currentTransaction);
                moreDetailsModalEl.style.display = 'flex';
                feather.replace({
                    width: '1em',
                    height: '1em',
                    'stroke-width': 1.8
                }); // Ensure icons in modal are rendered
            });
        }

        if (closeMoreDetailsModalBtn) {
            closeMoreDetailsModalBtn.addEventListener('click', () => {
                moreDetailsModalEl.style.display = 'none';
            });
        }

        if (moreDetailsModalEl) {
            moreDetailsModalEl.addEventListener('click', (e) => {
                if (e.target === moreDetailsModalEl) {
                    moreDetailsModalEl.style.display = 'none';
                }
            });
        }

        if (fromInfoItemEl) {
            fromInfoItemEl.addEventListener('click', async () => {
                setLoading(true);
                try {
                    allUserAccounts = await fetchAllUserAccountsAPI();
                    if (currentTransaction.account && currentTransaction.account.id) {
                        tempSelectedAccountId = currentTransaction.account.id;
                    } else {
                        tempSelectedAccountId = null; // Or a default like 'Cash' if you have one
                    }
                    dataChangedInModal.account = false; // Reset change flag

                    populateAccountSelectModalPreview(currentTransaction, tempSelectedAccountId);
                    populateAccountsInModalList(allUserAccounts, tempSelectedAccountId);
                    accountSelectModalEl.style.display = 'flex';
                } catch (error) {
                    showError("Could not load accounts. Please try again.");
                    console.error("Error opening account select modal:", error);
                } finally {
                    setLoading(false);
                    feather.replace({
                        width: '1em',
                        height: '1em',
                        'stroke-width': 1.8
                    });
                }
            });
        }

        if (closeAccountSelectModalBtn) {
            closeAccountSelectModalBtn.addEventListener('click', () => {
                accountSelectModalEl.style.display = 'none';
                dataChangedInModal.account = false; // Discard changes
                if (currentTransaction.account && currentTransaction.account.id) {
                    tempSelectedAccountId = currentTransaction.account.id;
                }
            });
        }

        if (saveAccountSelectionBtn) {
            saveAccountSelectionBtn.addEventListener('click', () => {
                if (dataChangedInModal.account && tempSelectedAccountId !== null) {
                    const selectedAccount = allUserAccounts.find(acc => acc.id === tempSelectedAccountId);
                    if (selectedAccount) {
                        // Update currentTransaction in JS state immediately
                        currentTransaction.account = {
                            ...selectedAccount
                        }; // Create a new object copy
                        currentTransaction.account_id = selectedAccount.id;

                        // Update main page UI immediately
                        populateUI(currentTransaction);
                    }
                }
                accountSelectModalEl.style.display = 'none';
                // dataChangedInModal.account flag remains true, so main "SAVE CHANGES" will pick it up
            });
        }


        if (accountSelectModalEl) {
            accountSelectModalEl.addEventListener('click', (e) => {
                if (e.target === accountSelectModalEl) {
                    accountSelectModalEl.style.display = 'none';
                    dataChangedInModal.account = false; // Discard changes
                    if (currentTransaction.account && currentTransaction.account.id) {
                        tempSelectedAccountId = currentTransaction.account.id;
                    }
                }
            });
        }

        setupClipboard();
    }

    // --- RUN ---
    initialize();
});
    </script>
</body>

</html>
```

`sms_finance_tracker/templates/mini-app/edit-transaction.html`:

```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Transaction Details</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <link rel="stylesheet" href="/static/css/mini-app.css?v=2.2.9">
</head>

<body>
    <main class="container">
        
        <!-- Main Transaction Card -->
        <div class="card main-card">
            <div id="transaction-amount" class="amount">Loading...</div>
            <div class="category-badge" id="category-badge-main">
                <span id="main-category-icon-wrapper">
                    <i data-feather="tag" id="main-category-icon"></i>
                </span>
                <span id="main-category-name">Loading...</span>
            </div>
        </div>

        <!-- Info Grid -->
        <div class="card info-grid">
            <div class="info-item" id="from-account-action" style="cursor: pointer;">
                <div class="info-label">FROM</div>
                <div class="info-value">
                    <div class="account-icon" id="from-account-icon-initial">..</div>
                    <span id="from-account-details">Loading...</span>
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">ON</div>
                <div class="info-value">
                    <span id="transaction-date">Loading...</span>
                </div>
            </div>
        </div>

        <!-- Paid To Card (can also be a trigger for details) -->
        <div class="card paid-to-card" id="paid-to-card-action">
            <div class="paid-to-header">PAID TO</div>
            <div class="paid-to-content">
                <div class="paid-to-info">
                    <div class="merchant-icon" id="merchant-icon-wrapper"><i data-feather="user"></i></div>
                    <div id="paid-to-merchant-name" class="merchant-name">Loading...</div>
                </div>
                <i data-feather="chevron-right" class="chevron"></i>
            </div>
        </div>

        <!-- More Details Action -->
        <div class="card actions-card">
            <div class="action-item" id="more-details-action">
                <div class="action-left">
                    <i data-feather="info" class="action-icon"></i>
                    <span class="action-text">More Details</span>
                </div>
                <i data-feather="chevron-right" class="chevron"></i>
            </div>

            <div class="action-item" id="link-transaction-action">
                <div class="action-left">
                    <i data-feather="link" class="action-icon"></i>
                    <span class="action-text" id="link-action-text">Link Transaction</span>
                </div>
                <span class="action-date" id="linked-transaction-info">Not Linked</span>
                <i data-feather="chevron-right" class="chevron"></i>
            </div>
        </div>

        <!-- Notes Section -->
        <div class="card notes-card">
            <div class="notes-header">
                <div class="notes-title-text">NOTES</div>
            </div>
            <div class="notes-content">
                <textarea id="description" class="notes-textarea" placeholder="Add a note..."></textarea>
            </div>
        </div>

        <div class="card reimbursable-override-card" id="reimbursable-override-card">
            <div class="action-item" style="padding-top: 12px; padding-bottom: 12px;">
                <div class="action-left">
                    <i data-feather="repeat" class="action-icon"></i>
                    <span class="action-text">Reimbursable</span>
            </div>
            <div class="three-state-toggle" id="reimbursable-toggle">
                <button class="toggle-segment" data-value="default" data-index="0">Default</button>
                <button class="toggle-segment" data-value="true" data-index="1">Yes</button>
                <button class="toggle-segment" data-value="false" data-index="2">No</button>
            </div>
        </div>
    </main>

    <!-- Modals (Initially Hidden) -->
    <div id="loading-overlay" class="loading-overlay">
        <div class="spinner"></div>
    </div>

        <!-- Category Selection Modal-->
    <div class="category-modal" id="categoryModal">
        <div class="category-content">
            <div class="category-header">
                <button class="close-btn" id="closeCategoryModalBtn">✕</button>
                <div class="category-title">Tag transaction</div>
                <button class="save-btn" id="saveCategorySelectionBtn">✓</button>
            </div>
            
            <div class="transaction-preview" id="category-select-transaction-preview">
                <div class="preview-left">
                    <div class="merchant-icon" id="cat-select-merchant-icon-preview"><i data-feather="user"></i></div>
                    <div>
                        <div class="merchant-name" id="cat-select-merchant-name-preview">...</div>
                        <div style="font-size: 12px; color: #6b7280;" id="cat-select-transaction-time-preview">...</div>
                    </div>
                </div>
                <div class="preview-right">
                    <div class="preview-amount" id="cat-select-amount-preview">...</div>
                    <div class="preview-category-badge" id="cat-select-category-badge-preview">
                        <span id="cat-select-category-icon-wrapper"></span>
                        <span id="cat-select-category-name-preview">...</span>
                    </div>
                    <div class="account-icon preview-account-icon" id="cat-select-current-account-icon-preview">?</div>
                </div>
            </div>

            <div class="search-section">
                <input type="text" id="category-search-input" class="search-input" placeholder="Search for a category...">
            </div>

            <div class="categories-section" id="category-list-container">
            </div>
        </div>
    </div>

    <!-- More Details Modal (New) -->
    <div class="details-modal" id="moreDetailsModal">
        <div class="details-modal-content">
            <div class="details-modal-header">
                <span class="details-modal-title">Transaction Details</span>
                <button class="details-close-btn" id="closeMoreDetailsModalBtn">✕</button>
            </div>
            <div class="details-modal-body">
                <div class="detail-item">
                    <span class="detail-label">Amount</span>
                    <span class="detail-value" id="details-amount">Loading...</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Debited From</span>
                    <span class="detail-value" id="details-debited-from">Loading...</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Paid To</span>
                    <span class="detail-value" id="details-merchant">Loading...</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Transaction Time</span>
                    <span class="detail-value" id="details-timestamp">Loading...</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Status</span>
                    <span class="detail-value" id="details-status">Loading...</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Transaction Hash</span>
                    <div class="detail-value">
                        <span id="details-unique-hash">Loading...</span>
                        <button class="copy-btn" data-clipboard-target="#details-unique-hash">
                            <i data-feather="copy"></i>
                        </button>
                    </div>
                </div>
                 <div class="detail-item">
                    <span class="detail-label">Raw SMS Content</span>
                    <span class="detail-value" id="details-raw-sms">Loading...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Account Selection Modal (New) -->
    <div class="account-select-modal" id="accountSelectModal">
        <div class="account-select-modal-content">
            <div class="account-select-modal-header">
                <button class="account-select-close-btn" id="closeAccountSelectModalBtn">✕</button>
                <span class="account-select-modal-title">Choose source</span>
                <button class="account-select-save-btn" id="saveAccountSelectionBtn">✓</button>
            </div>

            <div class="transaction-preview" id="account-select-transaction-preview">
                <div class="preview-left">
                    <div class="merchant-icon" id="account-select-merchant-icon-preview"><i data-feather="user"></i></div>
                    <div>
                        <div class="merchant-name" id="account-select-merchant-name-preview">...</div>
                        <div style="font-size: 12px; color: #6b7280;" id="account-select-transaction-time-preview">...</div>
                    </div>
                </div>
                <div class="preview-right">
                    <div class="preview-amount" id="account-select-amount-preview">...</div>
                    <div class="preview-category-badge" id="account-select-category-badge-preview">
                        <span id="account-select-category-icon-wrapper"></span>
                        <span id="account-select-category-name-preview">...</span>
                    </div>
                    <div class="account-icon preview-account-icon" id="account-select-current-account-icon-preview">?</div>
                </div>
            </div>

            <div class="account-select-modal-body">
                <h3 class="account-select-prompt-title">What's the source for this transaction?</h3>
                <p class="account-select-prompt-subtitle">
                    This transaction will be linked to your chosen source.
                </p>
                <div id="account-list-container"></div>
            </div>
        </div>
    </div>

    <!-- New "Link Transaction" Modal -->
    <div class="account-select-modal" id="linkTransactionModal"> 
        <div class="account-select-modal-content">
            <div class="account-select-modal-header">
                <button class="account-select-close-btn" id="closeLinkModalBtn">✕</button>
                <span class="account-select-modal-title">Link Transaction</span>
                <button class="account-select-save-btn" id="saveLinkBtn" style="visibility: hidden;">✓</button> 
            </div>
            
            <div class="transaction-preview" id="link-current-transaction-preview">
                <div class="preview-left">
                    <div class="merchant-icon" id="link-current-merchant-icon-preview"><i data-feather="user"></i></div>
                    <div>
                        <div class="merchant-name" id="link-current-merchant-name-preview">...</div>
                        <div style="font-size: 12px; color: #6b7280;" id="link-current-transaction-time-preview">...</div>
                    </div>
                </div>
                <div class="preview-right">
                    <div class="preview-amount" id="link-current-amount-preview">...</div>
                    <div class="preview-category-badge" id="link-current-category-badge-preview">
                        <span id="link-current-category-icon-wrapper"></span>
                        <span id="link-current-category-name-preview">...</span>
                    </div>
                    <div class="account-icon preview-account-icon" id="link-current-account-icon-preview">?</div>
                </div>
            </div>

            <div class="account-select-modal-body">
                <h3 class="account-select-prompt-title">Choose a transaction to link with:</h3>
                <p class="account-select-prompt-subtitle">
                    Linking will mark both transactions as a neutral transfer, excluding them from budget calculations.
                </p>
                <div id="linkable-transactions-list" style="max-height: 40vh; overflow-y: auto;">
                  
                </div>
            </div>
        </div>
    </div>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="/static/js/edit-transaction.js?v=2.3.2"></script>  
</body>

</html>
```

`sms_finance_tracker/templates/mini-app/settings.html`:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Settings</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <link rel="stylesheet" href="/static/css/mini-app.css?v=2.2.9"> 
    <style>
        body {
            background-color: var(--tg-theme-secondary-bg-color, #f0f0f0); 
        }
        .settings-section {
            margin-bottom: 24px;
        }
        .settings-section-title {
            font-size: 14px;
            font-weight: 600;
            color: var(--tg-theme-hint-color, #777);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 12px;
            padding: 0 4px; 
        }
        .input-group {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 12px;
        }
        .input-group label {
            font-size: 15px;
            font-weight: 500;
            color: var(--tg-theme-text-color, #000000);
            flex-shrink: 0;
        }
        .input-group input[type="month"],
        .input-group input[type="number"] {
            flex-grow: 1;
            padding: 10px 12px;
            border: 1px solid var(--tg-theme-button-color, #e0e0e0);
            border-radius: 8px;
            font-size: 15px;
            background-color: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
        }
        .input-group input[type="month"] { width: auto; flex-grow: 0;}
        .save-budget-btn {
            padding: 10px 16px;
            background-color: var(--tg-theme-button-color, #007bff);
            color: var(--tg-theme-button-text-color, #ffffff);
            border: none;
            border-radius: 8px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
        }
        .budget-display {
            font-size: 15px;
            color: var(--tg-theme-text-color, #333);
        }

         .account-list-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 0; 
            border-bottom: 1px solid var(--tg-theme-border-color, #e0e0e0);
        }
        .account-list-item:last-child {
            border-bottom: none;
        }
        .account-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        .account-name-details {
            display: flex;
            flex-direction: column;
        }
        .account-name-settings {
            font-size: 15px;
            font-weight: 500;
            color: var(--tg-theme-text-color, #000000);
        }
        .account-meta-settings {
            font-size: 12px;
            color: var(--tg-theme-hint-color, #777777);
        }

        .three-state-toggle {
            background-color: var(--tg-theme-secondary-bg-color, #f1f3f4);
            border: 1px solid var(--tg-theme-border-color, #e0e0e0);
        }

        .three-state-toggle::before {
            background-color: var(--tg-theme-bg-color, #ffffff);
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
        }

        .toggle-segment {
            color: var(--tg-theme-hint-color, #6b7280);
        }

        .toggle-segment.active-text {
            color: var(--tg-theme-text-color, #1f2937);
        }

        .account-purpose-toggle-style .toggle-segment {
            padding: 5px 8px; 
            font-size: 12px;
        }
        .account-purpose-toggle-style {
             width: 140px;
        }

        .account-purpose-toggle-style::before {
            width: calc(50% - 2px); 
        }

        /* Styles for Subcategory Rules Section */
        .category-group-settings {
            margin-bottom: 16px;
            border: 1px solid var(--tg-theme-border-color, #e0e0e0); 
            border-radius: 8px;
            background-color: var(--tg-theme-bg-color, #ffffff);
        }
        .category-header-settings {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            cursor: pointer;
            border-bottom: 1px solid var(--tg-theme-border-color, #e0e0e0);
        }
        .category-title-settings {
            font-size: 16px;
            font-weight: 600;
            color: var(--tg-theme-text-color, #000000);
        }
        .category-chevron {
            transition: transform 0.2s ease-in-out;
        }
        .category-header-settings.expanded .category-chevron {
            transform: rotate(90deg);
        }
        .subcategories-list-settings {
            display: none; /* Hidden by default, shown when expanded */
            padding: 0 16px 8px 16px; /* Padding inside the expanded area */
        }
        .subcategory-item-settings {
            display: flex;
            flex-direction: column; /* Stack toggles vertically for clarity */
            padding: 10px 0;
            border-bottom: 1px solid var(--tg-theme-secondary-bg-color, #f0f0f0); /* Lighter separator */
        }
        .subcategory-item-settings:last-child {
            border-bottom: none;
        }
        .subcategory-info-settings {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px; /* Space before toggles */
        }
        .subcategory-icon-settings { /* Can reuse account-icon-settings or define new */
            width: 28px;
            height: 28px;
            background-color: var(--tg-theme-hint-color, #ccc); /* Neutral background */
            color: var(--tg-theme-bg-color, #fff);
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }
         .subcategory-icon-settings .emoji-icon,
         .subcategory-icon-settings img.custom-icon {
            max-width: 18px; max-height: 18px;
         }
        .subcategory-name-settings {
            font-size: 15px;
            font-weight: 500;
            color: var(--tg-theme-text-color, #000000);
        }
        .subcategory-toggles-container {
            display: flex;
            flex-direction: column; 
            gap: 8px; 
            padding-left: 38px;
        }
        .subcategory-toggle-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .subcategory-toggle-label {
            font-size: 14px;
            color: var(--tg-theme-text-color, #333333);
        }
    </style>
</head>
<body>
    <main class="container">
        <div id="settings-content">
            <!-- Section 1: Monthly Budget Management -->
            <div class="settings-section" id="budget-settings-section">
                <div class="settings-section-title">Monthly Budget</div>
                <div class="card">
                    <div class="card-content" style="padding: 16px;">
                        <div class="input-group">
                            <label for="budget-month-year">Month:</label>
                            <input type="month" id="budget-month-year">
                        </div>
                        <div class="input-group">
                            <label for="budget-amount">Amount (₹):</label>
                            <input type="number" id="budget-amount" placeholder="e.g., 15000">
                        </div>
                        <div style="text-align: right; margin-top: 8px;">
                            <button class="save-budget-btn" id="save-monthly-budget-btn">Set/Update Budget</button>
                        </div>
                        <div id="current-budget-display" class="budget-display" style="margin-top:12px; font-style: italic;">
                            Select a month to see or update its budget.
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section 2: Account Purposes -->
            <div class="settings-section" id="account-settings-section">
                <div class="settings-section-title">Account Purposes</div>
                <div class="card">
                    <div class="card-content" style="padding: 16px;">
                        <div id="accounts-list-container">
                            <!-- Accounts will be dynamically populated here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section 3: Subcategory Rules  -->
            <div class="settings-section" id="subcategory-settings-section">
                <div class="settings-section-title">Subcategory Rules</div>
                    <div id="categories-accordion-container">
                        <!-- Categories and Subcategories will be dynamically populated here -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <div id="loading-overlay" class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="/static/js/settings.js?v=0.3.1"></script>
</body>
</html>
```

`sms_finance_tracker/tests/conftest.py`:

```py

import pytest

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from fastapi.testclient import TestClient

from app.services.parsers.hdfc_parser import HDFCParser
from app.services.parsers.amex_parser import AmexParser
from app.services.parsers.federal_parser import FederalBankParser
from app.services.parsers.icici_parser import ICICIBankParser
from app.services.parsers.idfc_parser import IDFCFirstBankParser
from app.services.parsers.sbi_parser import SBIParser

from app.models.transaction import Transaction  # noqa: F401
from app.models.category import Category  # noqa: F401
from app.models.subcategory import SubCategory # noqa: F401
from app.models.account import Account # noqa: F401
from app.models.monthly_budget import MonthlyBudget # noqa: F401


from app.db.base_class import Base

from app.main import app
from app.db.session import get_db

from tests.fixtures.test_data_factory import TestDataFactory


@pytest.fixture(scope='function')
def test_engine():
    """Creates an in-memory SQLite database for testing"""
    engine = create_engine(
        "sqlite:///:memory:", 
        connect_args={"check_same_thread":False},
        echo=True
    )
    
    return engine

@pytest.fixture(scope='function')
def test_tables(test_engine):
    """Creates all database tables once per test session"""
    Base.metadata.create_all(bind=test_engine)
    yield
    Base.metadata.drop_all(bind=test_engine)
    
@pytest.fixture
def db_session(test_tables, test_engine):
    """
    Provides a clean database session for each test.
    Changes are rolled back after each test.
    """
    
    TestSession = sessionmaker(bind=test_engine)
    session = TestSession()
    
    try:
        yield session
    finally:
        session.rollback()
        session.close()

@pytest.fixture
def test_client(db_session):
    """Create FastAPI test client with test database"""
    
    def override_get_db():
        yield db_session
    
    app.dependency_overrides[get_db] = override_get_db
    
    with TestClient(app) as client:
        yield client
    
    app.dependency_overrides.clear()
    
@pytest.fixture
def test_data_setup(db_session):
    """Create a full set of test data for API testing"""
    
    food_category = TestDataFactory.create_test_category(
        db_session,
        name="Food & Drinks", 
        description="Eating out, delivery, etc.",
        display_order=1
    )
    
    coffee_subcategory = TestDataFactory.create_test_sub_category(
        db_session,
        food_category,
        name="Tea & Coffee",
        icon_name="emoji:☕",
        display_order=1,
        is_reimbursable=False,
        exclude_from_budget=False
    )
    
    snacks_subcategory = TestDataFactory.create_test_sub_category(
        db_session,
        food_category, 
        name="Snacks",
        icon_name="emoji:🍿",
        display_order=2
    )
    
    transport_category = TestDataFactory.create_test_category(
        db_session,
        name="Transport",
        description="Uber, Ola, etc.",
        display_order=2
    )
    
    uber_subcategory = TestDataFactory.create_test_sub_category(
        db_session,
        transport_category,
        name="Uber",
        icon_name="img:brand/uber.svg",
        display_order=1
    )
    
    return {
        "categories": [food_category, transport_category],
        "subcategories": [coffee_subcategory, snacks_subcategory, uber_subcategory]
    }

@pytest.fixture
def hdfc_parser():
    return HDFCParser()

@pytest.fixture
def amex_parser():
    return AmexParser()

@pytest.fixture
def federal_parser():
    return FederalBankParser()

@pytest.fixture
def icici_parser():
    return ICICIBankParser()

@pytest.fixture
def idfc_parser():
    return IDFCFirstBankParser()

@pytest.fixture
def sbi_parser():
    return SBIParser()
```

`sms_finance_tracker/tests/fixtures/test_data_factory.py`:

```py
from  app.models import (
    Account, AccountType,AccountPurpose,
    Category, SubCategory, Transaction, TransactionStatus)

from datetime import datetime

from sqlalchemy.orm import Session

from tests.sample_data.sms_samples import SBI_CREDIT_CARD_DEBIT
import uuid
import random

class TestDataFactory:
    
    @staticmethod
    def create_test_account(db_session: Session, **kwargs):
        """
        Creates a test Account with sensible defaults.
        """
        
        defaults = {
            "name": "Test HDFC Card",
            "account_type": AccountType.CREDIT_CARD,
            "bank_name": "HDFC Bank", 
            "account_last4": random.randint(1000, 9999),
            "purpose": AccountPurpose.PERSONAL
        }
        
        defaults.update(kwargs)
        
        account = Account(**defaults)
        
        db_session.add(account)
        db_session.commit()
        db_session.refresh(account) 
        
        return account
    
    @staticmethod
    def create_test_category(db_session: Session, **kwargs):
        """
        Creates a test Category with defaults
        """
        defaults = {
            "name": "Test Food & Drinks",
            "description": "Test category for food expenses",
            "display_order": 1
        }
        
        defaults.update(kwargs)
        
        category = Category(**defaults)
        db_session.add(category)
        db_session.commit()
        db_session.refresh(category)
        
        return category
    
    @staticmethod
    def create_test_sub_category(db_session: Session, parent_category , **kwargs):
        """
        Creates a test Sub Category with defaults
        """
        
        defaults = {
            "name": "Test Snacks",
            "icon_name": "emoji:🍿", 
            "display_order": 1,
            "is_reimbursable": False,
            "exclude_from_budget": False,
            "parent_category_id": parent_category.id
        }
    
        
        defaults.update(kwargs)
        
        sub_category = SubCategory(**defaults)
        db_session.add(sub_category)
        db_session.commit()
        db_session.refresh(sub_category)
        
        return sub_category
    
    @staticmethod
    def create_test_transaction(db_session: Session, account , subcategory , **kwargs):
        """
        Creates a test Transaction with defaults
        """
        
        defaults = {
            "raw_sms_content": SBI_CREDIT_CARD_DEBIT,
            "amount": 500.00,
            "currency": "INR",
            "merchant_vpa": "Test Merchant",
            "description": "Test description",
        
            "unique_hash": f"test_hash_{uuid.uuid4().hex[:8]}", 
            "transaction_datetime_from_sms": datetime.now(),  
            "status": TransactionStatus.PROCESSED, 
        
            "subcategory_id": subcategory.id, 
            "account_id": account.id if account is not None else None,          
        
            "telegram_message_id": None,       
            "linked_transaction_hash": None,  
            "override_reimbursable": None,
        }
        
        defaults.update(kwargs)
        
        transaction = Transaction(**defaults)
        db_session.add(transaction)
        db_session.commit()
        db_session.refresh(transaction)
        
        return transaction
    
    @staticmethod
    def create_test_monthly_budget(db_session: Session, **kwargs):
        """
        Creates a test MonthlyBudget with defaults
        """
        from app.models.monthly_budget import MonthlyBudget
        from datetime import datetime
        
        now = datetime.now()
        defaults = {
            "year": now.year,
            "month": now.month,
            "budget_amount": 15000.0
        }
        
        defaults.update(kwargs)
        
        budget = MonthlyBudget(**defaults)
        db_session.add(budget)
        db_session.commit()
        db_session.refresh(budget)
        
        return budget
```

`sms_finance_tracker/tests/integration/test_api/test_categories_api.py`:

```py
from fastapi import status


class TestCategoriesAPI:
    """Test suite for Categories API endpoints"""
    
    def test_get_all_categories_with_details_success(self, test_client, test_data_setup):
        """Test successful retrieval of all categories with subcategories"""

        response = test_client.get("/api/v1/categories/all_details")
        
        assert response.status_code == status.HTTP_200_OK
        
        categories = response.json()
        
        assert isinstance(categories, list)
        assert len(categories) == 2 
        
        food_category = categories[0] 
        assert food_category["name"] == "Food & Drinks"
        assert food_category["description"] == "Eating out, delivery, etc."
        assert food_category["display_order"] == 1
        assert "id" in food_category
        
        subcategories = food_category["subcategories"] 
        assert isinstance(subcategories, list)
        assert len(subcategories) == 2  
        
        coffee_subcat = subcategories[0] 
        assert coffee_subcat["name"] == "Tea & Coffee"
        assert coffee_subcat["icon_name"] == "emoji:☕"
        assert coffee_subcat["display_order"] == 1
        assert coffee_subcat["is_reimbursable"] is False
        assert coffee_subcat["exclude_from_budget"] is False
        assert coffee_subcat["parent_category_id"] == food_category["id"]
        
        transport_category = categories[1]
        assert transport_category["name"] == "Transport"
        assert transport_category["display_order"] == 2
        assert len(transport_category["subcategories"]) == 1
        
        uber_subcat = transport_category["subcategories"][0]
        assert uber_subcat["name"] == "Uber"
        assert uber_subcat["icon_name"] == "img:brand/uber.svg"
    
    def test_get_all_categories_ordering(self, test_client, test_data_setup):
        """Test that categories are returned in display_order"""
        
        response = test_client.get("/api/v1/categories/all_details")
        
        categories = response.json()
        
        assert categories[0]["display_order"] == 1 
        assert categories[1]["display_order"] == 2 
        
        food_subcats = categories[0]["subcategories"]
        assert food_subcats[0]["display_order"] == 1 
        assert food_subcats[1]["display_order"] == 2 
    
    def test_get_all_categories_empty_database(self, test_client):
        """Test response when no categories exist"""
        
        response = test_client.get("/api/v1/categories/all_details")
        
        assert response.status_code == status.HTTP_200_OK
        categories = response.json()
        assert categories == [] 
    
    def test_get_all_categories_response_schema(self, test_client, test_data_setup):
        """Test that response matches expected schema structure"""
        
        response = test_client.get("/api/v1/categories/all_details")
        
        categories = response.json()
        
        for category in categories:
            assert "id" in category
            assert "name" in category
            assert "display_order" in category
            assert "subcategories" in category
            
            assert "description" in category 
            
            assert isinstance(category["id"], int)
            assert isinstance(category["name"], str)
            assert isinstance(category["display_order"], int)
            assert isinstance(category["subcategories"], list)
            
            for subcategory in category["subcategories"]:
                assert "id" in subcategory
                assert "name" in subcategory
                assert "icon_name" in subcategory
                assert "display_order" in subcategory
                assert "is_reimbursable" in subcategory
                assert "exclude_from_budget" in subcategory
                assert "parent_category_id" in subcategory
                
                assert isinstance(subcategory["id"], int)
                assert isinstance(subcategory["name"], str)
                assert isinstance(subcategory["display_order"], int)
                assert isinstance(subcategory["is_reimbursable"], bool)
                assert isinstance(subcategory["exclude_from_budget"], bool)
                assert isinstance(subcategory["parent_category_id"], int)
                
                assert subcategory["parent_category_id"] == category["id"]

    # TODO: Add tests for other categories endpoints:
    # - GET /api/v1/categories/{category_id_or_name}
    # - GET /api/v1/categories/subcategories/{subcategory_id}
    # - Error cases (404s, invalid IDs)
```

`sms_finance_tracker/tests/sample_data/praser_result_model.py`:

```py
from typing  import Dict

class ResultModel:
        
    def __init__(self, parased_data: Dict ):
        self._bank_name = parased_data["bank_name"]
        self._account_last4 = parased_data["account_last4"]
        self._amount = parased_data["amount"]
        self._merchant_vpa = parased_data["merchant_vpa"]
        self._transaction_datetime_from_sms = parased_data["transaction_datetime_from_sms"]
        self._description = parased_data["description"]
        
    @property
    def bank_name(self):
        return self._bank_name
        
    @property
    def account_num(self):
        return self._account_last4
        
    @property
    def amount(self):
        return self._amount
        
    @property
    def merchant(self):
        return self._merchant_vpa
        
    @property
    def timestamp(self):
        return self._transaction_datetime_from_sms
        
    @property
    def description(self):
        return self._description
```

`sms_finance_tracker/tests/sample_data/sms_samples.py`:

```py

INVALID_SMS = "INVALID SMS"

HDFC_CREDIT_CARD_SMS_DEBIT = """
Spent Rs.2475.94 On HDFC Bank Card 2568 At PARAGON On 2025-06-07:19:56:35.Not You? To Block+Reissue Call 18002586161/SMS BLOCK CC 2568 to 7308080808
"""

HDFC_NETBANKING_DEBIT = """
Amt Sent Rs.1193.00
From HDFC Bank A/C *1675
To Thalappakatti Pattom Kerala TV01
On 01-06
Ref 100660705904
Not You? Call 18002586161/SMS BLOCK UPI to 7308080808
"""

IDFC_CREDIT_CARD_DEBIT = """
Transaction Successful! INR 1110.00 spent on your IDFC FIRST Bank Credit Card ending XX4609 at dummyBrand on 31 MAY 2025 at 05:17 PM Avbl Limit: INR 159847.97 If not done by you, call 180010888 for dispute or to block your card SMS CCBLOCK 4609 to 5676732
"""

FEDERAL_NETBANKING_DEBIT = "Dear Customer, Thank you for using FEDNET.Rs.2194 debited from your A/c XX0214 on 08JUN2025 20:34:51. BAL-Rs.31155-Federal Bank"

FEDERAL_UPI_DEBIT = """
Rs 1.00 debited via UPI on 04-06-2025 12:17:05 to VPA hashik2233-1@okhdfcbank.Ref No 552143776484.Small txns?Use UPI Lite!-Federal Bank
"""

PLUXEE_DEBIT = "Rs. 215.05 spent from Pluxee  Meal Card wallet, card no.xx1806 on 3-06-2025 20:26:30 at ZOMATO . Avl bal Rs.862.72. Not you call 18002106919"

ICICI_CRDIT_CARD_DEBIT = """
INR 862.00 spent using ICICI Bank Card XX7007 on 30-May-25 on IND*Amazon.in -. Avl Limit: INR 3,23,035.33. If not you, call 1800 2662/SMS BLOCK 7007 to 9215676766
"""

AMEX_DEBIT = """
Alert: You've spent INR 2,067.98 on your AMEX card ** 11004 at LULU HYPERMA on 5 June 2025 at 08:36 PM IST. Call 18004190691 if this was not made by you.
"""

SBI_CREDIT_CARD_DEBIT = """
Rs.315.00 spent on your SBI Credit Card ending 0400 at Kerala State Road Tran on 05/06/25. Trxn. not done by you? Report at https://sbicard.com/Dispute
"""
```

`sms_finance_tracker/tests/unit/test_crud/test_crud_account.py`:

```py
from tests.fixtures.test_data_factory import TestDataFactory
from app.crud import crud_account
from app.schemas.account import AccountCreate, AccountUpdate
from app.models.account import AccountType, AccountPurpose

class TestAccountCRUD:
    
    def test_create_account_success(self, db_session):
        account_data = AccountCreate(
            name="Test ICICI Card",
            account_type=AccountType.CREDIT_CARD,
            bank_name="ICICI Bank",
            account_last4="5678",
            purpose=AccountPurpose.PERSONAL
        )
        
        result = crud_account.create_account(db_session, obj_in=account_data)
        
        assert result.id is not None
        assert result.name == "Test ICICI Card"
        assert result.account_last4 == "5678"
        assert result.account_type == AccountType.CREDIT_CARD
    
    def test_get_account_by_identifier_exists(self, db_session):
        account = TestDataFactory.create_test_account(
            db_session, 
            bank_name="SBI", 
            account_last4="9999"
        )
        
        result = crud_account.get_account_by_identifier(
            db_session, bank_name="SBI", account_last4="9999"
        )
        
        assert result is not None
        assert result.id == account.id
        assert result.bank_name == "SBI"
        assert result.account_last4 == "9999"
    
    def test_get_account_by_identifier_not_found(self, db_session):
        
        result = crud_account.get_account_by_identifier(
            db_session, bank_name="NonExistent", account_last4="0000"
        )
        
        assert result is None
    
    def test_get_accounts_with_pagination(self, db_session):
        TestDataFactory.create_test_account(db_session, name="Account 1")
        TestDataFactory.create_test_account(db_session, name="Account 2", account_last4="1111")
        TestDataFactory.create_test_account(db_session, name="Account 3", account_last4="2222")
        
        result = crud_account.get_accounts(db_session, skip=0, limit=2)
        
        assert len(result) == 2
        assert all(account.id is not None for account in result)
    
    def test_update_account_success(self, db_session):
        account = TestDataFactory.create_test_account(
            db_session, name="Old Name", purpose=AccountPurpose.PERSONAL
        )
        
        update_data = AccountUpdate(name="New Name", purpose=AccountPurpose.BUSINESS)
        updated_account = crud_account.update_account(
            db_session, db_obj=account, obj_in=update_data
        )
        
        assert updated_account.name == "New Name"
        assert updated_account.purpose == AccountPurpose.BUSINESS
        assert updated_account.id == account.id 
```

`sms_finance_tracker/tests/unit/test_crud/test_crud_category.py`:

```py
from tests.fixtures.test_data_factory import TestDataFactory
from app.crud import crud_category
from app.schemas.category import CategoryCreate

class TestCategoryCRUD:
    
    def test_create_category(self, db_session):
        category_data = CategoryCreate(
            name="Test Transport",
            description="All transport related expenses",
            display_order=5
        )
        
        result = crud_category.create_category(db_session, obj_in=category_data)
        print(result)
        assert result.id is not None
        assert result.name == "Test Transport"
        assert result.description == "All transport related expenses"
        assert result.display_order == 5
    
    def test_get_category_by_name_exists(self, db_session):
        category = TestDataFactory.create_test_category(
            db_session, name="Unique Category Name"
        )
        
        result = crud_category.get_category_by_name(db_session, name="Unique Category Name")
        
        assert result is not None
        assert result.id == category.id
        assert result.name == "Unique Category Name"
    
    def test_get_category_by_name_not_found(self, db_session):
        
        result = crud_category.get_category_by_name(db_session, name="Does Not Exist")
        
        assert result is None
    
    def test_get_categories_with_subcategories(self, db_session):
        category = TestDataFactory.create_test_category(db_session, name="Food")
        subcategory1 = TestDataFactory.create_test_sub_category(
            db_session, category, name="Pizza"
        )
        subcategory2 = TestDataFactory.create_test_sub_category(
            db_session, category, name="Coffee"
        )
        
        result = crud_category.get_categories(db_session, skip=0, limit=10)
        
        assert len(result) == 1
        category_result = result[0]
        assert category_result.name == "Food"
        assert len(category_result.subcategories) == 2
        
        subcategory_ids = [sub.id for sub in category_result.subcategories]
        assert subcategory1.id in subcategory_ids
        assert subcategory2.id in subcategory_ids
    
        subcategory_names = [sub.name for sub in category_result.subcategories]
        assert "Pizza" in subcategory_names
        assert "Coffee" in subcategory_names
```

`sms_finance_tracker/tests/unit/test_crud/test_crud_subcategory.py`:

```py
from tests.fixtures.test_data_factory import TestDataFactory
from app.crud import crud_subcategory
from app.schemas.category import SubCategoryCreate, SubCategoryUpdate

class TestSubCategoryCRUD:
    
    def test_create_subcategory_success(self, db_session):
       
        parent_category = TestDataFactory.create_test_category(db_session, name="Shopping")
        
        subcategory_data = SubCategoryCreate(
            name="Electronics",
            icon_name="fthr:smartphone",
            display_order=1,
            is_reimbursable=False,
            exclude_from_budget=False,
            parent_category_id=parent_category.id
        )
        
       
        result = crud_subcategory.create_subcategory(db_session, obj_in=subcategory_data)
        
        
        assert result.id is not None
        assert result.name == "Electronics"
        assert result.parent_category_id == parent_category.id
        assert result.is_reimbursable is False
    
    def test_get_subcategory_with_parent(self, db_session):
       
        parent_category = TestDataFactory.create_test_category(db_session, name="Bills")
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, parent_category, name="Electricity"
        )
        
       
        result = crud_subcategory.get_subcategory(db_session, subcategory_id=subcategory.id)
        
        
        assert result is not None
        assert result.name == "Electricity"
        assert result.parent_category is not None
        assert result.parent_category.name == "Bills"
    
    def test_get_subcategories_for_parent(self, db_session):
       
        parent_category = TestDataFactory.create_test_category(db_session, name="Entertainment")
        subcategory1 = TestDataFactory.create_test_sub_category(
            db_session, parent_category, name="Movies", display_order=1
        )
        subcategory2 = TestDataFactory.create_test_sub_category(
            db_session, parent_category, name="Games", display_order=2
        )
        
       
        result = crud_subcategory.get_subcategories_for_parent(
            db_session, parent_category_id=parent_category.id
        )
        
        
        assert len(result) == 2
        assert result[0].display_order <= result[1].display_order
        result_ids = [sub.id for sub in result]
        assert subcategory1.id in result_ids
        assert subcategory2.id in result_ids
    
        if result[0].id == subcategory1.id:
            assert result[1].id == subcategory2.id
        else:
            assert result[0].id == subcategory2.id
            assert result[1].id == subcategory1.id
    
    def test_update_subcategory_flags(self, db_session):
       
        parent_category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, parent_category, is_reimbursable=False, exclude_from_budget=False
        )
        
       
        update_data = SubCategoryUpdate(is_reimbursable=True, exclude_from_budget=True)
        updated_subcategory = crud_subcategory.update_subcategory(
            db_session, db_obj=subcategory, obj_in=update_data
        )
        
        
        assert updated_subcategory.is_reimbursable is True
        assert updated_subcategory.exclude_from_budget is True
        assert updated_subcategory.id == subcategory.id
```

`sms_finance_tracker/tests/unit/test_crud/test_crud_transaction.py`:

```py
from tests.fixtures.test_data_factory import TestDataFactory
from tests.sample_data.sms_samples import SBI_CREDIT_CARD_DEBIT
from app.crud import crud_transaction
from app.schemas.transaction import TransactionCreate, TransactionUpdate

import uuid

class TestTransactionCRUD:
        
    def test_create_transaction(sefl, db_session):
        
        account = TestDataFactory.create_test_account(db_session=db_session)
        category = TestDataFactory.create_test_category(db_session=db_session)
        sub_category = TestDataFactory.create_test_sub_category(db_session=db_session, parent_category=category)
        
        transaction_data = TransactionCreate(
            unique_hash= f"test_hash_{uuid.uuid4().hex[:8]}", 
            raw_sms_content= SBI_CREDIT_CARD_DEBIT,
            amount = 100.00,
            currency="INR",
            subcategory_id=sub_category.id,
            account_id=account.id
        )
        
        result = crud_transaction.create_transaction(db=db_session, obj_in=transaction_data)
        
        assert result.id is not None
        assert result.amount == 100
        assert result.account_id == account.id
        assert result.subcategory_id == sub_category.id
        
    def test_get_transaction_by_hash(self, db_session):
        
        account = TestDataFactory.create_test_account(db_session=db_session)
        category = TestDataFactory.create_test_category(db_session=db_session, name="Test Vehicle")
        sub_category = TestDataFactory.create_test_sub_category(db_session=db_session, parent_category=category)
        
        transaction = TestDataFactory.create_test_transaction(
            db_session=db_session, account=account, subcategory=sub_category, unique_hash=f"test_hash_{uuid.uuid4().hex[:8]}"
        )
        
        result = crud_transaction.get_transaction_by_hash(
            db=db_session, hash_str=transaction.unique_hash, include_relations=False
        )
        
        assert result is not None
        assert result.unique_hash == transaction.unique_hash
        assert result.id == transaction.id
        
    def test_get_transaction_by_hash_not_found(self, db_session):
        
        result = crud_transaction.get_transaction_by_hash(
            db=db_session, hash_str=f"test_hash_{uuid.uuid4().hex[:8]}", include_relations=False
        )
        
        assert result is None
    
    def test_update_transaction(self, db_session):
        
        account = TestDataFactory.create_test_account(db_session=db_session)
        category = TestDataFactory.create_test_category(db_session=db_session, name="Test Investment")
        sub_category = TestDataFactory.create_test_sub_category(db_session=db_session, parent_category=category)
        
        transaction = TestDataFactory.create_test_transaction(
            db_session=db_session, account=account, subcategory=sub_category, description="Original description"
        )
        
        update_data = TransactionUpdate(description="Updated description")
        
        update_transaction = crud_transaction.update_transaction(db=db_session, db_obj=transaction, obj_in=update_data)
        
        assert update_transaction.description == "Updated description"
        assert update_transaction.id == transaction.id
```

`sms_finance_tracker/tests/unit/test_parsers/test_amex_paraser.py`:

```py
from tests.sample_data.sms_samples import AMEX_DEBIT, INVALID_SMS
from tests.sample_data.praser_result_model import ResultModel

import datetime


class TestAmexParaser:
    
    def test_parser_card_transaction(self, amex_parser):
        result = ResultModel(amex_parser.parse(AMEX_DEBIT))
        
        assert result is not None
        assert result.account_num  == "1004"
        assert result.amount == 2067.98
        assert result.merchant == "LULU HYPERMA" 
        assert result.timestamp == datetime.datetime(2025, 6, 5, 20, 36)
        assert result.merchant in result.description
    
    def test_paraser_invlaid_transaction(self, amex_parser):
        result = amex_parser.parse(INVALID_SMS)
        assert result is None
```

`sms_finance_tracker/tests/unit/test_parsers/test_federal_paraser.py`:

```py
from tests.sample_data.sms_samples import FEDERAL_UPI_DEBIT, FEDERAL_NETBANKING_DEBIT, INVALID_SMS
from tests.sample_data.praser_result_model import ResultModel

import datetime


class TestFederalBankParser:
    
    def test_parser_upi_transaction(self, federal_parser):
        result = ResultModel(federal_parser.parse(FEDERAL_UPI_DEBIT))
        
        assert result is not None
        assert result.account_num  == "0000"
        assert result.amount == 1.0
        assert result.merchant == "hashik2233-1@okhdfcbank" 
        assert result.timestamp == datetime.datetime(2025, 6, 4, 12, 17, 5)
        assert result.merchant in result.description 
        
    def test_parser_netbanking_transaction(self, federal_parser):
        result = ResultModel(federal_parser.parse(FEDERAL_NETBANKING_DEBIT))
        
        assert result is not None
        assert result.account_num  == "0214"
        assert result.amount == 2194.00
        assert result.merchant == "FEDNET Transaction" 
        assert result.timestamp == datetime.datetime(2025, 6, 8, 20, 34, 51)
    
    def test_paraser_invlaid_transaction(self, federal_parser):
        result = federal_parser.parse(INVALID_SMS)
        assert result is None
```

`sms_finance_tracker/tests/unit/test_parsers/test_hdfc_parser.py`:

```py
from tests.sample_data.praser_result_model import ResultModel
from tests.sample_data.sms_samples import HDFC_CREDIT_CARD_SMS_DEBIT, HDFC_NETBANKING_DEBIT, INVALID_SMS


import datetime
class TestHDFCParser:
        
    def test_parse_valid_credit_transaction(self, hdfc_parser):
        result = ResultModel(hdfc_parser.parse(HDFC_CREDIT_CARD_SMS_DEBIT))
            
        assert result is not None
        assert result.account_num  == "2568"
        assert result.amount == 2475.94
        assert result.merchant == "PARAGON" 
        assert result.timestamp == datetime.datetime(2025, 6, 7, 19, 56, 35)
        assert result.merchant in result.description 
            
    def test_parse_valid_netbanking_transaction(self, hdfc_parser):
        result = ResultModel(hdfc_parser.parse(HDFC_NETBANKING_DEBIT))
            
        assert result is not None
        assert result.account_num  == "1675"
        assert result.amount == 1193.00
        assert result.merchant == "Thalappakatti Pattom Kerala TV01"
        assert result.timestamp == datetime.datetime(2025, 6, 1, 0, 0)
        assert result.merchant in result.description
        
    def test_parse_invalid_sms(self, hdfc_parser):
        result = hdfc_parser.parse(INVALID_SMS)
        assert result is None
```

`sms_finance_tracker/tests/unit/test_parsers/test_icici_paraser.py`:

```py
from tests.sample_data.sms_samples import ICICI_CRDIT_CARD_DEBIT, INVALID_SMS
from tests.sample_data.praser_result_model import ResultModel

import datetime


class TestFederalBankParser:
    
    def test_parser_upi_transaction(self, icici_parser):
        result = ResultModel(icici_parser.parse(ICICI_CRDIT_CARD_DEBIT))
        
        assert result is not None
        assert result.account_num  == "7007"
        assert result.amount == 862.00
        assert result.merchant == "IND*Amazon" 
        assert result.timestamp == datetime.datetime(2025, 5, 30, 0, 0)
        assert result.merchant in result.description 
        
    
    def test_paraser_invlaid_transaction(self, icici_parser):
        result = icici_parser.parse(INVALID_SMS)
        assert result is None
```

`sms_finance_tracker/tests/unit/test_parsers/test_idfc_paraser.py`:

```py
from tests.sample_data.sms_samples import IDFC_CREDIT_CARD_DEBIT, INVALID_SMS
from tests.sample_data.praser_result_model import ResultModel

import datetime


class TestIDFCFirstBankParser:
    
    def test_parser_upi_transaction(self, idfc_parser):
        result = ResultModel(idfc_parser.parse(IDFC_CREDIT_CARD_DEBIT))
        
        assert result is not None
        assert result.account_num  == "4609"
        assert result.amount == 1110.00
        assert result.merchant == "dummyBrand" 
        assert result.timestamp == datetime.datetime(2025, 5, 31, 17, 17)
        assert result.merchant in result.description 
        
    
    def test_paraser_invlaid_transaction(self, idfc_parser):
        result = idfc_parser.parse(INVALID_SMS)
        assert result is None
```

`sms_finance_tracker/tests/unit/test_parsers/test_sbi_paraser.py`:

```py
from tests.sample_data.sms_samples import SBI_CREDIT_CARD_DEBIT, INVALID_SMS
from tests.sample_data.praser_result_model import ResultModel

import datetime


class TestSBIParser:
    
    def test_parser_upi_transaction(self, sbi_parser):
        result = ResultModel(sbi_parser.parse(SBI_CREDIT_CARD_DEBIT))
        
        assert result is not None
        assert result.account_num  == "0400"
        assert result.amount == 315
        assert result.merchant == "Kerala State Road Tran" 
        assert result.timestamp == datetime.datetime(2025, 6, 5, 0, 0)
        assert result.merchant in result.description 
        
    
    def test_paraser_invlaid_transaction(self, sbi_parser):
        result = sbi_parser.parse(INVALID_SMS)
        assert result is None
```

`sms_finance_tracker/tests/unit/test_services/test_budget_service.py`:

```py
from tests.fixtures.test_data_factory import TestDataFactory
from app.services.budget_service import (
    get_current_budget_period, 
    get_current_month_spending, 
    get_remaining_spend_power
)
from app.models.account import AccountType, AccountPurpose

from datetime import datetime
from freezegun import freeze_time


class TestBudgetService:
    """Test suite for BudgetService calculations"""
    
    @freeze_time("2025-06-15")
    def test_get_current_budget_period_june_2025(self):
        """Test budget period calculation for mid-June"""
        
        start_date, end_date = get_current_budget_period()
        
        
        assert start_date == datetime(2025, 6, 1, 0, 0, 0, 0)
        assert end_date.year == 2025
        assert end_date.month == 6
        assert end_date.day == 30  
        assert end_date.hour == 23
        assert end_date.minute == 59
    
    @freeze_time("2025-02-15")
    def test_get_current_budget_period_february_2025(self):
        """Test budget period calculation for February (non-leap year)"""
        
        start_date, end_date = get_current_budget_period()
        
        
        assert start_date == datetime(2025, 2, 1, 0, 0, 0, 0)
        assert end_date.day == 28
    
    @freeze_time("2025-06-15")
    def test_get_current_month_spending_no_transactions(self, db_session):
        """Test spending calculation with no transactions"""
        
        result = get_current_month_spending(db_session)
        
        
        assert result == 0.0
    
    @freeze_time("2025-06-15")
    def test_get_current_month_spending_with_valid_transactions(self, db_session):
        """Test spending calculation with valid personal account transactions"""

        personal_account = TestDataFactory.create_test_account(
            db_session, 
            account_type=AccountType.CREDIT_CARD,
            purpose=AccountPurpose.PERSONAL
        )
        
        category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, 
            category,
            name="Coffee",
            is_reimbursable=False,
            exclude_from_budget=False
        )
        
        TestDataFactory.create_test_transaction(
            db_session,
            account=personal_account,
            subcategory=subcategory,
            amount=100.0,
            transaction_datetime_from_sms=datetime(2025, 6, 10),
            override_reimbursable=None  
        )
        
        TestDataFactory.create_test_transaction(
            db_session,
            account=personal_account,
            subcategory=subcategory,
            amount=250.0,
            transaction_datetime_from_sms=datetime(2025, 6, 12)
        )
        
        
        result = get_current_month_spending(db_session)
        
        
        assert result == 350.0
    
    @freeze_time("2025-06-15")
    def test_get_current_month_spending_excludes_business_accounts(self, db_session):
        """Test that business account transactions are excluded"""
        business_account = TestDataFactory.create_test_account(
            db_session,
            purpose=AccountPurpose.BUSINESS
        )
        
        category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, is_reimbursable=False, exclude_from_budget=False
        )
        
        TestDataFactory.create_test_transaction(
            db_session,
            account=business_account,
            subcategory=subcategory,
            amount=500.0,
            transaction_datetime_from_sms=datetime(2025, 6, 10)
        )
        
        
        result = get_current_month_spending(db_session)
        
        assert result == 0.0
        
    @freeze_time("2025-06-15")
    def test_get_current_month_spending_excludes_reimbursable_subcategory(self, db_session):
        category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, is_reimbursable=True, exclude_from_budget=True
        )
        
        TestDataFactory.create_test_transaction(
            db_session,
            subcategory=subcategory,
            override_reimbursable=None,
            transaction_datetime_from_sms=datetime(2025, 6, 10)
        )
        
        result = get_current_month_spending(db_session)
        
        assert result == 0.0
        
    @freeze_time("2025-06-15")
    def  test_get_current_month_spending_includes_non_reimbursable_subcategory(self, db_session):
        pass
        

    # TODO: Add more get_current_month_spending tests for:
    # - Reimbursable transactions (should be excluded)
    # - Transactions with exclude_from_budget=True
    # - Linked transactions (should be excluded)
    # - Transactions outside current month (should be excluded)
    # - Override reimbursable scenarios
    
    @freeze_time("2025-06-15")
    def test_get_remaining_spend_power_with_budget_and_spending(self, db_session):
        """Test complete spend power calculation"""
        TestDataFactory.create_test_monthly_budget(
            db_session,
            year=2025,
            month=6,
            budget_amount=10000.0
        )
        
        personal_account = TestDataFactory.create_test_account(
            db_session, purpose=AccountPurpose.PERSONAL
        )
        category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, is_reimbursable=False, exclude_from_budget=False
        )
        
        TestDataFactory.create_test_transaction(
            db_session,
            account=personal_account,
            subcategory=subcategory,
            amount=2500.0,
            transaction_datetime_from_sms=datetime(2025, 6, 10)
        )
        
        
        result = get_remaining_spend_power(db_session)
        
        
        assert result is not None
        assert result["budget"] == 10000.0
        assert result["spent"] == 2500.0
        assert result["remaining"] == 7500.0 
    
    @freeze_time("2025-06-15")
    def test_get_remaining_spend_power_no_budget_set(self, db_session):
        """Test when no budget is set for current month"""
        
        result = get_remaining_spend_power(db_session)
        
        
        assert result is None

    # TODO: Add test for get_remaining_spend_power with no spending
```

`sms_finance_tracker/tests/unit/test_services/test_transaction_status_manager.py`:

```py
from tests.fixtures.test_data_factory import TestDataFactory
from app.services.transaction_status_manager import TransactionStatusManager
from app.models.transaction import TransactionStatus
from app.models.account import AccountType


class TestTransactionStatusManager:
    """Test suite for TransactionStatusManager business logic"""
    
    def test_is_account_valid_with_valid_account(self, db_session):
        """Test that a properly configured account is considered valid"""
        account = TestDataFactory.create_test_account(
            db_session, 
            account_type=AccountType.CREDIT_CARD 
        )
        
        result = TransactionStatusManager.is_account_valid(db_session, account.id)
        
        assert result is True
    
    def test_is_account_valid_with_unknown_account_type(self, db_session):
        """Test that UNKNOWN account type is considered invalid"""
        
        account = TestDataFactory.create_test_account(
            db_session, 
            account_type=AccountType.UNKNOWN
        )
        
          
        result = TransactionStatusManager.is_account_valid(db_session, account.id)
        
        
        assert result is False
    
    def test_is_account_valid_with_none_account_id(self, db_session):
        """Test that None account_id returns False"""
        
        result = TransactionStatusManager.is_account_valid(db_session, None)
        
        assert result is False
    
    def test_is_account_valid_with_nonexistent_account_id(self, db_session):
        """Test that non-existent account ID returns False"""
        
        result = TransactionStatusManager.is_account_valid(db_session, 99999)
        
        assert result is False
        
    def test_is_subcategory_valid(self, db_session):
        
        category = TestDataFactory.create_test_category(db_session)
        sub_category = TestDataFactory.create_test_sub_category(db_session, parent_category=category)
        
        result = TransactionStatusManager.is_subcategory_valid(db=db_session, subcategory_id=sub_category.id)
        
        assert result is not None
        assert result is True
    
    def test_determine_initial_status_all_valid(self, db_session):
        """Test status when both account and subcategory are valid"""
        
        account = TestDataFactory.create_test_account(
            db_session, account_type=AccountType.SAVINGS_ACCOUNT
        )
        category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, name="Pizza" 
        )
        
        creation_data = {
            "account_id": account.id,
            "subcategory_id": subcategory.id
        }
        
        
        result = TransactionStatusManager.determine_initial_status(db_session, creation_data)
        
        
        assert result == TransactionStatus.PROCESSED
    
    def test_determine_initial_status_needs_account_selection(self, db_session):
        """Test status when account is invalid but category is valid"""
        
        category = TestDataFactory.create_test_category(db_session)
        subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, name="Coffee"
        )
        
        creation_data = {
            "account_id": None, 
            "subcategory_id": subcategory.id
        }
        
        
        result = TransactionStatusManager.determine_initial_status(db_session, creation_data)
        
        
        assert result == TransactionStatus.PENDING_ACCOUNT_SELECTION
    
    def test_determine_status_for_update_upgrades_from_unknown_account(self, db_session):
        """Test upgrading from UNKNOWN account to valid account"""
        
        unknown_account = TestDataFactory.create_test_account(
            db_session, account_type=AccountType.UNKNOWN
        )
        category = TestDataFactory.create_test_category(db_session)
        valid_subcategory = TestDataFactory.create_test_sub_category(db_session, category)
        transaction = TestDataFactory.create_test_transaction(
            db_session, account=unknown_account, subcategory=valid_subcategory
        )
    
        valid_account = TestDataFactory.create_test_account(db_session)
    
        update_data = {"account_id": valid_account.id}
    
        result = TransactionStatusManager.determine_status_for_update(
            transaction, db_session, update_data
        )
    
        assert result == TransactionStatus.PROCESSED
        
        
    def test_determine_status_for_update_downgrades_to_unknown_account(self, db_session):
        """Test downgrading from valid account to UNKNOWN account"""
        
        valid_account = TestDataFactory.create_test_account(db_session)
        category = TestDataFactory.create_test_category(db_session)
        valid_subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, name="Coffee"
        )
        transaction = TestDataFactory.create_test_transaction(
            db_session, account=valid_account, subcategory=valid_subcategory)
    
        unknown_account = TestDataFactory.create_test_account(
            db_session, account_type=AccountType.UNKNOWN, account_last4="0000"
        )
    
        update_data = {"account_id": unknown_account.id}
    
        result = TransactionStatusManager.determine_status_for_update(transaction, db_session, update_data)
    
        assert result == TransactionStatus.PENDING_ACCOUNT_SELECTION
        
    def test_determine_status_for_update_category_to_uncategorized(self, db_session):
        """Test changing from valid category to Uncategorized"""

        valid_account = TestDataFactory.create_test_account(db_session)
        category = TestDataFactory.create_test_category(db_session)
        valid_subcategory = TestDataFactory.create_test_sub_category(
            db_session, category, name="Coffee")
        
        transaction = TestDataFactory.create_test_transaction(
            db_session, account=valid_account, subcategory=valid_subcategory)
        
        general_category = TestDataFactory.create_test_category(db_session, name="General")
        uncategoriesd_subcategory = TestDataFactory.create_test_sub_category(
            db_session, general_category, name="Uncategorized"
        )
        
        update_data = {"subcategory_id": uncategoriesd_subcategory.id}
        
        result = TransactionStatusManager.determine_status_for_update(transaction, db_session, update_data)
    
        assert result == TransactionStatus.PENDING_CATEGORIZATION
```